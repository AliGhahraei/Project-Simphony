
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID INT_VAL DEC_VAL CHAR_VAL STR_VAL BOOL_VAL EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : type ids ';' variable_declaration\n                             | empty  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5 level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6\n               |   level6 : '(' expression ')'\n               | const\n               | NOT const\n               | INCREMENT const\n               | DECREMENT const  function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : statute ';' statutes\n                 | emptystatute   : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special  call : ID '(' expressions ')'  expressions : expression\n                    | expression ',' expressions  assignment : ID '=' expression\n                   | ID '[' expression ']' '=' expression  condition : IF '(' expression ')' block elses  cycle : WHILE '(' expression ')' block  special : SPECIAL_ID '(' expressions ')'  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | call\n              | special\n              | INT_VAL\n              | DEC_VAL\n              | CHAR_VAL\n              | STR_VAL\n              | BOOL_VAL  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,69,],[0,-1,-76,]),'ID':([2,6,7,8,9,10,11,12,21,23,24,25,26,28,30,44,50,51,56,58,59,60,70,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,107,123,131,134,143,146,],[3,19,-4,-42,-43,-44,-45,-46,39,43,-40,-41,-2,19,46,-3,46,46,46,46,46,46,39,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,129,46,46,-2,39,46,]),';':([3,17,18,19,27,29,32,34,35,36,37,38,45,46,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,68,69,72,78,79,80,81,82,83,84,85,86,87,88,89,90,95,96,97,101,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,131,132,133,138,139,140,145,149,152,153,],[4,26,-2,-8,-5,-7,70,-49,-50,-51,-52,-53,-6,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-68,-69,-70,-71,-72,-73,-74,-75,-76,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-57,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-61,-31,-2,-60,-58,-59,-62,-63,151,-2,-64,]),'INT':([4,16,26,77,134,136,],[8,8,8,8,8,8,]),'DEC':([4,16,26,77,134,136,],[9,9,9,9,9,9,]),'CHAR':([4,16,26,77,134,136,],[10,10,10,10,10,10,]),'STR':([4,16,26,77,134,136,],[11,11,11,11,11,11,]),'BOOL':([4,16,26,77,134,136,],[12,12,12,12,12,12,]),'FUN':([4,5,7,14,26,44,151,],[-2,16,-4,16,-2,-3,-39,]),'{':([4,5,7,13,14,15,22,26,44,125,126,128,141,150,151,],[-2,-2,-4,21,-2,-38,-37,-2,-3,21,21,134,21,21,-39,]),'IF':([7,21,26,44,70,134,143,],[-4,40,-2,-3,40,-2,40,]),'WHILE':([7,21,26,44,70,134,143,],[-4,41,-2,-3,41,-2,41,]),'SPECIAL_ID':([7,21,26,30,44,50,51,56,58,59,60,70,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,134,143,146,],[-4,42,-2,42,-3,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-2,42,42,]),'}':([7,21,26,31,33,44,70,98,134,143,147,],[-4,-2,-2,69,-48,-3,-2,-47,-2,-2,149,]),'VOID':([16,],[25,]),',':([18,19,46,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,68,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,95,96,97,100,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,129,],[28,-8,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,123,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-31,-61,136,]),'[':([19,39,46,],[30,73,30,]),'+':([30,46,50,51,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,84,85,86,87,88,95,96,97,118,119,120,121,122,123,127,131,146,],[50,-8,-31,-31,89,-27,50,-33,-68,-69,-70,-71,-72,-73,-74,-75,50,50,50,50,50,50,-9,50,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-28,-29,-30,-32,-54,50,-61,50,50,]),'-':([30,46,50,51,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,84,85,86,87,88,95,96,97,118,119,120,121,122,123,127,131,146,],[51,-8,-31,-31,90,-27,51,-33,-68,-69,-70,-71,-72,-73,-74,-75,51,51,51,51,51,51,-9,51,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-28,-29,-30,-32,-54,51,-61,51,51,]),'<':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,89,90,95,96,97,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,84,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-35,-36,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'>':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,89,90,95,96,97,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,85,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-35,-36,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'LESS_EQUAL_THAN':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,89,90,95,96,97,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,86,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-35,-36,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'GREATER_EQUAL_THAN':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,89,90,95,96,97,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,87,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-35,-36,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'EQUALS':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,82,83,89,90,95,96,97,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,88,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-35,-36,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'OR':([30,46,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,84,85,86,87,88,89,90,95,96,97,111,112,113,114,115,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,82,-18,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'AND':([30,46,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,79,84,85,86,87,88,89,90,95,96,97,111,112,113,114,115,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,-31,-31,83,-18,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),'EXPONENTIATION':([30,46,48,49,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,68,71,72,73,74,75,76,78,80,81,82,83,84,85,86,87,88,89,90,95,96,97,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,131,146,],[-31,-8,79,-12,-31,-31,-15,-18,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-31,-61,-31,-31,]),']':([30,46,47,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,68,73,78,79,80,81,82,83,84,85,86,87,88,89,90,95,96,97,102,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,],[-31,-8,78,-10,-12,-31,-31,-15,-18,-24,-27,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-35,-36,124,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-61,]),'(':([30,39,40,41,42,43,46,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,142,146,],[56,71,74,75,76,77,71,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,146,56,]),'NOT':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INCREMENT':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECREMENT':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'INT_VAL':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'DEC_VAL':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'CHAR_VAL':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'STR_VAL':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'BOOL_VAL':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'=':([39,124,],[72,131,]),'*':([46,55,57,61,62,63,64,65,66,67,68,78,95,96,97,121,122,127,],[-8,91,-33,-68,-69,-70,-71,-72,-73,-74,-75,-9,-34,-35,-36,-32,-54,-61,]),'/':([46,55,57,61,62,63,64,65,66,67,68,78,95,96,97,121,122,127,],[-8,92,-33,-68,-69,-70,-71,-72,-73,-74,-75,-9,-34,-35,-36,-32,-54,-61,]),'MOD':([46,55,57,61,62,63,64,65,66,67,68,78,95,96,97,121,122,127,],[-8,93,-33,-68,-69,-70,-71,-72,-73,-74,-75,-9,-34,-35,-36,-32,-54,-61,]),')':([46,48,49,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,68,71,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,99,100,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,129,130,135,137,144,146,148,],[-8,-10,-12,-31,-31,-15,-18,-24,-27,-31,-33,-68,-69,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,121,-34,-35,-36,122,-55,125,126,127,128,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-54,-31,-61,-2,-56,-65,-67,-66,-31,150,]),'ELSE':([69,132,152,],[-76,141,141,]),'ELSEIF':([69,132,152,],[-76,142,142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,26,134,],[5,44,143,]),'type':([4,16,26,77,134,136,],[6,24,6,107,6,107,]),'empty':([4,5,14,18,21,26,70,129,132,134,143,152,],[7,15,15,29,33,7,33,137,140,7,33,140,]),'function_declaration':([5,14,],[13,22,]),'function':([5,14,],[14,14,]),'ids':([6,28,],[17,45,]),'id':([6,28,30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[18,18,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'block':([13,125,126,141,150,],[20,132,133,145,152,]),'return_type':([16,],[23,]),'other_ids':([18,],[27,]),'statutes':([21,70,143,],[31,98,147,]),'statute':([21,70,143,],[32,32,32,]),'call':([21,30,50,51,56,58,59,60,70,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,143,146,],[34,62,62,62,62,62,62,62,34,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,34,62,]),'assignment':([21,70,143,],[35,35,35,]),'condition':([21,70,143,],[36,36,36,]),'cycle':([21,70,143,],[37,37,37,]),'special':([21,30,50,51,56,58,59,60,70,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,143,146,],[38,63,63,63,63,63,63,63,38,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,38,63,]),'expression':([30,56,71,72,73,74,75,76,123,131,146,],[47,94,100,101,102,103,104,100,100,138,148,]),'level1':([30,56,71,72,73,74,75,76,79,123,131,146,],[48,48,48,48,48,48,48,48,108,48,48,48,]),'level2':([30,50,51,56,71,72,73,74,75,76,79,123,131,146,],[49,80,81,49,49,49,49,49,49,49,49,49,49,49,]),'level3':([30,50,51,56,71,72,73,74,75,76,79,82,83,123,131,146,],[52,52,52,52,52,52,52,52,52,52,52,109,110,52,52,52,]),'level4':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,123,131,146,],[53,53,53,53,53,53,53,53,53,53,53,53,53,111,112,113,114,115,53,53,53,]),'level5':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,123,131,146,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,116,117,54,54,54,]),'level6':([30,50,51,56,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,118,119,120,55,55,55,]),'const':([30,50,51,56,58,59,60,71,72,73,74,75,76,79,82,83,84,85,86,87,88,89,90,91,92,93,123,131,146,],[57,57,57,57,95,96,97,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'expressions':([71,76,123,],[99,105,130,]),'parameters':([77,136,],[106,144,]),'other_parameters':([129,],[135,]),'elses':([132,152,],[139,153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> type ids ; variable_declaration','variable_declaration',4,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',23),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',28),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',29),
  ('id -> ID','id',1,'p_id','parser.py',34),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',35),
  ('expression -> level1','expression',1,'p_expression','parser.py',40),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',41),
  ('level1 -> level2','level1',1,'p_level1','parser.py',46),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',47),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',48),
  ('level2 -> level3','level2',1,'p_level2','parser.py',53),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',54),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',55),
  ('level3 -> level4','level3',1,'p_level3','parser.py',60),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',61),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',62),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',63),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',64),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',65),
  ('level4 -> level5','level4',1,'p_level4','parser.py',70),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',71),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',72),
  ('level5 -> level6','level5',1,'p_level5','parser.py',77),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',78),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',79),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',80),
  ('level5 -> <empty>','level5',0,'p_level5','parser.py',81),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',86),
  ('level6 -> const','level6',1,'p_level6','parser.py',87),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',88),
  ('level6 -> INCREMENT const','level6',2,'p_level6','parser.py',89),
  ('level6 -> DECREMENT const','level6',2,'p_level6','parser.py',90),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',95),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',96),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',101),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',106),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',107),
  ('type -> INT','type',1,'p_type','parser.py',112),
  ('type -> DEC','type',1,'p_type','parser.py',113),
  ('type -> CHAR','type',1,'p_type','parser.py',114),
  ('type -> STR','type',1,'p_type','parser.py',115),
  ('type -> BOOL','type',1,'p_type','parser.py',116),
  ('statutes -> statute ; statutes','statutes',3,'p_statutes','parser.py',121),
  ('statutes -> empty','statutes',1,'p_statutes','parser.py',122),
  ('statute -> call','statute',1,'p_statute','parser.py',126),
  ('statute -> assignment','statute',1,'p_statute','parser.py',127),
  ('statute -> condition','statute',1,'p_statute','parser.py',128),
  ('statute -> cycle','statute',1,'p_statute','parser.py',129),
  ('statute -> special','statute',1,'p_statute','parser.py',130),
  ('call -> ID ( expressions )','call',4,'p_call','parser.py',135),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',140),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',141),
  ('assignment -> ID = expression','assignment',3,'p_assignment','parser.py',146),
  ('assignment -> ID [ expression ] = expression','assignment',6,'p_assignment','parser.py',147),
  ('condition -> IF ( expression ) block elses','condition',6,'p_condition','parser.py',152),
  ('cycle -> WHILE ( expression ) block','cycle',5,'p_cycle','parser.py',157),
  ('special -> SPECIAL_ID ( expressions )','special',4,'p_special','parser.py',162),
  ('elses -> empty','elses',1,'p_elses','parser.py',167),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',168),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',169),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',174),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',179),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',180),
  ('const -> id','const',1,'p_const','parser.py',184),
  ('const -> call','const',1,'p_const','parser.py',185),
  ('const -> special','const',1,'p_const','parser.py',186),
  ('const -> INT_VAL','const',1,'p_const','parser.py',187),
  ('const -> DEC_VAL','const',1,'p_const','parser.py',188),
  ('const -> CHAR_VAL','const',1,'p_const','parser.py',189),
  ('const -> STR_VAL','const',1,'p_const','parser.py',190),
  ('const -> BOOL_VAL','const',1,'p_const','parser.py',191),
  ('block -> { statutes }','block',3,'p_block','parser.py',196),
]
