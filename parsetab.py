
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID INT_VAL DEC_VAL CHAR_VAL STR_VAL BOOL_VAL RETURN EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : type ids ';' variable_declaration\n                             | empty  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5  level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6  level6 : '(' expression ')'\n               | const\n               | NOT const\n               | increment\n               | decrement  increment : INCREMENT id  decrement : DECREMENT id  function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : statute ';' statutes\n                 | emptystatute   : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special \n                 | return\n                 | increment\n                 | decrement  call : ID '(' expressions ')'  expressions : expression\n                    | expression ',' expressions  assignment : id '=' expression  condition : IF '(' expression ')' block elses  cycle : WHILE '(' expression ')' block  special : SPECIAL_ID '(' expressions ')'  return : RETURN expression\n               | RETURN  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | call\n              | special\n              | INT_VAL\n              | DEC_VAL\n              | CHAR_VAL\n              | STR_VAL\n              | BOOL_VAL  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,76,],[0,-1,-81,]),'ID':([2,6,7,8,9,10,11,12,21,23,24,25,26,28,30,47,48,49,51,57,58,63,65,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,113,129,138,146,149,],[3,19,-4,-43,-44,-45,-46,-47,42,50,-41,-42,-2,19,53,53,19,19,-3,53,53,53,53,42,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,134,53,-2,42,53,]),';':([3,17,18,19,27,29,32,34,35,36,37,38,39,40,41,47,52,53,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,76,83,84,85,87,89,90,104,108,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,136,137,142,143,148,152,155,156,],[4,26,-2,-8,-5,-7,77,-50,-51,-52,-53,-54,-55,-56,-57,-66,-6,-8,-10,-12,-15,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-81,-65,-36,-37,-9,-13,-14,-33,-61,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,-2,-63,-62,-67,-68,154,-2,-69,]),'INT':([4,16,26,86,138,140,],[8,8,8,8,8,8,]),'DEC':([4,16,26,86,138,140,],[9,9,9,9,9,9,]),'CHAR':([4,16,26,86,138,140,],[10,10,10,10,10,10,]),'STR':([4,16,26,86,138,140,],[11,11,11,11,11,11,]),'BOOL':([4,16,26,86,138,140,],[12,12,12,12,12,12,]),'FUN':([4,5,7,14,26,51,154,],[-2,16,-4,16,-2,-3,-40,]),'{':([4,5,7,13,14,15,22,26,51,130,131,133,144,153,154,],[-2,-2,-4,21,-2,-39,-38,-2,-3,21,21,138,21,21,-40,]),'IF':([7,21,26,51,77,138,146,],[-4,44,-2,-3,44,-2,44,]),'WHILE':([7,21,26,51,77,138,146,],[-4,45,-2,-3,45,-2,45,]),'SPECIAL_ID':([7,21,26,30,47,51,57,58,63,65,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,138,146,149,],[-4,46,-2,46,46,-3,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-2,46,46,]),'RETURN':([7,21,26,51,77,138,146,],[-4,47,-2,-3,47,-2,47,]),'INCREMENT':([7,21,26,30,47,51,57,58,63,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,138,146,149,],[-4,48,-2,48,48,-3,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-2,48,48,]),'DECREMENT':([7,21,26,30,47,51,57,58,63,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,138,146,149,],[-4,49,-2,49,49,-3,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-2,49,49,]),'}':([7,21,26,31,33,51,77,105,138,146,150,],[-4,-2,-2,76,-49,-3,-2,-48,-2,-2,152,]),'VOID':([16,],[25,]),',':([18,19,53,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,89,90,104,107,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,134,],[28,-8,-8,-10,-12,-15,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-13,-14,-33,129,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,140,]),'*':([19,53,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,127,128,132,],[-8,-8,100,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-31,-58,-64,]),'/':([19,53,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,127,128,132,],[-8,-8,101,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-31,-58,-64,]),'MOD':([19,53,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,127,128,132,],[-8,-8,102,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-31,-58,-64,]),'+':([19,30,47,53,61,62,63,64,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82,84,85,87,88,104,124,125,126,127,128,129,132,149,],[-8,57,57,-8,98,-27,57,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,57,57,57,57,57,-36,-37,-9,57,-33,-28,-29,-30,-31,-58,57,-64,57,]),'-':([19,30,47,53,61,62,63,64,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82,84,85,87,88,104,124,125,126,127,128,129,132,149,],[-8,58,58,-8,99,-27,58,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,58,58,58,58,58,-36,-37,-9,58,-33,-28,-29,-30,-31,-58,58,-64,58,]),'<':([19,53,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,122,123,124,125,126,127,128,132,],[-8,-8,93,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-25,-26,-28,-29,-30,-31,-58,-64,]),'>':([19,53,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,122,123,124,125,126,127,128,132,],[-8,-8,94,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-25,-26,-28,-29,-30,-31,-58,-64,]),'LESS_EQUAL_THAN':([19,53,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,122,123,124,125,126,127,128,132,],[-8,-8,95,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-25,-26,-28,-29,-30,-31,-58,-64,]),'GREATER_EQUAL_THAN':([19,53,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,122,123,124,125,126,127,128,132,],[-8,-8,96,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-25,-26,-28,-29,-30,-31,-58,-64,]),'EQUALS':([19,53,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,122,123,124,125,126,127,128,132,],[-8,-8,97,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-25,-26,-28,-29,-30,-31,-58,-64,]),'OR':([19,53,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,117,118,119,120,121,122,123,124,125,126,127,128,132,],[-8,-8,91,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,]),'AND':([19,53,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,104,117,118,119,120,121,122,123,124,125,126,127,128,132,],[-8,-8,92,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-33,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,]),'EXPONENTIATION':([19,53,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,89,90,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,],[-8,-8,88,-12,-15,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-13,-14,-33,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,]),']':([19,53,54,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,89,90,104,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,],[-8,-8,87,-10,-12,-15,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-13,-14,-33,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,]),')':([19,53,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,84,85,87,89,90,103,104,106,107,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,134,135,139,141,147,151,],[-8,-8,-10,-12,-15,-18,-24,-27,-32,-34,-35,-73,-74,-75,-76,-77,-78,-79,-80,-36,-37,-9,-13,-14,127,-33,128,-59,130,131,132,133,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-31,-58,-64,-2,-60,-70,-72,-71,153,]),'[':([19,42,53,],[30,30,30,]),'(':([30,42,44,45,46,47,50,53,57,58,63,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,145,149,],[63,78,80,81,82,63,86,78,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,149,63,]),'NOT':([30,47,57,58,63,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'INT_VAL':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'DEC_VAL':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'CHAR_VAL':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'STR_VAL':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'BOOL_VAL':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'=':([42,43,87,],[-8,79,-9,]),'ELSE':([76,136,155,],[-81,144,144,]),'ELSEIF':([76,136,155,],[-81,145,145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,26,138,],[5,51,146,]),'type':([4,16,26,86,138,140,],[6,24,6,113,6,113,]),'empty':([4,5,14,18,21,26,77,134,136,138,146,155,],[7,15,15,29,33,7,33,141,143,7,33,143,]),'function_declaration':([5,14,],[13,22,]),'function':([5,14,],[14,14,]),'ids':([6,28,],[17,52,]),'id':([6,21,28,30,47,48,49,57,58,63,65,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,146,149,],[18,43,18,68,68,84,85,68,68,68,68,43,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,43,68,]),'block':([13,130,131,144,153,],[20,136,137,148,155,]),'return_type':([16,],[23,]),'other_ids':([18,],[27,]),'statutes':([21,77,146,],[31,105,150,]),'statute':([21,77,146,],[32,32,32,]),'call':([21,30,47,57,58,63,65,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,146,149,],[34,69,69,69,69,69,69,34,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,34,69,]),'assignment':([21,77,146,],[35,35,35,]),'condition':([21,77,146,],[36,36,36,]),'cycle':([21,77,146,],[37,37,37,]),'special':([21,30,47,57,58,63,65,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,146,149,],[38,70,70,70,70,70,70,38,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,38,70,]),'return':([21,77,146,],[39,39,39,]),'increment':([21,30,47,57,58,63,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,146,149,],[40,66,66,66,66,66,40,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,40,66,]),'decrement':([21,30,47,57,58,63,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,146,149,],[41,67,67,67,67,67,41,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,41,67,]),'expression':([30,47,63,78,79,80,81,82,129,149,],[54,83,103,107,108,109,110,107,107,151,]),'level1':([30,47,63,78,79,80,81,82,88,129,149,],[55,55,55,55,55,55,55,55,114,55,55,]),'level2':([30,47,57,58,63,78,79,80,81,82,88,129,149,],[56,56,89,90,56,56,56,56,56,56,56,56,56,]),'level3':([30,47,57,58,63,78,79,80,81,82,88,91,92,129,149,],[59,59,59,59,59,59,59,59,59,59,59,115,116,59,59,]),'level4':([30,47,57,58,63,78,79,80,81,82,88,91,92,93,94,95,96,97,129,149,],[60,60,60,60,60,60,60,60,60,60,60,60,60,117,118,119,120,121,60,60,]),'level5':([30,47,57,58,63,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,129,149,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,122,123,61,61,]),'level6':([30,47,57,58,63,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,124,125,126,62,62,]),'const':([30,47,57,58,63,65,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,129,149,],[64,64,64,64,64,104,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'expressions':([78,82,129,],[106,111,135,]),'parameters':([86,140,],[112,147,]),'other_parameters':([134,],[139,]),'elses':([136,155,],[142,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> type ids ; variable_declaration','variable_declaration',4,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',23),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',28),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',29),
  ('id -> ID','id',1,'p_id','parser.py',34),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',35),
  ('expression -> level1','expression',1,'p_expression','parser.py',40),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',41),
  ('level1 -> level2','level1',1,'p_level1','parser.py',46),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',47),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',48),
  ('level2 -> level3','level2',1,'p_level2','parser.py',53),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',54),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',55),
  ('level3 -> level4','level3',1,'p_level3','parser.py',60),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',61),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',62),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',63),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',64),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',65),
  ('level4 -> level5','level4',1,'p_level4','parser.py',70),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',71),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',72),
  ('level5 -> level6','level5',1,'p_level5','parser.py',77),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',78),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',79),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',80),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',85),
  ('level6 -> const','level6',1,'p_level6','parser.py',86),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',87),
  ('level6 -> increment','level6',1,'p_level6','parser.py',88),
  ('level6 -> decrement','level6',1,'p_level6','parser.py',89),
  ('increment -> INCREMENT id','increment',2,'p_increment','parser.py',94),
  ('decrement -> DECREMENT id','decrement',2,'p_decrement','parser.py',98),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',102),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',103),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',108),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',113),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',114),
  ('type -> INT','type',1,'p_type','parser.py',119),
  ('type -> DEC','type',1,'p_type','parser.py',120),
  ('type -> CHAR','type',1,'p_type','parser.py',121),
  ('type -> STR','type',1,'p_type','parser.py',122),
  ('type -> BOOL','type',1,'p_type','parser.py',123),
  ('statutes -> statute ; statutes','statutes',3,'p_statutes','parser.py',128),
  ('statutes -> empty','statutes',1,'p_statutes','parser.py',129),
  ('statute -> call','statute',1,'p_statute','parser.py',133),
  ('statute -> assignment','statute',1,'p_statute','parser.py',134),
  ('statute -> condition','statute',1,'p_statute','parser.py',135),
  ('statute -> cycle','statute',1,'p_statute','parser.py',136),
  ('statute -> special','statute',1,'p_statute','parser.py',137),
  ('statute -> return','statute',1,'p_statute','parser.py',138),
  ('statute -> increment','statute',1,'p_statute','parser.py',139),
  ('statute -> decrement','statute',1,'p_statute','parser.py',140),
  ('call -> ID ( expressions )','call',4,'p_call','parser.py',145),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',150),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',151),
  ('assignment -> id = expression','assignment',3,'p_assignment','parser.py',156),
  ('condition -> IF ( expression ) block elses','condition',6,'p_condition','parser.py',161),
  ('cycle -> WHILE ( expression ) block','cycle',5,'p_cycle','parser.py',166),
  ('special -> SPECIAL_ID ( expressions )','special',4,'p_special','parser.py',171),
  ('return -> RETURN expression','return',2,'p_return','parser.py',176),
  ('return -> RETURN','return',1,'p_return','parser.py',177),
  ('elses -> empty','elses',1,'p_elses','parser.py',181),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',182),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',183),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',188),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',193),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',194),
  ('const -> id','const',1,'p_const','parser.py',198),
  ('const -> call','const',1,'p_const','parser.py',199),
  ('const -> special','const',1,'p_const','parser.py',200),
  ('const -> INT_VAL','const',1,'p_const','parser.py',201),
  ('const -> DEC_VAL','const',1,'p_const','parser.py',202),
  ('const -> CHAR_VAL','const',1,'p_const','parser.py',203),
  ('const -> STR_VAL','const',1,'p_const','parser.py',204),
  ('const -> BOOL_VAL','const',1,'p_const','parser.py',205),
  ('block -> { statutes }','block',3,'p_block','parser.py',210),
]
