
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID INT_VAL DEC_VAL CHAR_VAL STR_VAL BOOL_VAL EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : type ids ';' variable_declaration\n                             | empty  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5 level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6\n               |   level6 : '(' expression ')'\n               | const\n               | NOT const\n               | INCREMENT const\n               | DECREMENT const \n               | call\n               | NOT call\n               | INCREMENT call\n               | DECREMENT call function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special  call : ID '(' expressions ')' ';'  expressions : expression\n                    | expression ',' expressions  assignment : ID '=' expression ';'\n                   | ID '[' expression ']' '=' expression ';'  condition : IF '(' expression ')' block elses ';'  cycle : WHILE '(' expression ')' block ';'  special : SPECIAL_ID '(' expressions ')' ';'  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | INT_VAL\n              | DEC_VAL\n              | CHAR_VAL\n              | STR_VAL\n              | BOOL_VAL  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,66,],[0,-1,-76,]),'ID':([2,6,7,8,9,10,11,12,21,23,24,25,26,28,30,42,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,105,121,131,135,145,150,],[3,19,-4,-46,-47,-48,-49,-50,37,41,-44,-45,-2,19,44,-3,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,128,44,44,-2,37,44,]),';':([3,17,18,19,27,29,43,44,46,47,48,49,50,51,52,53,55,59,60,61,62,63,64,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,129,131,132,133,139,140,141,149,153,156,157,],[4,26,-2,-8,-5,-7,-6,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-73,-74,-75,-76,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,122,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,129,134,-56,-31,-2,144,147,148,-64,-65,155,-2,-66,]),'INT':([4,16,26,73,135,137,],[8,8,8,8,8,8,]),'DEC':([4,16,26,73,135,137,],[9,9,9,9,9,9,]),'CHAR':([4,16,26,73,135,137,],[10,10,10,10,10,10,]),'STR':([4,16,26,73,135,137,],[11,11,11,11,11,11,]),'BOOL':([4,16,26,73,135,137,],[12,12,12,12,12,12,]),'FUN':([4,5,7,14,26,42,155,],[-2,16,-4,16,-2,-3,-43,]),'{':([4,5,7,13,14,15,22,26,42,124,125,127,142,154,155,],[-2,-2,-4,21,-2,-42,-41,-2,-3,21,21,135,21,21,-43,]),'IF':([7,21,26,42,135,145,],[-4,38,-2,-3,-2,38,]),'WHILE':([7,21,26,42,135,145,],[-4,39,-2,-3,-2,39,]),'SPECIAL_ID':([7,21,26,42,135,145,],[-4,40,-2,-3,-2,40,]),'VOID':([16,],[25,]),',':([18,19,44,46,47,48,49,50,51,52,53,55,59,60,61,62,63,64,65,67,72,74,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,128,129,],[28,-8,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,121,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,137,-56,]),'[':([19,37,44,],[30,69,30,]),'+':([30,44,48,49,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,91,92,93,94,95,96,116,117,118,119,121,129,131,150,],[48,-8,-31,-31,85,-27,48,-33,-37,-70,-71,-72,-73,-74,-75,48,48,48,48,48,48,-9,48,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,48,-56,48,48,]),'-':([30,44,48,49,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,91,92,93,94,95,96,116,117,118,119,121,129,131,150,],[49,-8,-31,-31,86,-27,49,-33,-37,-70,-71,-72,-73,-74,-75,49,49,49,49,49,49,-9,49,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,49,-56,49,49,]),'<':([30,44,48,49,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,85,86,91,92,93,94,95,96,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,80,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'>':([30,44,48,49,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,85,86,91,92,93,94,95,96,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,81,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'LESS_EQUAL_THAN':([30,44,48,49,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,85,86,91,92,93,94,95,96,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,82,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'GREATER_EQUAL_THAN':([30,44,48,49,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,85,86,91,92,93,94,95,96,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,83,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'EQUALS':([30,44,48,49,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,78,79,85,86,91,92,93,94,95,96,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,84,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'OR':([30,44,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,80,81,82,83,84,85,86,91,92,93,94,95,96,109,110,111,112,113,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,78,-18,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'AND':([30,44,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,75,80,81,82,83,84,85,86,91,92,93,94,95,96,109,110,111,112,113,114,115,116,117,118,119,121,129,131,150,],[-31,-8,-31,-31,79,-18,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'EXPONENTIATION':([30,44,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,67,68,69,70,71,72,74,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,107,108,109,110,111,112,113,114,115,116,117,118,119,121,129,131,150,],[-31,-8,75,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-31,-31,-9,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),']':([30,44,45,46,47,48,49,50,51,52,53,55,59,60,61,62,63,64,65,69,74,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,100,106,107,108,109,110,111,112,113,114,115,116,117,118,119,129,],[-31,-8,74,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-73,-74,-75,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,123,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-56,]),'(':([30,37,38,39,40,41,44,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,143,150,],[54,67,70,71,72,73,67,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,150,54,]),'NOT':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'INCREMENT':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DECREMENT':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INT_VAL':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'DEC_VAL':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'CHAR_VAL':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'STR_VAL':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'BOOL_VAL':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'}':([31,32,33,34,35,36,122,129,134,144,147,148,151,],[66,-51,-52,-53,-54,-55,-59,-56,-63,-62,-60,-61,153,]),'=':([37,123,],[68,131,]),'*':([44,53,55,59,60,61,62,63,64,65,74,91,92,93,94,95,96,119,129,],[-8,87,-33,-37,-70,-71,-72,-73,-74,-75,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),'/':([44,53,55,59,60,61,62,63,64,65,74,91,92,93,94,95,96,119,129,],[-8,88,-33,-37,-70,-71,-72,-73,-74,-75,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),'MOD':([44,53,55,59,60,61,62,63,64,65,74,91,92,93,94,95,96,119,129,],[-8,89,-33,-37,-70,-71,-72,-73,-74,-75,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),')':([44,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,67,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,90,91,92,93,94,95,96,97,98,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,128,129,130,136,138,146,150,152,],[-8,-10,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-70,-71,-72,-73,-74,-75,-31,-31,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,119,-34,-38,-35,-39,-36,-40,120,-57,124,125,126,127,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-2,-56,-58,-67,-69,-68,-31,154,]),'ELSE':([66,132,156,],[-76,142,142,]),'ELSEIF':([66,132,156,],[-76,143,143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,26,135,],[5,42,145,]),'type':([4,16,26,73,135,137,],[6,24,6,105,6,105,]),'empty':([4,5,14,18,26,128,132,135,156,],[7,15,15,29,7,138,141,7,141,]),'function_declaration':([5,14,],[13,22,]),'function':([5,14,],[14,14,]),'ids':([6,28,],[17,43,]),'id':([6,28,30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[18,18,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'block':([13,124,125,142,154,],[20,132,133,149,156,]),'return_type':([16,],[23,]),'other_ids':([18,],[27,]),'statutes':([21,145,],[31,151,]),'call':([21,30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,145,150,],[32,59,59,59,59,92,94,96,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,32,59,]),'assignment':([21,145,],[33,33,]),'condition':([21,145,],[34,34,]),'cycle':([21,145,],[35,35,]),'special':([21,145,],[36,36,]),'expression':([30,54,67,68,69,70,71,72,121,131,150,],[45,90,98,99,100,101,102,98,98,139,152,]),'level1':([30,54,67,68,69,70,71,72,75,121,131,150,],[46,46,46,46,46,46,46,46,106,46,46,46,]),'level2':([30,48,49,54,67,68,69,70,71,72,75,121,131,150,],[47,76,77,47,47,47,47,47,47,47,47,47,47,47,]),'level3':([30,48,49,54,67,68,69,70,71,72,75,78,79,121,131,150,],[50,50,50,50,50,50,50,50,50,50,50,107,108,50,50,50,]),'level4':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,121,131,150,],[51,51,51,51,51,51,51,51,51,51,51,51,51,109,110,111,112,113,51,51,51,]),'level5':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,121,131,150,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,114,115,52,52,52,]),'level6':([30,48,49,54,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,116,117,118,53,53,53,]),'const':([30,48,49,54,56,57,58,67,68,69,70,71,72,75,78,79,80,81,82,83,84,85,86,87,88,89,121,131,150,],[55,55,55,55,91,93,95,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'expressions':([67,72,121,],[97,103,130,]),'parameters':([73,137,],[104,146,]),'other_parameters':([128,],[136,]),'elses':([132,156,],[140,157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> type ids ; variable_declaration','variable_declaration',4,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',23),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',28),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',29),
  ('id -> ID','id',1,'p_id','parser.py',34),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',35),
  ('expression -> level1','expression',1,'p_expression','parser.py',40),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',41),
  ('level1 -> level2','level1',1,'p_level1','parser.py',46),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',47),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',48),
  ('level2 -> level3','level2',1,'p_level2','parser.py',53),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',54),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',55),
  ('level3 -> level4','level3',1,'p_level3','parser.py',60),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',61),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',62),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',63),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',64),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',65),
  ('level4 -> level5','level4',1,'p_level4','parser.py',70),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',71),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',72),
  ('level5 -> level6','level5',1,'p_level5','parser.py',77),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',78),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',79),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',80),
  ('level5 -> <empty>','level5',0,'p_level5','parser.py',81),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',86),
  ('level6 -> const','level6',1,'p_level6','parser.py',87),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',88),
  ('level6 -> INCREMENT const','level6',2,'p_level6','parser.py',89),
  ('level6 -> DECREMENT const','level6',2,'p_level6','parser.py',90),
  ('level6 -> call','level6',1,'p_level6','parser.py',91),
  ('level6 -> NOT call','level6',2,'p_level6','parser.py',92),
  ('level6 -> INCREMENT call','level6',2,'p_level6','parser.py',93),
  ('level6 -> DECREMENT call','level6',2,'p_level6','parser.py',94),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',99),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',100),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',105),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',110),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',111),
  ('type -> INT','type',1,'p_type','parser.py',116),
  ('type -> DEC','type',1,'p_type','parser.py',117),
  ('type -> CHAR','type',1,'p_type','parser.py',118),
  ('type -> STR','type',1,'p_type','parser.py',119),
  ('type -> BOOL','type',1,'p_type','parser.py',120),
  ('statutes -> call','statutes',1,'p_statutes','parser.py',125),
  ('statutes -> assignment','statutes',1,'p_statutes','parser.py',126),
  ('statutes -> condition','statutes',1,'p_statutes','parser.py',127),
  ('statutes -> cycle','statutes',1,'p_statutes','parser.py',128),
  ('statutes -> special','statutes',1,'p_statutes','parser.py',129),
  ('call -> ID ( expressions ) ;','call',5,'p_call','parser.py',134),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',139),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',140),
  ('assignment -> ID = expression ;','assignment',4,'p_assignment','parser.py',145),
  ('assignment -> ID [ expression ] = expression ;','assignment',7,'p_assignment','parser.py',146),
  ('condition -> IF ( expression ) block elses ;','condition',7,'p_condition','parser.py',151),
  ('cycle -> WHILE ( expression ) block ;','cycle',6,'p_cycle','parser.py',156),
  ('special -> SPECIAL_ID ( expressions ) ;','special',5,'p_special','parser.py',161),
  ('elses -> empty','elses',1,'p_elses','parser.py',166),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',167),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',168),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',173),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',178),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',179),
  ('const -> id','const',1,'p_const','parser.py',183),
  ('const -> INT_VAL','const',1,'p_const','parser.py',184),
  ('const -> DEC_VAL','const',1,'p_const','parser.py',185),
  ('const -> CHAR_VAL','const',1,'p_const','parser.py',186),
  ('const -> STR_VAL','const',1,'p_const','parser.py',187),
  ('const -> BOOL_VAL','const',1,'p_const','parser.py',188),
  ('block -> { statutes }','block',3,'p_block','parser.py',193),
]
