
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : type ids ';' variable_declaration \n                             | empty  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5 level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6\n               |   level6 : '(' expression ')'\n               | const\n               | NOT const\n               | INCREMENT const\n               | DECREMENT const \n               | call\n               | NOT call\n               | INCREMENT call\n               | DECREMENT call function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special  call : ID '(' expressions ')' ';'  expressions : expression\n                    | expression ',' expressions  assignment : ID '=' expression ';'\n                   | ID '[' expression ']' '=' expression ';'  condition : IF '(' expression ')' block elses ';'  cycle : WHILE '(' expression ')' block ';'  special : SPECIAL_ID '(' expressions ')' ';'  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | INT \n              | DEC  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,63,],[0,-1,-73,]),'ID':([2,6,7,8,9,10,11,12,21,23,24,25,26,28,30,42,48,49,54,56,57,58,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,102,118,128,132,142,147,],[3,19,-4,-46,-47,-48,-49,-50,37,41,-44,-45,-2,19,44,-3,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,125,44,44,-2,37,44,]),';':([3,17,18,19,27,29,43,44,46,47,48,49,50,51,52,53,55,59,60,61,62,63,65,71,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,93,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,123,126,128,129,130,136,137,138,146,150,153,154,],[4,26,-2,-8,-5,-7,-6,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-73,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,119,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,126,131,-56,-31,-2,141,144,145,-64,-65,152,-2,-66,]),'INT':([4,16,26,30,48,49,54,56,57,58,64,65,66,67,68,69,70,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,132,134,147,],[8,8,8,61,61,61,61,61,61,61,61,61,61,61,61,61,8,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,8,8,61,]),'DEC':([4,16,26,30,48,49,54,56,57,58,64,65,66,67,68,69,70,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,132,134,147,],[9,9,9,62,62,62,62,62,62,62,62,62,62,62,62,62,9,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,9,9,62,]),'CHAR':([4,16,26,70,132,134,],[10,10,10,10,10,10,]),'STR':([4,16,26,70,132,134,],[11,11,11,11,11,11,]),'BOOL':([4,16,26,70,132,134,],[12,12,12,12,12,12,]),'FUN':([4,5,7,14,26,42,152,],[-2,16,-4,16,-2,-3,-43,]),'{':([4,5,7,13,14,15,22,26,42,121,122,124,139,151,152,],[-2,-2,-4,21,-2,-42,-41,-2,-3,21,21,132,21,21,-43,]),'IF':([7,21,26,42,132,142,],[-4,38,-2,-3,-2,38,]),'WHILE':([7,21,26,42,132,142,],[-4,39,-2,-3,-2,39,]),'SPECIAL_ID':([7,21,26,42,132,142,],[-4,40,-2,-3,-2,40,]),'VOID':([16,],[25,]),',':([18,19,44,46,47,48,49,50,51,52,53,55,59,60,61,62,64,69,71,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,93,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,125,126,],[28,-8,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,118,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,134,-56,]),'[':([19,37,44,],[30,66,30,]),'+':([30,44,48,49,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,77,78,79,80,81,88,89,90,91,92,93,113,114,115,116,118,126,128,147,],[48,-8,-31,-31,82,-27,48,-33,-37,-70,-71,-72,48,48,48,48,48,48,-9,48,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,48,-56,48,48,]),'-':([30,44,48,49,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,77,78,79,80,81,88,89,90,91,92,93,113,114,115,116,118,126,128,147,],[49,-8,-31,-31,83,-27,49,-33,-37,-70,-71,-72,49,49,49,49,49,49,-9,49,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,49,-56,49,49,]),'<':([30,44,48,49,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,82,83,88,89,90,91,92,93,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,77,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'>':([30,44,48,49,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,82,83,88,89,90,91,92,93,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,78,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'LESS_EQUAL_THAN':([30,44,48,49,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,82,83,88,89,90,91,92,93,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,79,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'GREATER_EQUAL_THAN':([30,44,48,49,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,82,83,88,89,90,91,92,93,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,80,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'EQUALS':([30,44,48,49,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,75,76,82,83,88,89,90,91,92,93,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,81,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'OR':([30,44,48,49,50,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,77,78,79,80,81,82,83,88,89,90,91,92,93,106,107,108,109,110,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,75,-18,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'AND':([30,44,48,49,50,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,72,77,78,79,80,81,82,83,88,89,90,91,92,93,106,107,108,109,110,111,112,113,114,115,116,118,126,128,147,],[-31,-8,-31,-31,76,-18,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),'EXPONENTIATION':([30,44,46,47,48,49,50,51,52,53,54,55,59,60,61,62,64,65,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,93,104,105,106,107,108,109,110,111,112,113,114,115,116,118,126,128,147,],[-31,-8,72,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-31,-31,-9,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-56,-31,-31,]),']':([30,44,45,46,47,48,49,50,51,52,53,55,59,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,93,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,126,],[-31,-8,71,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-70,-71,-72,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,120,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-56,]),'(':([30,37,38,39,40,41,44,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,140,147,],[54,64,67,68,69,70,64,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,147,54,]),'NOT':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'INCREMENT':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DECREMENT':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'}':([31,32,33,34,35,36,119,126,131,141,144,145,148,],[63,-51,-52,-53,-54,-55,-59,-56,-63,-62,-60,-61,150,]),'=':([37,120,],[65,128,]),'*':([44,53,55,59,60,61,62,71,88,89,90,91,92,93,116,126,],[-8,84,-33,-37,-70,-71,-72,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),'/':([44,53,55,59,60,61,62,71,88,89,90,91,92,93,116,126,],[-8,85,-33,-37,-70,-71,-72,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),'MOD':([44,53,55,59,60,61,62,71,88,89,90,91,92,93,116,126,],[-8,86,-33,-37,-70,-71,-72,-9,-34,-38,-35,-39,-36,-40,-32,-56,]),')':([44,46,47,48,49,50,51,52,53,54,55,59,60,61,62,64,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,125,126,127,133,135,143,147,149,],[-8,-10,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-70,-71,-72,-31,-31,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,116,-34,-38,-35,-39,-36,-40,117,-57,121,122,123,124,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-2,-56,-58,-67,-69,-68,-31,151,]),'ELSE':([63,129,153,],[-73,139,139,]),'ELSEIF':([63,129,153,],[-73,140,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,26,132,],[5,42,142,]),'type':([4,16,26,70,132,134,],[6,24,6,102,6,102,]),'empty':([4,5,14,18,26,125,129,132,153,],[7,15,15,29,7,135,138,7,138,]),'function_declaration':([5,14,],[13,22,]),'function':([5,14,],[14,14,]),'ids':([6,28,],[17,43,]),'id':([6,28,30,48,49,54,56,57,58,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[18,18,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'block':([13,121,122,139,151,],[20,129,130,146,153,]),'return_type':([16,],[23,]),'other_ids':([18,],[27,]),'statutes':([21,142,],[31,148,]),'call':([21,30,48,49,54,56,57,58,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,142,147,],[32,59,59,59,59,89,91,93,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,32,59,]),'assignment':([21,142,],[33,33,]),'condition':([21,142,],[34,34,]),'cycle':([21,142,],[35,35,]),'special':([21,142,],[36,36,]),'expression':([30,54,64,65,66,67,68,69,118,128,147,],[45,87,95,96,97,98,99,95,95,136,149,]),'level1':([30,54,64,65,66,67,68,69,72,118,128,147,],[46,46,46,46,46,46,46,46,103,46,46,46,]),'level2':([30,48,49,54,64,65,66,67,68,69,72,118,128,147,],[47,73,74,47,47,47,47,47,47,47,47,47,47,47,]),'level3':([30,48,49,54,64,65,66,67,68,69,72,75,76,118,128,147,],[50,50,50,50,50,50,50,50,50,50,50,104,105,50,50,50,]),'level4':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,118,128,147,],[51,51,51,51,51,51,51,51,51,51,51,51,51,106,107,108,109,110,51,51,51,]),'level5':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,118,128,147,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,111,112,52,52,52,]),'level6':([30,48,49,54,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,113,114,115,53,53,53,]),'const':([30,48,49,54,56,57,58,64,65,66,67,68,69,72,75,76,77,78,79,80,81,82,83,84,85,86,118,128,147,],[55,55,55,55,88,90,92,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'expressions':([64,69,118,],[94,100,127,]),'parameters':([70,134,],[101,143,]),'other_parameters':([125,],[133,]),'elses':([129,153,],[137,154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> type ids ; variable_declaration','variable_declaration',4,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',23),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',28),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',29),
  ('id -> ID','id',1,'p_id','parser.py',34),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',35),
  ('expression -> level1','expression',1,'p_expression','parser.py',40),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',41),
  ('level1 -> level2','level1',1,'p_level1','parser.py',46),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',47),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',48),
  ('level2 -> level3','level2',1,'p_level2','parser.py',53),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',54),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',55),
  ('level3 -> level4','level3',1,'p_level3','parser.py',60),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',61),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',62),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',63),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',64),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',65),
  ('level4 -> level5','level4',1,'p_level4','parser.py',70),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',71),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',72),
  ('level5 -> level6','level5',1,'p_level5','parser.py',77),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',78),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',79),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',80),
  ('level5 -> <empty>','level5',0,'p_level5','parser.py',81),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',86),
  ('level6 -> const','level6',1,'p_level6','parser.py',87),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',88),
  ('level6 -> INCREMENT const','level6',2,'p_level6','parser.py',89),
  ('level6 -> DECREMENT const','level6',2,'p_level6','parser.py',90),
  ('level6 -> call','level6',1,'p_level6','parser.py',91),
  ('level6 -> NOT call','level6',2,'p_level6','parser.py',92),
  ('level6 -> INCREMENT call','level6',2,'p_level6','parser.py',93),
  ('level6 -> DECREMENT call','level6',2,'p_level6','parser.py',94),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',99),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',100),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',105),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',110),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',111),
  ('type -> INT','type',1,'p_type','parser.py',116),
  ('type -> DEC','type',1,'p_type','parser.py',117),
  ('type -> CHAR','type',1,'p_type','parser.py',118),
  ('type -> STR','type',1,'p_type','parser.py',119),
  ('type -> BOOL','type',1,'p_type','parser.py',120),
  ('statutes -> call','statutes',1,'p_statutes','parser.py',125),
  ('statutes -> assignment','statutes',1,'p_statutes','parser.py',126),
  ('statutes -> condition','statutes',1,'p_statutes','parser.py',127),
  ('statutes -> cycle','statutes',1,'p_statutes','parser.py',128),
  ('statutes -> special','statutes',1,'p_statutes','parser.py',129),
  ('call -> ID ( expressions ) ;','call',5,'p_call','parser.py',134),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',139),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',140),
  ('assignment -> ID = expression ;','assignment',4,'p_assignment','parser.py',145),
  ('assignment -> ID [ expression ] = expression ;','assignment',7,'p_assignment','parser.py',146),
  ('condition -> IF ( expression ) block elses ;','condition',7,'p_condition','parser.py',151),
  ('cycle -> WHILE ( expression ) block ;','cycle',6,'p_cycle','parser.py',156),
  ('special -> SPECIAL_ID ( expressions ) ;','special',5,'p_special','parser.py',161),
  ('elses -> empty','elses',1,'p_elses','parser.py',166),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',167),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',168),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',173),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',178),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',179),
  ('const -> id','const',1,'p_const','parser.py',183),
  ('const -> INT','const',1,'p_const','parser.py',184),
  ('const -> DEC','const',1,'p_const','parser.py',185),
  ('block -> { statutes }','block',3,'p_block','parser.py',190),
]
