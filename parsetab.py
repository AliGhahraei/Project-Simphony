
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID INT_VAL DEC_VAL CHAR_VAL STR_VAL BOOL_VAL EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : type ids ';' variable_declaration\n                             | empty  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5 level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6\n               |   level6 : '(' expression ')'\n               | const\n               | NOT const\n               | INCREMENT const\n               | DECREMENT const \n               | call\n               | NOT call\n               | INCREMENT call\n               | DECREMENT call function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : statute statutes\n                 | emptystatute   : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special  call : ID '(' expressions ')' ';'  expressions : expression\n                    | expression ',' expressions  assignment : ID '=' expression ';'\n                   | ID '[' expression ']' '=' expression ';'  condition : IF '(' expression ')' block elses ';'  cycle : WHILE '(' expression ')' block ';'  special : SPECIAL_ID '(' expressions ')' ';'  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | INT_VAL\n              | DEC_VAL\n              | CHAR_VAL\n              | STR_VAL\n              | BOOL_VAL  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,68,],[0,-1,-78,]),'ID':([2,6,7,8,9,10,11,12,21,23,24,25,26,28,30,32,34,35,36,37,38,44,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,108,124,125,132,134,137,138,147,148,150,151,153,],[3,19,-4,-46,-47,-48,-49,-50,39,43,-44,-45,-2,19,46,39,-53,-54,-55,-56,-57,-3,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,131,46,-61,-58,46,-65,-2,-64,39,-62,-63,46,]),';':([3,17,18,19,27,29,45,46,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,68,71,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,96,97,98,99,102,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,132,134,135,136,142,143,144,152,156,159,160,],[4,26,-2,-8,-5,-7,-6,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-72,-73,-74,-75,-76,-77,-78,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,125,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,132,137,-58,-31,-2,147,150,151,-66,-67,158,-2,-68,]),'INT':([4,16,26,76,138,140,],[8,8,8,8,8,8,]),'DEC':([4,16,26,76,138,140,],[9,9,9,9,9,9,]),'CHAR':([4,16,26,76,138,140,],[10,10,10,10,10,10,]),'STR':([4,16,26,76,138,140,],[11,11,11,11,11,11,]),'BOOL':([4,16,26,76,138,140,],[12,12,12,12,12,12,]),'FUN':([4,5,7,14,26,44,158,],[-2,16,-4,16,-2,-3,-43,]),'{':([4,5,7,13,14,15,22,26,44,127,128,130,145,157,158,],[-2,-2,-4,21,-2,-42,-41,-2,-3,21,21,138,21,21,-43,]),'IF':([7,21,26,32,34,35,36,37,38,44,125,132,137,138,147,148,150,151,],[-4,40,-2,40,-53,-54,-55,-56,-57,-3,-61,-58,-65,-2,-64,40,-62,-63,]),'WHILE':([7,21,26,32,34,35,36,37,38,44,125,132,137,138,147,148,150,151,],[-4,41,-2,41,-53,-54,-55,-56,-57,-3,-61,-58,-65,-2,-64,41,-62,-63,]),'SPECIAL_ID':([7,21,26,32,34,35,36,37,38,44,125,132,137,138,147,148,150,151,],[-4,42,-2,42,-53,-54,-55,-56,-57,-3,-61,-58,-65,-2,-64,42,-62,-63,]),'}':([7,21,26,31,32,33,34,35,36,37,38,44,69,125,132,137,138,147,148,150,151,154,],[-4,-2,-2,68,-2,-52,-53,-54,-55,-56,-57,-3,-51,-61,-58,-65,-2,-64,-2,-62,-63,156,]),'VOID':([16,],[25,]),',':([18,19,46,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,96,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,131,132,],[28,-8,-8,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,124,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,140,-58,]),'[':([19,39,46,],[30,72,30,]),'+':([30,46,50,51,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,83,84,85,86,87,94,95,96,97,98,99,119,120,121,122,124,132,134,153,],[50,-8,-31,-31,88,-27,50,-33,-37,-72,-73,-74,-75,-76,-77,50,50,50,50,50,50,-9,50,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,50,-58,50,50,]),'-':([30,46,50,51,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,83,84,85,86,87,94,95,96,97,98,99,119,120,121,122,124,132,134,153,],[51,-8,-31,-31,89,-27,51,-33,-37,-72,-73,-74,-75,-76,-77,51,51,51,51,51,51,-9,51,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-28,-29,-30,-32,51,-58,51,51,]),'<':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,88,89,94,95,96,97,98,99,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,83,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'>':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,88,89,94,95,96,97,98,99,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,84,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'LESS_EQUAL_THAN':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,88,89,94,95,96,97,98,99,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,85,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'GREATER_EQUAL_THAN':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,88,89,94,95,96,97,98,99,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,86,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'EQUALS':([30,46,50,51,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,81,82,88,89,94,95,96,97,98,99,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,87,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'OR':([30,46,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,83,84,85,86,87,88,89,94,95,96,97,98,99,112,113,114,115,116,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,81,-18,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'AND':([30,46,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,83,84,85,86,87,88,89,94,95,96,97,98,99,112,113,114,115,116,117,118,119,120,121,122,124,132,134,153,],[-31,-8,-31,-31,82,-18,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),'EXPONENTIATION':([30,46,48,49,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,77,79,80,81,82,83,84,85,86,87,88,89,94,95,96,97,98,99,110,111,112,113,114,115,116,117,118,119,120,121,122,124,132,134,153,],[-31,-8,78,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-31,-31,-9,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-58,-31,-31,]),']':([30,46,47,48,49,50,51,52,53,54,55,57,61,62,63,64,65,66,67,72,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,96,97,98,99,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,],[-31,-8,77,-10,-12,-31,-31,-15,-18,-24,-27,-33,-37,-72,-73,-74,-75,-76,-77,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,-34,-38,-35,-39,-36,-40,126,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-58,]),'(':([30,39,40,41,42,43,46,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,146,153,],[56,70,73,74,75,76,70,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,153,56,]),'NOT':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INCREMENT':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECREMENT':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'INT_VAL':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'DEC_VAL':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CHAR_VAL':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'STR_VAL':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'BOOL_VAL':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'=':([39,126,],[71,134,]),'*':([46,55,57,61,62,63,64,65,66,67,77,94,95,96,97,98,99,122,132,],[-8,90,-33,-37,-72,-73,-74,-75,-76,-77,-9,-34,-38,-35,-39,-36,-40,-32,-58,]),'/':([46,55,57,61,62,63,64,65,66,67,77,94,95,96,97,98,99,122,132,],[-8,91,-33,-37,-72,-73,-74,-75,-76,-77,-9,-34,-38,-35,-39,-36,-40,-32,-58,]),'MOD':([46,55,57,61,62,63,64,65,66,67,77,94,95,96,97,98,99,122,132,],[-8,92,-33,-37,-72,-73,-74,-75,-76,-77,-9,-34,-38,-35,-39,-36,-40,-32,-58,]),')':([46,48,49,50,51,52,53,54,55,56,57,61,62,63,64,65,66,67,70,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,93,94,95,96,97,98,99,100,101,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,131,132,133,139,141,149,153,155,],[-8,-10,-12,-31,-31,-15,-18,-24,-27,-31,-33,-37,-72,-73,-74,-75,-76,-77,-31,-31,-31,-31,-9,-31,-13,-14,-31,-31,-31,-31,-31,-31,-31,-31,-31,122,-34,-38,-35,-39,-36,-40,123,-59,127,128,129,130,-11,-16,-17,-19,-20,-21,-22,-23,-25,-26,-28,-29,-30,-32,-31,-2,-58,-60,-69,-71,-70,-31,157,]),'ELSE':([68,135,159,],[-78,145,145,]),'ELSEIF':([68,135,159,],[-78,146,146,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,26,138,],[5,44,148,]),'type':([4,16,26,76,138,140,],[6,24,6,108,6,108,]),'empty':([4,5,14,18,21,26,32,131,135,138,148,159,],[7,15,15,29,33,7,33,141,144,7,33,144,]),'function_declaration':([5,14,],[13,22,]),'function':([5,14,],[14,14,]),'ids':([6,28,],[17,45,]),'id':([6,28,30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[18,18,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'block':([13,127,128,145,157,],[20,135,136,152,159,]),'return_type':([16,],[23,]),'other_ids':([18,],[27,]),'statutes':([21,32,148,],[31,69,154,]),'statute':([21,32,148,],[32,32,32,]),'call':([21,30,32,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,148,153,],[34,61,34,61,61,61,95,97,99,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,34,61,]),'assignment':([21,32,148,],[35,35,35,]),'condition':([21,32,148,],[36,36,36,]),'cycle':([21,32,148,],[37,37,37,]),'special':([21,32,148,],[38,38,38,]),'expression':([30,56,70,71,72,73,74,75,124,134,153,],[47,93,101,102,103,104,105,101,101,142,155,]),'level1':([30,56,70,71,72,73,74,75,78,124,134,153,],[48,48,48,48,48,48,48,48,109,48,48,48,]),'level2':([30,50,51,56,70,71,72,73,74,75,78,124,134,153,],[49,79,80,49,49,49,49,49,49,49,49,49,49,49,]),'level3':([30,50,51,56,70,71,72,73,74,75,78,81,82,124,134,153,],[52,52,52,52,52,52,52,52,52,52,52,110,111,52,52,52,]),'level4':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,124,134,153,],[53,53,53,53,53,53,53,53,53,53,53,53,53,112,113,114,115,116,53,53,53,]),'level5':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,124,134,153,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,117,118,54,54,54,]),'level6':([30,50,51,56,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,119,120,121,55,55,55,]),'const':([30,50,51,56,58,59,60,70,71,72,73,74,75,78,81,82,83,84,85,86,87,88,89,90,91,92,124,134,153,],[57,57,57,57,94,96,98,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'expressions':([70,75,124,],[100,106,133,]),'parameters':([76,140,],[107,149,]),'other_parameters':([131,],[139,]),'elses':([135,159,],[143,160,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> type ids ; variable_declaration','variable_declaration',4,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',23),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',28),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',29),
  ('id -> ID','id',1,'p_id','parser.py',34),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',35),
  ('expression -> level1','expression',1,'p_expression','parser.py',40),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',41),
  ('level1 -> level2','level1',1,'p_level1','parser.py',46),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',47),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',48),
  ('level2 -> level3','level2',1,'p_level2','parser.py',53),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',54),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',55),
  ('level3 -> level4','level3',1,'p_level3','parser.py',60),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',61),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',62),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',63),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',64),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',65),
  ('level4 -> level5','level4',1,'p_level4','parser.py',70),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',71),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',72),
  ('level5 -> level6','level5',1,'p_level5','parser.py',77),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',78),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',79),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',80),
  ('level5 -> <empty>','level5',0,'p_level5','parser.py',81),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',86),
  ('level6 -> const','level6',1,'p_level6','parser.py',87),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',88),
  ('level6 -> INCREMENT const','level6',2,'p_level6','parser.py',89),
  ('level6 -> DECREMENT const','level6',2,'p_level6','parser.py',90),
  ('level6 -> call','level6',1,'p_level6','parser.py',91),
  ('level6 -> NOT call','level6',2,'p_level6','parser.py',92),
  ('level6 -> INCREMENT call','level6',2,'p_level6','parser.py',93),
  ('level6 -> DECREMENT call','level6',2,'p_level6','parser.py',94),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',99),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',100),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',105),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',110),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',111),
  ('type -> INT','type',1,'p_type','parser.py',116),
  ('type -> DEC','type',1,'p_type','parser.py',117),
  ('type -> CHAR','type',1,'p_type','parser.py',118),
  ('type -> STR','type',1,'p_type','parser.py',119),
  ('type -> BOOL','type',1,'p_type','parser.py',120),
  ('statutes -> statute statutes','statutes',2,'p_statutes','parser.py',125),
  ('statutes -> empty','statutes',1,'p_statutes','parser.py',126),
  ('statute -> call','statute',1,'p_statute','parser.py',130),
  ('statute -> assignment','statute',1,'p_statute','parser.py',131),
  ('statute -> condition','statute',1,'p_statute','parser.py',132),
  ('statute -> cycle','statute',1,'p_statute','parser.py',133),
  ('statute -> special','statute',1,'p_statute','parser.py',134),
  ('call -> ID ( expressions ) ;','call',5,'p_call','parser.py',139),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',144),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',145),
  ('assignment -> ID = expression ;','assignment',4,'p_assignment','parser.py',150),
  ('assignment -> ID [ expression ] = expression ;','assignment',7,'p_assignment','parser.py',151),
  ('condition -> IF ( expression ) block elses ;','condition',7,'p_condition','parser.py',156),
  ('cycle -> WHILE ( expression ) block ;','cycle',6,'p_cycle','parser.py',161),
  ('special -> SPECIAL_ID ( expressions ) ;','special',5,'p_special','parser.py',166),
  ('elses -> empty','elses',1,'p_elses','parser.py',171),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',172),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',173),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',178),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',183),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',184),
  ('const -> id','const',1,'p_const','parser.py',188),
  ('const -> INT_VAL','const',1,'p_const','parser.py',189),
  ('const -> DEC_VAL','const',1,'p_const','parser.py',190),
  ('const -> CHAR_VAL','const',1,'p_const','parser.py',191),
  ('const -> STR_VAL','const',1,'p_const','parser.py',192),
  ('const -> BOOL_VAL','const',1,'p_const','parser.py',193),
  ('block -> { statutes }','block',3,'p_block','parser.py',198),
]
