
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT DEC CHAR STR BOOL VOID EXPONENTIATION INCREMENT DECREMENT EQUALS GREATER_EQUAL_THAN LESS_EQUAL_THAN AND OR NOT FUN WHILE IF ELSE ELSEIF ID SPECIAL_ID MOD PROGRAM program : PROGRAM ID ';' variable_declaration function_declaration block  empty :  variable_declaration : variables variable_declaration \n                             | empty  variables : type ids ';'  ids : id other_ids  other_ids : ',' ids \n                  | empty  id : ID \n           | ID '[' expression ']'  expression : level1 \n                   | level1 EXPONENTIATION level1   level1 : level2 \n               | '+' level2\n               | '-' level2 level2 : level3 \n               | level3 OR level3 \n               | level3 AND level3  level3 : level4\n               | level4 '<' level4\n               | level4 '>' level4\n               | level4 LESS_EQUAL_THAN level4\n               | level4 GREATER_EQUAL_THAN level4\n               | level4 EQUALS level4  level4 : level5\n               | level5 '+' level5\n               | level5 '-' level5 level5 : level6\n               | level6 '*' level6\n               | level6 '/' level6\n               | level6 MOD level6\n               |   level6 : '(' expression ')'\n               | const\n               | NOT const\n               | INCREMENT const\n               | DECREMENT const \n               | call\n               | NOT call\n               | INCREMENT call\n               | DECREMENT call function_declaration : function function_declaration\n                             | emptyfunction : FUN return_type ID '(' parameters ')' '{' variable_declaration statutes '}' ';'  return_type : type \n                    | VOID  type : INT \n             | DEC \n             | CHAR \n             | STR \n             | BOOL  statutes : call\n                 | assignment\n                 | condition\n                 | cycle \n                 | special  call : ID '(' expressions ')' ';'  expressions : expression\n                    | expression ',' expressions  assignment : ID '=' expression ';'\n                   | ID '[' expression ']' '=' expression ';'  condition : IF '(' expression ')' block elses ';'  cycle : WHILE '(' expression ')' block ';'  special : SPECIAL_ID '(' expressions ')' ';'  elses : empty\n              | ELSE block\n              | ELSEIF '(' expression ')' block elses  parameters : type ID other_parameters other_parameters : ',' parameters \n                         | empty  const : id \n              | INT \n              | DEC  block : '{' statutes '}' "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,22,64,],[0,-1,-74,]),'ID':([2,6,7,8,9,10,11,12,13,18,23,25,26,27,28,30,32,49,50,55,57,58,59,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,103,119,129,133,143,148,],[3,-2,-4,21,-47,-48,-49,-50,-51,-3,39,43,-45,-46,-5,21,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,126,45,45,-2,39,45,]),';':([3,19,20,21,29,31,44,45,47,48,49,50,51,52,53,54,56,60,61,62,63,64,66,72,73,74,75,76,77,78,79,80,81,82,83,84,89,90,91,92,93,94,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,127,129,130,131,137,138,139,147,151,154,155,],[4,28,-2,-9,-6,-8,-7,-9,-11,-13,-32,-32,-16,-19,-25,-28,-34,-38,-71,-72,-73,-74,-32,-10,-32,-14,-15,-32,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,120,-12,-17,-18,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,127,132,-57,-32,-2,142,145,146,-65,-66,153,-2,-67,]),'FUN':([4,5,6,7,15,18,28,153,],[-2,17,-2,-4,17,-3,-5,-44,]),'{':([4,5,6,7,14,15,16,18,24,28,122,123,125,140,152,153,],[-2,-2,-2,-4,23,-2,-43,-3,-42,-5,23,23,133,23,23,-44,]),'INT':([4,6,17,28,32,49,50,55,57,58,59,65,66,67,68,69,70,71,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,133,135,148,],[9,9,9,-5,62,62,62,62,62,62,62,62,62,62,62,62,62,9,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,9,9,62,]),'DEC':([4,6,17,28,32,49,50,55,57,58,59,65,66,67,68,69,70,71,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,133,135,148,],[10,10,10,-5,63,63,63,63,63,63,63,63,63,63,63,63,63,10,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,10,10,63,]),'CHAR':([4,6,17,28,71,133,135,],[11,11,11,-5,11,11,11,]),'STR':([4,6,17,28,71,133,135,],[12,12,12,-5,12,12,12,]),'BOOL':([4,6,17,28,71,133,135,],[13,13,13,-5,13,13,13,]),'IF':([6,7,18,23,28,133,143,],[-2,-4,-3,40,-5,-2,40,]),'WHILE':([6,7,18,23,28,133,143,],[-2,-4,-3,41,-5,-2,41,]),'SPECIAL_ID':([6,7,18,23,28,133,143,],[-2,-4,-3,42,-5,-2,42,]),'VOID':([17,],[27,]),',':([20,21,45,47,48,49,50,51,52,53,54,56,60,61,62,63,65,70,72,73,74,75,76,77,78,79,80,81,82,83,84,89,90,91,92,93,94,96,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,126,127,],[30,-9,-9,-11,-13,-32,-32,-16,-19,-25,-28,-34,-38,-71,-72,-73,-32,-32,-10,-32,-14,-15,-32,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,119,-12,-17,-18,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-32,135,-57,]),'[':([21,39,45,],[32,67,32,]),'+':([32,45,49,50,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,78,79,80,81,82,89,90,91,92,93,94,114,115,116,117,119,127,129,148,],[49,-9,-32,-32,83,-28,49,-34,-38,-71,-72,-73,49,49,49,49,49,49,-10,49,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-29,-30,-31,-33,49,-57,49,49,]),'-':([32,45,49,50,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,78,79,80,81,82,89,90,91,92,93,94,114,115,116,117,119,127,129,148,],[50,-9,-32,-32,84,-28,50,-34,-38,-71,-72,-73,50,50,50,50,50,50,-10,50,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-29,-30,-31,-33,50,-57,50,50,]),'<':([32,45,49,50,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,83,84,89,90,91,92,93,94,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,78,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'>':([32,45,49,50,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,83,84,89,90,91,92,93,94,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,79,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'LESS_EQUAL_THAN':([32,45,49,50,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,83,84,89,90,91,92,93,94,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,80,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'GREATER_EQUAL_THAN':([32,45,49,50,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,83,84,89,90,91,92,93,94,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,81,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'EQUALS':([32,45,49,50,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,76,77,83,84,89,90,91,92,93,94,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,82,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'OR':([32,45,49,50,51,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,78,79,80,81,82,83,84,89,90,91,92,93,94,107,108,109,110,111,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,76,-19,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'AND':([32,45,49,50,51,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,73,78,79,80,81,82,83,84,89,90,91,92,93,94,107,108,109,110,111,112,113,114,115,116,117,119,127,129,148,],[-32,-9,-32,-32,77,-19,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),'EXPONENTIATION':([32,45,47,48,49,50,51,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,82,83,84,89,90,91,92,93,94,105,106,107,108,109,110,111,112,113,114,115,116,117,119,127,129,148,],[-32,-9,73,-13,-32,-32,-16,-19,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-32,-32,-10,-14,-15,-32,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,-17,-18,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-32,-57,-32,-32,]),']':([32,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,89,90,91,92,93,94,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,127,],[-32,-9,72,-11,-13,-32,-32,-16,-19,-25,-28,-34,-38,-71,-72,-73,-32,-10,-32,-14,-15,-32,-32,-32,-32,-32,-32,-32,-32,-32,-35,-39,-36,-40,-37,-41,121,-12,-17,-18,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-57,]),'(':([32,39,40,41,42,43,45,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,141,148,],[55,65,68,69,70,71,65,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,148,55,]),'NOT':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'INCREMENT':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DECREMENT':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'}':([33,34,35,36,37,38,120,127,132,142,145,146,149,],[64,-52,-53,-54,-55,-56,-60,-57,-64,-63,-61,-62,151,]),'=':([39,121,],[66,129,]),'*':([45,54,56,60,61,62,63,72,89,90,91,92,93,94,117,127,],[-9,85,-34,-38,-71,-72,-73,-10,-35,-39,-36,-40,-37,-41,-33,-57,]),'/':([45,54,56,60,61,62,63,72,89,90,91,92,93,94,117,127,],[-9,86,-34,-38,-71,-72,-73,-10,-35,-39,-36,-40,-37,-41,-33,-57,]),'MOD':([45,54,56,60,61,62,63,72,89,90,91,92,93,94,117,127,],[-9,87,-34,-38,-71,-72,-73,-10,-35,-39,-36,-40,-37,-41,-33,-57,]),')':([45,47,48,49,50,51,52,53,54,55,56,60,61,62,63,65,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,93,94,95,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,126,127,128,134,136,144,148,150,],[-9,-11,-13,-32,-32,-16,-19,-25,-28,-32,-34,-38,-71,-72,-73,-32,-32,-32,-32,-10,-32,-14,-15,-32,-32,-32,-32,-32,-32,-32,-32,-32,117,-35,-39,-36,-40,-37,-41,118,-58,122,123,124,125,-12,-17,-18,-20,-21,-22,-23,-24,-26,-27,-29,-30,-31,-33,-32,-2,-57,-59,-68,-70,-69,-32,152,]),'ELSE':([64,130,154,],[-74,140,140,]),'ELSEIF':([64,130,154,],[-74,141,141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variable_declaration':([4,6,133,],[5,18,143,]),'variables':([4,6,133,],[6,6,6,]),'empty':([4,5,6,15,20,126,130,133,154,],[7,16,7,16,31,136,139,7,139,]),'type':([4,6,17,71,133,135,],[8,8,26,103,8,103,]),'function_declaration':([5,15,],[14,24,]),'function':([5,15,],[15,15,]),'ids':([8,30,],[19,44,]),'id':([8,30,32,49,50,55,57,58,59,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[20,20,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'block':([14,122,123,140,152,],[22,130,131,147,154,]),'return_type':([17,],[25,]),'other_ids':([20,],[29,]),'statutes':([23,143,],[33,149,]),'call':([23,32,49,50,55,57,58,59,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,143,148,],[34,60,60,60,60,90,92,94,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,34,60,]),'assignment':([23,143,],[35,35,]),'condition':([23,143,],[36,36,]),'cycle':([23,143,],[37,37,]),'special':([23,143,],[38,38,]),'expression':([32,55,65,66,67,68,69,70,119,129,148,],[46,88,96,97,98,99,100,96,96,137,150,]),'level1':([32,55,65,66,67,68,69,70,73,119,129,148,],[47,47,47,47,47,47,47,47,104,47,47,47,]),'level2':([32,49,50,55,65,66,67,68,69,70,73,119,129,148,],[48,74,75,48,48,48,48,48,48,48,48,48,48,48,]),'level3':([32,49,50,55,65,66,67,68,69,70,73,76,77,119,129,148,],[51,51,51,51,51,51,51,51,51,51,51,105,106,51,51,51,]),'level4':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,119,129,148,],[52,52,52,52,52,52,52,52,52,52,52,52,52,107,108,109,110,111,52,52,52,]),'level5':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,119,129,148,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,112,113,53,53,53,]),'level6':([32,49,50,55,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,114,115,116,54,54,54,]),'const':([32,49,50,55,57,58,59,65,66,67,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,119,129,148,],[56,56,56,56,89,91,93,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'expressions':([65,70,119,],[95,101,128,]),'parameters':([71,135,],[102,144,]),'other_parameters':([126,],[134,]),'elses':([130,154,],[138,155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; variable_declaration function_declaration block','program',6,'p_program','parser.py',7),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',12),
  ('variable_declaration -> variables variable_declaration','variable_declaration',2,'p_variable_declaration','parser.py',17),
  ('variable_declaration -> empty','variable_declaration',1,'p_variable_declaration','parser.py',18),
  ('variables -> type ids ;','variables',3,'p_variables','parser.py',23),
  ('ids -> id other_ids','ids',2,'p_ids','parser.py',28),
  ('other_ids -> , ids','other_ids',2,'p_other_ids','parser.py',33),
  ('other_ids -> empty','other_ids',1,'p_other_ids','parser.py',34),
  ('id -> ID','id',1,'p_id','parser.py',39),
  ('id -> ID [ expression ]','id',4,'p_id','parser.py',40),
  ('expression -> level1','expression',1,'p_expression','parser.py',45),
  ('expression -> level1 EXPONENTIATION level1','expression',3,'p_expression','parser.py',46),
  ('level1 -> level2','level1',1,'p_level1','parser.py',51),
  ('level1 -> + level2','level1',2,'p_level1','parser.py',52),
  ('level1 -> - level2','level1',2,'p_level1','parser.py',53),
  ('level2 -> level3','level2',1,'p_level2','parser.py',58),
  ('level2 -> level3 OR level3','level2',3,'p_level2','parser.py',59),
  ('level2 -> level3 AND level3','level2',3,'p_level2','parser.py',60),
  ('level3 -> level4','level3',1,'p_level3','parser.py',65),
  ('level3 -> level4 < level4','level3',3,'p_level3','parser.py',66),
  ('level3 -> level4 > level4','level3',3,'p_level3','parser.py',67),
  ('level3 -> level4 LESS_EQUAL_THAN level4','level3',3,'p_level3','parser.py',68),
  ('level3 -> level4 GREATER_EQUAL_THAN level4','level3',3,'p_level3','parser.py',69),
  ('level3 -> level4 EQUALS level4','level3',3,'p_level3','parser.py',70),
  ('level4 -> level5','level4',1,'p_level4','parser.py',75),
  ('level4 -> level5 + level5','level4',3,'p_level4','parser.py',76),
  ('level4 -> level5 - level5','level4',3,'p_level4','parser.py',77),
  ('level5 -> level6','level5',1,'p_level5','parser.py',82),
  ('level5 -> level6 * level6','level5',3,'p_level5','parser.py',83),
  ('level5 -> level6 / level6','level5',3,'p_level5','parser.py',84),
  ('level5 -> level6 MOD level6','level5',3,'p_level5','parser.py',85),
  ('level5 -> <empty>','level5',0,'p_level5','parser.py',86),
  ('level6 -> ( expression )','level6',3,'p_level6','parser.py',91),
  ('level6 -> const','level6',1,'p_level6','parser.py',92),
  ('level6 -> NOT const','level6',2,'p_level6','parser.py',93),
  ('level6 -> INCREMENT const','level6',2,'p_level6','parser.py',94),
  ('level6 -> DECREMENT const','level6',2,'p_level6','parser.py',95),
  ('level6 -> call','level6',1,'p_level6','parser.py',96),
  ('level6 -> NOT call','level6',2,'p_level6','parser.py',97),
  ('level6 -> INCREMENT call','level6',2,'p_level6','parser.py',98),
  ('level6 -> DECREMENT call','level6',2,'p_level6','parser.py',99),
  ('function_declaration -> function function_declaration','function_declaration',2,'p_function_declaration','parser.py',104),
  ('function_declaration -> empty','function_declaration',1,'p_function_declaration','parser.py',105),
  ('function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;','function',11,'p_function','parser.py',110),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',115),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',116),
  ('type -> INT','type',1,'p_type','parser.py',121),
  ('type -> DEC','type',1,'p_type','parser.py',122),
  ('type -> CHAR','type',1,'p_type','parser.py',123),
  ('type -> STR','type',1,'p_type','parser.py',124),
  ('type -> BOOL','type',1,'p_type','parser.py',125),
  ('statutes -> call','statutes',1,'p_statutes','parser.py',130),
  ('statutes -> assignment','statutes',1,'p_statutes','parser.py',131),
  ('statutes -> condition','statutes',1,'p_statutes','parser.py',132),
  ('statutes -> cycle','statutes',1,'p_statutes','parser.py',133),
  ('statutes -> special','statutes',1,'p_statutes','parser.py',134),
  ('call -> ID ( expressions ) ;','call',5,'p_call','parser.py',139),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',144),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',145),
  ('assignment -> ID = expression ;','assignment',4,'p_assignment','parser.py',150),
  ('assignment -> ID [ expression ] = expression ;','assignment',7,'p_assignment','parser.py',151),
  ('condition -> IF ( expression ) block elses ;','condition',7,'p_condition','parser.py',156),
  ('cycle -> WHILE ( expression ) block ;','cycle',6,'p_cycle','parser.py',161),
  ('special -> SPECIAL_ID ( expressions ) ;','special',5,'p_special','parser.py',166),
  ('elses -> empty','elses',1,'p_elses','parser.py',171),
  ('elses -> ELSE block','elses',2,'p_elses','parser.py',172),
  ('elses -> ELSEIF ( expression ) block elses','elses',6,'p_elses','parser.py',173),
  ('parameters -> type ID other_parameters','parameters',3,'p_parameters','parser.py',178),
  ('other_parameters -> , parameters','other_parameters',2,'p_other_parameters','parser.py',183),
  ('other_parameters -> empty','other_parameters',1,'p_other_parameters','parser.py',184),
  ('const -> id','const',1,'p_const','parser.py',188),
  ('const -> INT','const',1,'p_const','parser.py',189),
  ('const -> DEC','const',1,'p_const','parser.py',190),
  ('block -> { statutes }','block',3,'p_block','parser.py',195),
]
