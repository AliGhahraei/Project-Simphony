Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; variable_declaration function_declaration block
Rule 2     empty -> <empty>
Rule 3     variable_declaration -> variables variable_declaration
Rule 4     variable_declaration -> empty
Rule 5     variables -> type ids ;
Rule 6     ids -> id other_ids
Rule 7     other_ids -> , ids
Rule 8     other_ids -> empty
Rule 9     id -> ID
Rule 10    id -> ID [ expression ]
Rule 11    expression -> level1
Rule 12    expression -> level1 EXPONENTIATION level1
Rule 13    level1 -> level2
Rule 14    level1 -> + level2
Rule 15    level1 -> - level2
Rule 16    level2 -> level3
Rule 17    level2 -> level3 OR level3
Rule 18    level2 -> level3 AND level3
Rule 19    level3 -> level4
Rule 20    level3 -> level4 < level4
Rule 21    level3 -> level4 > level4
Rule 22    level3 -> level4 LESS_EQUAL_THAN level4
Rule 23    level3 -> level4 GREATER_EQUAL_THAN level4
Rule 24    level3 -> level4 EQUALS level4
Rule 25    level4 -> level5
Rule 26    level4 -> level5 + level5
Rule 27    level4 -> level5 - level5
Rule 28    level5 -> level6
Rule 29    level5 -> level6 * level6
Rule 30    level5 -> level6 / level6
Rule 31    level5 -> level6 MOD level6
Rule 32    level5 -> <empty>
Rule 33    level6 -> ( expression )
Rule 34    level6 -> const
Rule 35    level6 -> NOT const
Rule 36    level6 -> INCREMENT const
Rule 37    level6 -> DECREMENT const
Rule 38    level6 -> call
Rule 39    level6 -> NOT call
Rule 40    level6 -> INCREMENT call
Rule 41    level6 -> DECREMENT call
Rule 42    function_declaration -> function function_declaration
Rule 43    function_declaration -> empty
Rule 44    function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;
Rule 45    return_type -> type
Rule 46    return_type -> VOID
Rule 47    type -> INT
Rule 48    type -> DEC
Rule 49    type -> CHAR
Rule 50    type -> STR
Rule 51    type -> BOOL
Rule 52    statutes -> call
Rule 53    statutes -> assignment
Rule 54    statutes -> condition
Rule 55    statutes -> cycle
Rule 56    statutes -> special
Rule 57    call -> ID ( expressions ) ;
Rule 58    expressions -> expression
Rule 59    expressions -> expression , expressions
Rule 60    assignment -> ID = expression ;
Rule 61    assignment -> ID [ expression ] = expression ;
Rule 62    condition -> IF ( expression ) block elses ;
Rule 63    cycle -> WHILE ( expression ) block ;
Rule 64    special -> SPECIAL_ID ( expressions ) ;
Rule 65    elses -> empty
Rule 66    elses -> ELSE block
Rule 67    elses -> ELSEIF ( expression ) block elses
Rule 68    parameters -> type ID other_parameters
Rule 69    other_parameters -> , parameters
Rule 70    other_parameters -> empty
Rule 71    const -> id
Rule 72    const -> INT
Rule 73    const -> DEC
Rule 74    block -> { statutes }

Terminals, with rules where they appear

(                    : 33 44 57 62 63 64 67
)                    : 33 44 57 62 63 64 67
*                    : 29
+                    : 14 26
,                    : 7 59 69
-                    : 15 27
/                    : 30
;                    : 1 5 44 57 60 61 62 63 64
<                    : 20
=                    : 60 61
>                    : 21
AND                  : 18
BOOL                 : 51
CHAR                 : 49
DEC                  : 48 73
DECREMENT            : 37 41
ELSE                 : 66
ELSEIF               : 67
EQUALS               : 24
EXPONENTIATION       : 12
FUN                  : 44
GREATER_EQUAL_THAN   : 23
ID                   : 1 9 10 44 57 60 61 68
IF                   : 62
INCREMENT            : 36 40
INT                  : 47 72
LESS_EQUAL_THAN      : 22
MOD                  : 31
NOT                  : 35 39
OR                   : 17
PROGRAM              : 1
SPECIAL_ID           : 64
STR                  : 50
VOID                 : 46
WHILE                : 63
[                    : 10 61
]                    : 10 61
error                : 
{                    : 44 74
}                    : 44 74

Nonterminals, with rules where they appear

assignment           : 53
block                : 1 62 63 66 67
call                 : 38 39 40 41 52
condition            : 54
const                : 34 35 36 37
cycle                : 55
elses                : 62 67
empty                : 4 8 43 65 70
expression           : 10 33 58 59 60 61 61 62 63 67
expressions          : 57 59 64
function             : 42
function_declaration : 1 42
id                   : 6 71
ids                  : 5 7
level1               : 11 12 12
level2               : 13 14 15
level3               : 16 17 17 18 18
level4               : 19 20 20 21 21 22 22 23 23 24 24
level5               : 25 26 26 27 27
level6               : 28 29 29 30 30 31 31
other_ids            : 6
other_parameters     : 68
parameters           : 44 69
program              : 0
return_type          : 44
special              : 56
statutes             : 44 74
type                 : 5 45 68
variable_declaration : 1 3 44
variables            : 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; variable_declaration function_declaration block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; variable_declaration function_declaration block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; variable_declaration function_declaration block

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . variable_declaration function_declaration block
    (3) variable_declaration -> . variables variable_declaration
    (4) variable_declaration -> . empty
    (5) variables -> . type ids ;
    (2) empty -> .
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    variable_declaration           shift and go to state 5
    variables                      shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 5

    (1) program -> PROGRAM ID ; variable_declaration . function_declaration block
    (42) function_declaration -> . function function_declaration
    (43) function_declaration -> . empty
    (44) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 17
    {               reduce using rule 2 (empty -> .)

    function_declaration           shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 6

    (3) variable_declaration -> variables . variable_declaration
    (3) variable_declaration -> . variables variable_declaration
    (4) variable_declaration -> . empty
    (5) variables -> . type ids ;
    (2) empty -> .
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    variables                      shift and go to state 6
    variable_declaration           shift and go to state 18
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 7

    (4) variable_declaration -> empty .

    FUN             reduce using rule 4 (variable_declaration -> empty .)
    {               reduce using rule 4 (variable_declaration -> empty .)
    ID              reduce using rule 4 (variable_declaration -> empty .)
    IF              reduce using rule 4 (variable_declaration -> empty .)
    WHILE           reduce using rule 4 (variable_declaration -> empty .)
    SPECIAL_ID      reduce using rule 4 (variable_declaration -> empty .)


state 8

    (5) variables -> type . ids ;
    (6) ids -> . id other_ids
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    ID              shift and go to state 21

    ids                            shift and go to state 19
    id                             shift and go to state 20

state 9

    (47) type -> INT .

    ID              reduce using rule 47 (type -> INT .)


state 10

    (48) type -> DEC .

    ID              reduce using rule 48 (type -> DEC .)


state 11

    (49) type -> CHAR .

    ID              reduce using rule 49 (type -> CHAR .)


state 12

    (50) type -> STR .

    ID              reduce using rule 50 (type -> STR .)


state 13

    (51) type -> BOOL .

    ID              reduce using rule 51 (type -> BOOL .)


state 14

    (1) program -> PROGRAM ID ; variable_declaration function_declaration . block
    (74) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 22

state 15

    (42) function_declaration -> function . function_declaration
    (42) function_declaration -> . function function_declaration
    (43) function_declaration -> . empty
    (44) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 17
    {               reduce using rule 2 (empty -> .)

    function                       shift and go to state 15
    function_declaration           shift and go to state 24
    empty                          shift and go to state 16

state 16

    (43) function_declaration -> empty .

    {               reduce using rule 43 (function_declaration -> empty .)


state 17

    (44) function -> FUN . return_type ID ( parameters ) { variable_declaration statutes } ;
    (45) return_type -> . type
    (46) return_type -> . VOID
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    VOID            shift and go to state 27
    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    return_type                    shift and go to state 25
    type                           shift and go to state 26

state 18

    (3) variable_declaration -> variables variable_declaration .

    FUN             reduce using rule 3 (variable_declaration -> variables variable_declaration .)
    {               reduce using rule 3 (variable_declaration -> variables variable_declaration .)
    ID              reduce using rule 3 (variable_declaration -> variables variable_declaration .)
    IF              reduce using rule 3 (variable_declaration -> variables variable_declaration .)
    WHILE           reduce using rule 3 (variable_declaration -> variables variable_declaration .)
    SPECIAL_ID      reduce using rule 3 (variable_declaration -> variables variable_declaration .)


state 19

    (5) variables -> type ids . ;

    ;               shift and go to state 28


state 20

    (6) ids -> id . other_ids
    (7) other_ids -> . , ids
    (8) other_ids -> . empty
    (2) empty -> .

    ,               shift and go to state 30
    ;               reduce using rule 2 (empty -> .)

    other_ids                      shift and go to state 29
    empty                          shift and go to state 31

state 21

    (9) id -> ID .
    (10) id -> ID . [ expression ]

    ,               reduce using rule 9 (id -> ID .)
    ;               reduce using rule 9 (id -> ID .)
    [               shift and go to state 32


state 22

    (1) program -> PROGRAM ID ; variable_declaration function_declaration block .

    $end            reduce using rule 1 (program -> PROGRAM ID ; variable_declaration function_declaration block .)


state 23

    (74) block -> { . statutes }
    (52) statutes -> . call
    (53) statutes -> . assignment
    (54) statutes -> . condition
    (55) statutes -> . cycle
    (56) statutes -> . special
    (57) call -> . ID ( expressions ) ;
    (60) assignment -> . ID = expression ;
    (61) assignment -> . ID [ expression ] = expression ;
    (62) condition -> . IF ( expression ) block elses ;
    (63) cycle -> . WHILE ( expression ) block ;
    (64) special -> . SPECIAL_ID ( expressions ) ;

    ID              shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    SPECIAL_ID      shift and go to state 42

    statutes                       shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38

state 24

    (42) function_declaration -> function function_declaration .

    {               reduce using rule 42 (function_declaration -> function function_declaration .)


state 25

    (44) function -> FUN return_type . ID ( parameters ) { variable_declaration statutes } ;

    ID              shift and go to state 43


state 26

    (45) return_type -> type .

    ID              reduce using rule 45 (return_type -> type .)


state 27

    (46) return_type -> VOID .

    ID              reduce using rule 46 (return_type -> VOID .)


state 28

    (5) variables -> type ids ; .

    INT             reduce using rule 5 (variables -> type ids ; .)
    DEC             reduce using rule 5 (variables -> type ids ; .)
    CHAR            reduce using rule 5 (variables -> type ids ; .)
    STR             reduce using rule 5 (variables -> type ids ; .)
    BOOL            reduce using rule 5 (variables -> type ids ; .)
    FUN             reduce using rule 5 (variables -> type ids ; .)
    {               reduce using rule 5 (variables -> type ids ; .)
    ID              reduce using rule 5 (variables -> type ids ; .)
    IF              reduce using rule 5 (variables -> type ids ; .)
    WHILE           reduce using rule 5 (variables -> type ids ; .)
    SPECIAL_ID      reduce using rule 5 (variables -> type ids ; .)


state 29

    (6) ids -> id other_ids .

    ;               reduce using rule 6 (ids -> id other_ids .)


state 30

    (7) other_ids -> , . ids
    (6) ids -> . id other_ids
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    ID              shift and go to state 21

    ids                            shift and go to state 44
    id                             shift and go to state 20

state 31

    (8) other_ids -> empty .

    ;               reduce using rule 8 (other_ids -> empty .)


state 32

    (10) id -> ID [ . expression ]
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 46
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 33

    (74) block -> { statutes . }

    }               shift and go to state 64


state 34

    (52) statutes -> call .

    }               reduce using rule 52 (statutes -> call .)


state 35

    (53) statutes -> assignment .

    }               reduce using rule 53 (statutes -> assignment .)


state 36

    (54) statutes -> condition .

    }               reduce using rule 54 (statutes -> condition .)


state 37

    (55) statutes -> cycle .

    }               reduce using rule 55 (statutes -> cycle .)


state 38

    (56) statutes -> special .

    }               reduce using rule 56 (statutes -> special .)


state 39

    (57) call -> ID . ( expressions ) ;
    (60) assignment -> ID . = expression ;
    (61) assignment -> ID . [ expression ] = expression ;

    (               shift and go to state 65
    =               shift and go to state 66
    [               shift and go to state 67


state 40

    (62) condition -> IF . ( expression ) block elses ;

    (               shift and go to state 68


state 41

    (63) cycle -> WHILE . ( expression ) block ;

    (               shift and go to state 69


state 42

    (64) special -> SPECIAL_ID . ( expressions ) ;

    (               shift and go to state 70


state 43

    (44) function -> FUN return_type ID . ( parameters ) { variable_declaration statutes } ;

    (               shift and go to state 71


state 44

    (7) other_ids -> , ids .

    ;               reduce using rule 7 (other_ids -> , ids .)


state 45

    (57) call -> ID . ( expressions ) ;
    (9) id -> ID .
    (10) id -> ID . [ expression ]

    (               shift and go to state 65
    *               reduce using rule 9 (id -> ID .)
    /               reduce using rule 9 (id -> ID .)
    MOD             reduce using rule 9 (id -> ID .)
    +               reduce using rule 9 (id -> ID .)
    -               reduce using rule 9 (id -> ID .)
    <               reduce using rule 9 (id -> ID .)
    >               reduce using rule 9 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 9 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 9 (id -> ID .)
    EQUALS          reduce using rule 9 (id -> ID .)
    OR              reduce using rule 9 (id -> ID .)
    AND             reduce using rule 9 (id -> ID .)
    EXPONENTIATION  reduce using rule 9 (id -> ID .)
    ]               reduce using rule 9 (id -> ID .)
    )               reduce using rule 9 (id -> ID .)
    ,               reduce using rule 9 (id -> ID .)
    ;               reduce using rule 9 (id -> ID .)
    [               shift and go to state 32


state 46

    (10) id -> ID [ expression . ]

    ]               shift and go to state 72


state 47

    (11) expression -> level1 .
    (12) expression -> level1 . EXPONENTIATION level1

    ]               reduce using rule 11 (expression -> level1 .)
    )               reduce using rule 11 (expression -> level1 .)
    ,               reduce using rule 11 (expression -> level1 .)
    ;               reduce using rule 11 (expression -> level1 .)
    EXPONENTIATION  shift and go to state 73


state 48

    (13) level1 -> level2 .

    EXPONENTIATION  reduce using rule 13 (level1 -> level2 .)
    ]               reduce using rule 13 (level1 -> level2 .)
    )               reduce using rule 13 (level1 -> level2 .)
    ,               reduce using rule 13 (level1 -> level2 .)
    ;               reduce using rule 13 (level1 -> level2 .)


state 49

    (14) level1 -> + . level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level2                         shift and go to state 74
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 50

    (15) level1 -> - . level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level2                         shift and go to state 75
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 51

    (16) level2 -> level3 .
    (17) level2 -> level3 . OR level3
    (18) level2 -> level3 . AND level3

    EXPONENTIATION  reduce using rule 16 (level2 -> level3 .)
    ]               reduce using rule 16 (level2 -> level3 .)
    )               reduce using rule 16 (level2 -> level3 .)
    ,               reduce using rule 16 (level2 -> level3 .)
    ;               reduce using rule 16 (level2 -> level3 .)
    OR              shift and go to state 76
    AND             shift and go to state 77


state 52

    (19) level3 -> level4 .
    (20) level3 -> level4 . < level4
    (21) level3 -> level4 . > level4
    (22) level3 -> level4 . LESS_EQUAL_THAN level4
    (23) level3 -> level4 . GREATER_EQUAL_THAN level4
    (24) level3 -> level4 . EQUALS level4

    OR              reduce using rule 19 (level3 -> level4 .)
    AND             reduce using rule 19 (level3 -> level4 .)
    EXPONENTIATION  reduce using rule 19 (level3 -> level4 .)
    ]               reduce using rule 19 (level3 -> level4 .)
    )               reduce using rule 19 (level3 -> level4 .)
    ,               reduce using rule 19 (level3 -> level4 .)
    ;               reduce using rule 19 (level3 -> level4 .)
    <               shift and go to state 78
    >               shift and go to state 79
    LESS_EQUAL_THAN shift and go to state 80
    GREATER_EQUAL_THAN shift and go to state 81
    EQUALS          shift and go to state 82


state 53

    (25) level4 -> level5 .
    (26) level4 -> level5 . + level5
    (27) level4 -> level5 . - level5

    <               reduce using rule 25 (level4 -> level5 .)
    >               reduce using rule 25 (level4 -> level5 .)
    LESS_EQUAL_THAN reduce using rule 25 (level4 -> level5 .)
    GREATER_EQUAL_THAN reduce using rule 25 (level4 -> level5 .)
    EQUALS          reduce using rule 25 (level4 -> level5 .)
    OR              reduce using rule 25 (level4 -> level5 .)
    AND             reduce using rule 25 (level4 -> level5 .)
    EXPONENTIATION  reduce using rule 25 (level4 -> level5 .)
    ]               reduce using rule 25 (level4 -> level5 .)
    )               reduce using rule 25 (level4 -> level5 .)
    ,               reduce using rule 25 (level4 -> level5 .)
    ;               reduce using rule 25 (level4 -> level5 .)
    +               shift and go to state 83
    -               shift and go to state 84


state 54

    (28) level5 -> level6 .
    (29) level5 -> level6 . * level6
    (30) level5 -> level6 . / level6
    (31) level5 -> level6 . MOD level6

    +               reduce using rule 28 (level5 -> level6 .)
    -               reduce using rule 28 (level5 -> level6 .)
    <               reduce using rule 28 (level5 -> level6 .)
    >               reduce using rule 28 (level5 -> level6 .)
    LESS_EQUAL_THAN reduce using rule 28 (level5 -> level6 .)
    GREATER_EQUAL_THAN reduce using rule 28 (level5 -> level6 .)
    EQUALS          reduce using rule 28 (level5 -> level6 .)
    OR              reduce using rule 28 (level5 -> level6 .)
    AND             reduce using rule 28 (level5 -> level6 .)
    EXPONENTIATION  reduce using rule 28 (level5 -> level6 .)
    ]               reduce using rule 28 (level5 -> level6 .)
    )               reduce using rule 28 (level5 -> level6 .)
    ,               reduce using rule 28 (level5 -> level6 .)
    ;               reduce using rule 28 (level5 -> level6 .)
    *               shift and go to state 85
    /               shift and go to state 86
    MOD             shift and go to state 87


state 55

    (33) level6 -> ( . expression )
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 88
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 56

    (34) level6 -> const .

    *               reduce using rule 34 (level6 -> const .)
    /               reduce using rule 34 (level6 -> const .)
    MOD             reduce using rule 34 (level6 -> const .)
    +               reduce using rule 34 (level6 -> const .)
    -               reduce using rule 34 (level6 -> const .)
    <               reduce using rule 34 (level6 -> const .)
    >               reduce using rule 34 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 34 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 34 (level6 -> const .)
    EQUALS          reduce using rule 34 (level6 -> const .)
    OR              reduce using rule 34 (level6 -> const .)
    AND             reduce using rule 34 (level6 -> const .)
    EXPONENTIATION  reduce using rule 34 (level6 -> const .)
    ]               reduce using rule 34 (level6 -> const .)
    )               reduce using rule 34 (level6 -> const .)
    ,               reduce using rule 34 (level6 -> const .)
    ;               reduce using rule 34 (level6 -> const .)


state 57

    (35) level6 -> NOT . const
    (39) level6 -> NOT . call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    const                          shift and go to state 89
    call                           shift and go to state 90
    id                             shift and go to state 61

state 58

    (36) level6 -> INCREMENT . const
    (40) level6 -> INCREMENT . call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    const                          shift and go to state 91
    call                           shift and go to state 92
    id                             shift and go to state 61

state 59

    (37) level6 -> DECREMENT . const
    (41) level6 -> DECREMENT . call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    const                          shift and go to state 93
    call                           shift and go to state 94
    id                             shift and go to state 61

state 60

    (38) level6 -> call .

    *               reduce using rule 38 (level6 -> call .)
    /               reduce using rule 38 (level6 -> call .)
    MOD             reduce using rule 38 (level6 -> call .)
    +               reduce using rule 38 (level6 -> call .)
    -               reduce using rule 38 (level6 -> call .)
    <               reduce using rule 38 (level6 -> call .)
    >               reduce using rule 38 (level6 -> call .)
    LESS_EQUAL_THAN reduce using rule 38 (level6 -> call .)
    GREATER_EQUAL_THAN reduce using rule 38 (level6 -> call .)
    EQUALS          reduce using rule 38 (level6 -> call .)
    OR              reduce using rule 38 (level6 -> call .)
    AND             reduce using rule 38 (level6 -> call .)
    EXPONENTIATION  reduce using rule 38 (level6 -> call .)
    ]               reduce using rule 38 (level6 -> call .)
    )               reduce using rule 38 (level6 -> call .)
    ,               reduce using rule 38 (level6 -> call .)
    ;               reduce using rule 38 (level6 -> call .)


state 61

    (71) const -> id .

    *               reduce using rule 71 (const -> id .)
    /               reduce using rule 71 (const -> id .)
    MOD             reduce using rule 71 (const -> id .)
    +               reduce using rule 71 (const -> id .)
    -               reduce using rule 71 (const -> id .)
    <               reduce using rule 71 (const -> id .)
    >               reduce using rule 71 (const -> id .)
    LESS_EQUAL_THAN reduce using rule 71 (const -> id .)
    GREATER_EQUAL_THAN reduce using rule 71 (const -> id .)
    EQUALS          reduce using rule 71 (const -> id .)
    OR              reduce using rule 71 (const -> id .)
    AND             reduce using rule 71 (const -> id .)
    EXPONENTIATION  reduce using rule 71 (const -> id .)
    ]               reduce using rule 71 (const -> id .)
    )               reduce using rule 71 (const -> id .)
    ,               reduce using rule 71 (const -> id .)
    ;               reduce using rule 71 (const -> id .)


state 62

    (72) const -> INT .

    *               reduce using rule 72 (const -> INT .)
    /               reduce using rule 72 (const -> INT .)
    MOD             reduce using rule 72 (const -> INT .)
    +               reduce using rule 72 (const -> INT .)
    -               reduce using rule 72 (const -> INT .)
    <               reduce using rule 72 (const -> INT .)
    >               reduce using rule 72 (const -> INT .)
    LESS_EQUAL_THAN reduce using rule 72 (const -> INT .)
    GREATER_EQUAL_THAN reduce using rule 72 (const -> INT .)
    EQUALS          reduce using rule 72 (const -> INT .)
    OR              reduce using rule 72 (const -> INT .)
    AND             reduce using rule 72 (const -> INT .)
    EXPONENTIATION  reduce using rule 72 (const -> INT .)
    ]               reduce using rule 72 (const -> INT .)
    )               reduce using rule 72 (const -> INT .)
    ,               reduce using rule 72 (const -> INT .)
    ;               reduce using rule 72 (const -> INT .)


state 63

    (73) const -> DEC .

    *               reduce using rule 73 (const -> DEC .)
    /               reduce using rule 73 (const -> DEC .)
    MOD             reduce using rule 73 (const -> DEC .)
    +               reduce using rule 73 (const -> DEC .)
    -               reduce using rule 73 (const -> DEC .)
    <               reduce using rule 73 (const -> DEC .)
    >               reduce using rule 73 (const -> DEC .)
    LESS_EQUAL_THAN reduce using rule 73 (const -> DEC .)
    GREATER_EQUAL_THAN reduce using rule 73 (const -> DEC .)
    EQUALS          reduce using rule 73 (const -> DEC .)
    OR              reduce using rule 73 (const -> DEC .)
    AND             reduce using rule 73 (const -> DEC .)
    EXPONENTIATION  reduce using rule 73 (const -> DEC .)
    ]               reduce using rule 73 (const -> DEC .)
    )               reduce using rule 73 (const -> DEC .)
    ,               reduce using rule 73 (const -> DEC .)
    ;               reduce using rule 73 (const -> DEC .)


state 64

    (74) block -> { statutes } .

    $end            reduce using rule 74 (block -> { statutes } .)
    ELSE            reduce using rule 74 (block -> { statutes } .)
    ELSEIF          reduce using rule 74 (block -> { statutes } .)
    ;               reduce using rule 74 (block -> { statutes } .)


state 65

    (57) call -> ID ( . expressions ) ;
    (58) expressions -> . expression
    (59) expressions -> . expression , expressions
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expressions                    shift and go to state 95
    expression                     shift and go to state 96
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 66

    (60) assignment -> ID = . expression ;
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 97
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 67

    (61) assignment -> ID [ . expression ] = expression ;
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 98
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 68

    (62) condition -> IF ( . expression ) block elses ;
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 99
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 69

    (63) cycle -> WHILE ( . expression ) block ;
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 100
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 70

    (64) special -> SPECIAL_ID ( . expressions ) ;
    (58) expressions -> . expression
    (59) expressions -> . expression , expressions
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expressions                    shift and go to state 101
    expression                     shift and go to state 96
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 71

    (44) function -> FUN return_type ID ( . parameters ) { variable_declaration statutes } ;
    (68) parameters -> . type ID other_parameters
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    parameters                     shift and go to state 102
    type                           shift and go to state 103

state 72

    (10) id -> ID [ expression ] .

    ,               reduce using rule 10 (id -> ID [ expression ] .)
    ;               reduce using rule 10 (id -> ID [ expression ] .)
    *               reduce using rule 10 (id -> ID [ expression ] .)
    /               reduce using rule 10 (id -> ID [ expression ] .)
    MOD             reduce using rule 10 (id -> ID [ expression ] .)
    +               reduce using rule 10 (id -> ID [ expression ] .)
    -               reduce using rule 10 (id -> ID [ expression ] .)
    <               reduce using rule 10 (id -> ID [ expression ] .)
    >               reduce using rule 10 (id -> ID [ expression ] .)
    LESS_EQUAL_THAN reduce using rule 10 (id -> ID [ expression ] .)
    GREATER_EQUAL_THAN reduce using rule 10 (id -> ID [ expression ] .)
    EQUALS          reduce using rule 10 (id -> ID [ expression ] .)
    OR              reduce using rule 10 (id -> ID [ expression ] .)
    AND             reduce using rule 10 (id -> ID [ expression ] .)
    EXPONENTIATION  reduce using rule 10 (id -> ID [ expression ] .)
    ]               reduce using rule 10 (id -> ID [ expression ] .)
    )               reduce using rule 10 (id -> ID [ expression ] .)


state 73

    (12) expression -> level1 EXPONENTIATION . level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    level1                         shift and go to state 104
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 74

    (14) level1 -> + level2 .

    EXPONENTIATION  reduce using rule 14 (level1 -> + level2 .)
    ]               reduce using rule 14 (level1 -> + level2 .)
    )               reduce using rule 14 (level1 -> + level2 .)
    ,               reduce using rule 14 (level1 -> + level2 .)
    ;               reduce using rule 14 (level1 -> + level2 .)


state 75

    (15) level1 -> - level2 .

    EXPONENTIATION  reduce using rule 15 (level1 -> - level2 .)
    ]               reduce using rule 15 (level1 -> - level2 .)
    )               reduce using rule 15 (level1 -> - level2 .)
    ,               reduce using rule 15 (level1 -> - level2 .)
    ;               reduce using rule 15 (level1 -> - level2 .)


state 76

    (17) level2 -> level3 OR . level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level3                         shift and go to state 105
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 77

    (18) level2 -> level3 AND . level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level3                         shift and go to state 106
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 78

    (20) level3 -> level4 < . level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level4                         shift and go to state 107
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 79

    (21) level3 -> level4 > . level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level4                         shift and go to state 108
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 80

    (22) level3 -> level4 LESS_EQUAL_THAN . level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level4                         shift and go to state 109
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 81

    (23) level3 -> level4 GREATER_EQUAL_THAN . level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level4                         shift and go to state 110
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 82

    (24) level3 -> level4 EQUALS . level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    +               reduce using rule 32 (level5 -> .)
    -               reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level4                         shift and go to state 111
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 83

    (26) level4 -> level5 + . level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level5                         shift and go to state 112
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 84

    (27) level4 -> level5 - . level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ]               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level5                         shift and go to state 113
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 85

    (29) level5 -> level6 * . level6
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level6                         shift and go to state 114
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 86

    (30) level5 -> level6 / . level6
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level6                         shift and go to state 115
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 87

    (31) level5 -> level6 MOD . level6
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

    level6                         shift and go to state 116
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 88

    (33) level6 -> ( expression . )

    )               shift and go to state 117


state 89

    (35) level6 -> NOT const .

    *               reduce using rule 35 (level6 -> NOT const .)
    /               reduce using rule 35 (level6 -> NOT const .)
    MOD             reduce using rule 35 (level6 -> NOT const .)
    +               reduce using rule 35 (level6 -> NOT const .)
    -               reduce using rule 35 (level6 -> NOT const .)
    <               reduce using rule 35 (level6 -> NOT const .)
    >               reduce using rule 35 (level6 -> NOT const .)
    LESS_EQUAL_THAN reduce using rule 35 (level6 -> NOT const .)
    GREATER_EQUAL_THAN reduce using rule 35 (level6 -> NOT const .)
    EQUALS          reduce using rule 35 (level6 -> NOT const .)
    OR              reduce using rule 35 (level6 -> NOT const .)
    AND             reduce using rule 35 (level6 -> NOT const .)
    EXPONENTIATION  reduce using rule 35 (level6 -> NOT const .)
    ]               reduce using rule 35 (level6 -> NOT const .)
    )               reduce using rule 35 (level6 -> NOT const .)
    ,               reduce using rule 35 (level6 -> NOT const .)
    ;               reduce using rule 35 (level6 -> NOT const .)


state 90

    (39) level6 -> NOT call .

    *               reduce using rule 39 (level6 -> NOT call .)
    /               reduce using rule 39 (level6 -> NOT call .)
    MOD             reduce using rule 39 (level6 -> NOT call .)
    +               reduce using rule 39 (level6 -> NOT call .)
    -               reduce using rule 39 (level6 -> NOT call .)
    <               reduce using rule 39 (level6 -> NOT call .)
    >               reduce using rule 39 (level6 -> NOT call .)
    LESS_EQUAL_THAN reduce using rule 39 (level6 -> NOT call .)
    GREATER_EQUAL_THAN reduce using rule 39 (level6 -> NOT call .)
    EQUALS          reduce using rule 39 (level6 -> NOT call .)
    OR              reduce using rule 39 (level6 -> NOT call .)
    AND             reduce using rule 39 (level6 -> NOT call .)
    EXPONENTIATION  reduce using rule 39 (level6 -> NOT call .)
    ]               reduce using rule 39 (level6 -> NOT call .)
    )               reduce using rule 39 (level6 -> NOT call .)
    ,               reduce using rule 39 (level6 -> NOT call .)
    ;               reduce using rule 39 (level6 -> NOT call .)


state 91

    (36) level6 -> INCREMENT const .

    *               reduce using rule 36 (level6 -> INCREMENT const .)
    /               reduce using rule 36 (level6 -> INCREMENT const .)
    MOD             reduce using rule 36 (level6 -> INCREMENT const .)
    +               reduce using rule 36 (level6 -> INCREMENT const .)
    -               reduce using rule 36 (level6 -> INCREMENT const .)
    <               reduce using rule 36 (level6 -> INCREMENT const .)
    >               reduce using rule 36 (level6 -> INCREMENT const .)
    LESS_EQUAL_THAN reduce using rule 36 (level6 -> INCREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 36 (level6 -> INCREMENT const .)
    EQUALS          reduce using rule 36 (level6 -> INCREMENT const .)
    OR              reduce using rule 36 (level6 -> INCREMENT const .)
    AND             reduce using rule 36 (level6 -> INCREMENT const .)
    EXPONENTIATION  reduce using rule 36 (level6 -> INCREMENT const .)
    ]               reduce using rule 36 (level6 -> INCREMENT const .)
    )               reduce using rule 36 (level6 -> INCREMENT const .)
    ,               reduce using rule 36 (level6 -> INCREMENT const .)
    ;               reduce using rule 36 (level6 -> INCREMENT const .)


state 92

    (40) level6 -> INCREMENT call .

    *               reduce using rule 40 (level6 -> INCREMENT call .)
    /               reduce using rule 40 (level6 -> INCREMENT call .)
    MOD             reduce using rule 40 (level6 -> INCREMENT call .)
    +               reduce using rule 40 (level6 -> INCREMENT call .)
    -               reduce using rule 40 (level6 -> INCREMENT call .)
    <               reduce using rule 40 (level6 -> INCREMENT call .)
    >               reduce using rule 40 (level6 -> INCREMENT call .)
    LESS_EQUAL_THAN reduce using rule 40 (level6 -> INCREMENT call .)
    GREATER_EQUAL_THAN reduce using rule 40 (level6 -> INCREMENT call .)
    EQUALS          reduce using rule 40 (level6 -> INCREMENT call .)
    OR              reduce using rule 40 (level6 -> INCREMENT call .)
    AND             reduce using rule 40 (level6 -> INCREMENT call .)
    EXPONENTIATION  reduce using rule 40 (level6 -> INCREMENT call .)
    ]               reduce using rule 40 (level6 -> INCREMENT call .)
    )               reduce using rule 40 (level6 -> INCREMENT call .)
    ,               reduce using rule 40 (level6 -> INCREMENT call .)
    ;               reduce using rule 40 (level6 -> INCREMENT call .)


state 93

    (37) level6 -> DECREMENT const .

    *               reduce using rule 37 (level6 -> DECREMENT const .)
    /               reduce using rule 37 (level6 -> DECREMENT const .)
    MOD             reduce using rule 37 (level6 -> DECREMENT const .)
    +               reduce using rule 37 (level6 -> DECREMENT const .)
    -               reduce using rule 37 (level6 -> DECREMENT const .)
    <               reduce using rule 37 (level6 -> DECREMENT const .)
    >               reduce using rule 37 (level6 -> DECREMENT const .)
    LESS_EQUAL_THAN reduce using rule 37 (level6 -> DECREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 37 (level6 -> DECREMENT const .)
    EQUALS          reduce using rule 37 (level6 -> DECREMENT const .)
    OR              reduce using rule 37 (level6 -> DECREMENT const .)
    AND             reduce using rule 37 (level6 -> DECREMENT const .)
    EXPONENTIATION  reduce using rule 37 (level6 -> DECREMENT const .)
    ]               reduce using rule 37 (level6 -> DECREMENT const .)
    )               reduce using rule 37 (level6 -> DECREMENT const .)
    ,               reduce using rule 37 (level6 -> DECREMENT const .)
    ;               reduce using rule 37 (level6 -> DECREMENT const .)


state 94

    (41) level6 -> DECREMENT call .

    *               reduce using rule 41 (level6 -> DECREMENT call .)
    /               reduce using rule 41 (level6 -> DECREMENT call .)
    MOD             reduce using rule 41 (level6 -> DECREMENT call .)
    +               reduce using rule 41 (level6 -> DECREMENT call .)
    -               reduce using rule 41 (level6 -> DECREMENT call .)
    <               reduce using rule 41 (level6 -> DECREMENT call .)
    >               reduce using rule 41 (level6 -> DECREMENT call .)
    LESS_EQUAL_THAN reduce using rule 41 (level6 -> DECREMENT call .)
    GREATER_EQUAL_THAN reduce using rule 41 (level6 -> DECREMENT call .)
    EQUALS          reduce using rule 41 (level6 -> DECREMENT call .)
    OR              reduce using rule 41 (level6 -> DECREMENT call .)
    AND             reduce using rule 41 (level6 -> DECREMENT call .)
    EXPONENTIATION  reduce using rule 41 (level6 -> DECREMENT call .)
    ]               reduce using rule 41 (level6 -> DECREMENT call .)
    )               reduce using rule 41 (level6 -> DECREMENT call .)
    ,               reduce using rule 41 (level6 -> DECREMENT call .)
    ;               reduce using rule 41 (level6 -> DECREMENT call .)


state 95

    (57) call -> ID ( expressions . ) ;

    )               shift and go to state 118


state 96

    (58) expressions -> expression .
    (59) expressions -> expression . , expressions

    )               reduce using rule 58 (expressions -> expression .)
    ,               shift and go to state 119


state 97

    (60) assignment -> ID = expression . ;

    ;               shift and go to state 120


state 98

    (61) assignment -> ID [ expression . ] = expression ;

    ]               shift and go to state 121


state 99

    (62) condition -> IF ( expression . ) block elses ;

    )               shift and go to state 122


state 100

    (63) cycle -> WHILE ( expression . ) block ;

    )               shift and go to state 123


state 101

    (64) special -> SPECIAL_ID ( expressions . ) ;

    )               shift and go to state 124


state 102

    (44) function -> FUN return_type ID ( parameters . ) { variable_declaration statutes } ;

    )               shift and go to state 125


state 103

    (68) parameters -> type . ID other_parameters

    ID              shift and go to state 126


state 104

    (12) expression -> level1 EXPONENTIATION level1 .

    ]               reduce using rule 12 (expression -> level1 EXPONENTIATION level1 .)
    )               reduce using rule 12 (expression -> level1 EXPONENTIATION level1 .)
    ,               reduce using rule 12 (expression -> level1 EXPONENTIATION level1 .)
    ;               reduce using rule 12 (expression -> level1 EXPONENTIATION level1 .)


state 105

    (17) level2 -> level3 OR level3 .

    EXPONENTIATION  reduce using rule 17 (level2 -> level3 OR level3 .)
    ]               reduce using rule 17 (level2 -> level3 OR level3 .)
    )               reduce using rule 17 (level2 -> level3 OR level3 .)
    ,               reduce using rule 17 (level2 -> level3 OR level3 .)
    ;               reduce using rule 17 (level2 -> level3 OR level3 .)


state 106

    (18) level2 -> level3 AND level3 .

    EXPONENTIATION  reduce using rule 18 (level2 -> level3 AND level3 .)
    ]               reduce using rule 18 (level2 -> level3 AND level3 .)
    )               reduce using rule 18 (level2 -> level3 AND level3 .)
    ,               reduce using rule 18 (level2 -> level3 AND level3 .)
    ;               reduce using rule 18 (level2 -> level3 AND level3 .)


state 107

    (20) level3 -> level4 < level4 .

    OR              reduce using rule 20 (level3 -> level4 < level4 .)
    AND             reduce using rule 20 (level3 -> level4 < level4 .)
    EXPONENTIATION  reduce using rule 20 (level3 -> level4 < level4 .)
    ]               reduce using rule 20 (level3 -> level4 < level4 .)
    )               reduce using rule 20 (level3 -> level4 < level4 .)
    ,               reduce using rule 20 (level3 -> level4 < level4 .)
    ;               reduce using rule 20 (level3 -> level4 < level4 .)


state 108

    (21) level3 -> level4 > level4 .

    OR              reduce using rule 21 (level3 -> level4 > level4 .)
    AND             reduce using rule 21 (level3 -> level4 > level4 .)
    EXPONENTIATION  reduce using rule 21 (level3 -> level4 > level4 .)
    ]               reduce using rule 21 (level3 -> level4 > level4 .)
    )               reduce using rule 21 (level3 -> level4 > level4 .)
    ,               reduce using rule 21 (level3 -> level4 > level4 .)
    ;               reduce using rule 21 (level3 -> level4 > level4 .)


state 109

    (22) level3 -> level4 LESS_EQUAL_THAN level4 .

    OR              reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    AND             reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ]               reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    )               reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ,               reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ;               reduce using rule 22 (level3 -> level4 LESS_EQUAL_THAN level4 .)


state 110

    (23) level3 -> level4 GREATER_EQUAL_THAN level4 .

    OR              reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    AND             reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ]               reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    )               reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ,               reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ;               reduce using rule 23 (level3 -> level4 GREATER_EQUAL_THAN level4 .)


state 111

    (24) level3 -> level4 EQUALS level4 .

    OR              reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    AND             reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    EXPONENTIATION  reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    ]               reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    )               reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    ,               reduce using rule 24 (level3 -> level4 EQUALS level4 .)
    ;               reduce using rule 24 (level3 -> level4 EQUALS level4 .)


state 112

    (26) level4 -> level5 + level5 .

    <               reduce using rule 26 (level4 -> level5 + level5 .)
    >               reduce using rule 26 (level4 -> level5 + level5 .)
    LESS_EQUAL_THAN reduce using rule 26 (level4 -> level5 + level5 .)
    GREATER_EQUAL_THAN reduce using rule 26 (level4 -> level5 + level5 .)
    EQUALS          reduce using rule 26 (level4 -> level5 + level5 .)
    OR              reduce using rule 26 (level4 -> level5 + level5 .)
    AND             reduce using rule 26 (level4 -> level5 + level5 .)
    EXPONENTIATION  reduce using rule 26 (level4 -> level5 + level5 .)
    ]               reduce using rule 26 (level4 -> level5 + level5 .)
    )               reduce using rule 26 (level4 -> level5 + level5 .)
    ,               reduce using rule 26 (level4 -> level5 + level5 .)
    ;               reduce using rule 26 (level4 -> level5 + level5 .)


state 113

    (27) level4 -> level5 - level5 .

    <               reduce using rule 27 (level4 -> level5 - level5 .)
    >               reduce using rule 27 (level4 -> level5 - level5 .)
    LESS_EQUAL_THAN reduce using rule 27 (level4 -> level5 - level5 .)
    GREATER_EQUAL_THAN reduce using rule 27 (level4 -> level5 - level5 .)
    EQUALS          reduce using rule 27 (level4 -> level5 - level5 .)
    OR              reduce using rule 27 (level4 -> level5 - level5 .)
    AND             reduce using rule 27 (level4 -> level5 - level5 .)
    EXPONENTIATION  reduce using rule 27 (level4 -> level5 - level5 .)
    ]               reduce using rule 27 (level4 -> level5 - level5 .)
    )               reduce using rule 27 (level4 -> level5 - level5 .)
    ,               reduce using rule 27 (level4 -> level5 - level5 .)
    ;               reduce using rule 27 (level4 -> level5 - level5 .)


state 114

    (29) level5 -> level6 * level6 .

    +               reduce using rule 29 (level5 -> level6 * level6 .)
    -               reduce using rule 29 (level5 -> level6 * level6 .)
    <               reduce using rule 29 (level5 -> level6 * level6 .)
    >               reduce using rule 29 (level5 -> level6 * level6 .)
    LESS_EQUAL_THAN reduce using rule 29 (level5 -> level6 * level6 .)
    GREATER_EQUAL_THAN reduce using rule 29 (level5 -> level6 * level6 .)
    EQUALS          reduce using rule 29 (level5 -> level6 * level6 .)
    OR              reduce using rule 29 (level5 -> level6 * level6 .)
    AND             reduce using rule 29 (level5 -> level6 * level6 .)
    EXPONENTIATION  reduce using rule 29 (level5 -> level6 * level6 .)
    ]               reduce using rule 29 (level5 -> level6 * level6 .)
    )               reduce using rule 29 (level5 -> level6 * level6 .)
    ,               reduce using rule 29 (level5 -> level6 * level6 .)
    ;               reduce using rule 29 (level5 -> level6 * level6 .)


state 115

    (30) level5 -> level6 / level6 .

    +               reduce using rule 30 (level5 -> level6 / level6 .)
    -               reduce using rule 30 (level5 -> level6 / level6 .)
    <               reduce using rule 30 (level5 -> level6 / level6 .)
    >               reduce using rule 30 (level5 -> level6 / level6 .)
    LESS_EQUAL_THAN reduce using rule 30 (level5 -> level6 / level6 .)
    GREATER_EQUAL_THAN reduce using rule 30 (level5 -> level6 / level6 .)
    EQUALS          reduce using rule 30 (level5 -> level6 / level6 .)
    OR              reduce using rule 30 (level5 -> level6 / level6 .)
    AND             reduce using rule 30 (level5 -> level6 / level6 .)
    EXPONENTIATION  reduce using rule 30 (level5 -> level6 / level6 .)
    ]               reduce using rule 30 (level5 -> level6 / level6 .)
    )               reduce using rule 30 (level5 -> level6 / level6 .)
    ,               reduce using rule 30 (level5 -> level6 / level6 .)
    ;               reduce using rule 30 (level5 -> level6 / level6 .)


state 116

    (31) level5 -> level6 MOD level6 .

    +               reduce using rule 31 (level5 -> level6 MOD level6 .)
    -               reduce using rule 31 (level5 -> level6 MOD level6 .)
    <               reduce using rule 31 (level5 -> level6 MOD level6 .)
    >               reduce using rule 31 (level5 -> level6 MOD level6 .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> level6 MOD level6 .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> level6 MOD level6 .)
    EQUALS          reduce using rule 31 (level5 -> level6 MOD level6 .)
    OR              reduce using rule 31 (level5 -> level6 MOD level6 .)
    AND             reduce using rule 31 (level5 -> level6 MOD level6 .)
    EXPONENTIATION  reduce using rule 31 (level5 -> level6 MOD level6 .)
    ]               reduce using rule 31 (level5 -> level6 MOD level6 .)
    )               reduce using rule 31 (level5 -> level6 MOD level6 .)
    ,               reduce using rule 31 (level5 -> level6 MOD level6 .)
    ;               reduce using rule 31 (level5 -> level6 MOD level6 .)


state 117

    (33) level6 -> ( expression ) .

    *               reduce using rule 33 (level6 -> ( expression ) .)
    /               reduce using rule 33 (level6 -> ( expression ) .)
    MOD             reduce using rule 33 (level6 -> ( expression ) .)
    +               reduce using rule 33 (level6 -> ( expression ) .)
    -               reduce using rule 33 (level6 -> ( expression ) .)
    <               reduce using rule 33 (level6 -> ( expression ) .)
    >               reduce using rule 33 (level6 -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 33 (level6 -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 33 (level6 -> ( expression ) .)
    EQUALS          reduce using rule 33 (level6 -> ( expression ) .)
    OR              reduce using rule 33 (level6 -> ( expression ) .)
    AND             reduce using rule 33 (level6 -> ( expression ) .)
    EXPONENTIATION  reduce using rule 33 (level6 -> ( expression ) .)
    ]               reduce using rule 33 (level6 -> ( expression ) .)
    )               reduce using rule 33 (level6 -> ( expression ) .)
    ,               reduce using rule 33 (level6 -> ( expression ) .)
    ;               reduce using rule 33 (level6 -> ( expression ) .)


state 118

    (57) call -> ID ( expressions ) . ;

    ;               shift and go to state 127


state 119

    (59) expressions -> expression , . expressions
    (58) expressions -> . expression
    (59) expressions -> . expression , expressions
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ,               reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 96
    expressions                    shift and go to state 128
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 120

    (60) assignment -> ID = expression ; .

    }               reduce using rule 60 (assignment -> ID = expression ; .)


state 121

    (61) assignment -> ID [ expression ] . = expression ;

    =               shift and go to state 129


state 122

    (62) condition -> IF ( expression ) . block elses ;
    (74) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 130

state 123

    (63) cycle -> WHILE ( expression ) . block ;
    (74) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 131

state 124

    (64) special -> SPECIAL_ID ( expressions ) . ;

    ;               shift and go to state 132


state 125

    (44) function -> FUN return_type ID ( parameters ) . { variable_declaration statutes } ;

    {               shift and go to state 133


state 126

    (68) parameters -> type ID . other_parameters
    (69) other_parameters -> . , parameters
    (70) other_parameters -> . empty
    (2) empty -> .

    ,               shift and go to state 135
    )               reduce using rule 2 (empty -> .)

    other_parameters               shift and go to state 134
    empty                          shift and go to state 136

state 127

    (57) call -> ID ( expressions ) ; .

    }               reduce using rule 57 (call -> ID ( expressions ) ; .)
    *               reduce using rule 57 (call -> ID ( expressions ) ; .)
    /               reduce using rule 57 (call -> ID ( expressions ) ; .)
    MOD             reduce using rule 57 (call -> ID ( expressions ) ; .)
    +               reduce using rule 57 (call -> ID ( expressions ) ; .)
    -               reduce using rule 57 (call -> ID ( expressions ) ; .)
    <               reduce using rule 57 (call -> ID ( expressions ) ; .)
    >               reduce using rule 57 (call -> ID ( expressions ) ; .)
    LESS_EQUAL_THAN reduce using rule 57 (call -> ID ( expressions ) ; .)
    GREATER_EQUAL_THAN reduce using rule 57 (call -> ID ( expressions ) ; .)
    EQUALS          reduce using rule 57 (call -> ID ( expressions ) ; .)
    OR              reduce using rule 57 (call -> ID ( expressions ) ; .)
    AND             reduce using rule 57 (call -> ID ( expressions ) ; .)
    EXPONENTIATION  reduce using rule 57 (call -> ID ( expressions ) ; .)
    ]               reduce using rule 57 (call -> ID ( expressions ) ; .)
    )               reduce using rule 57 (call -> ID ( expressions ) ; .)
    ,               reduce using rule 57 (call -> ID ( expressions ) ; .)
    ;               reduce using rule 57 (call -> ID ( expressions ) ; .)


state 128

    (59) expressions -> expression , expressions .

    )               reduce using rule 59 (expressions -> expression , expressions .)


state 129

    (61) assignment -> ID [ expression ] = . expression ;
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    ;               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 137
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 130

    (62) condition -> IF ( expression ) block . elses ;
    (65) elses -> . empty
    (66) elses -> . ELSE block
    (67) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 140
    ELSEIF          shift and go to state 141
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 138
    empty                          shift and go to state 139

state 131

    (63) cycle -> WHILE ( expression ) block . ;

    ;               shift and go to state 142


state 132

    (64) special -> SPECIAL_ID ( expressions ) ; .

    }               reduce using rule 64 (special -> SPECIAL_ID ( expressions ) ; .)


state 133

    (44) function -> FUN return_type ID ( parameters ) { . variable_declaration statutes } ;
    (3) variable_declaration -> . variables variable_declaration
    (4) variable_declaration -> . empty
    (5) variables -> . type ids ;
    (2) empty -> .
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    variable_declaration           shift and go to state 143
    variables                      shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 134

    (68) parameters -> type ID other_parameters .

    )               reduce using rule 68 (parameters -> type ID other_parameters .)


state 135

    (69) other_parameters -> , . parameters
    (68) parameters -> . type ID other_parameters
    (47) type -> . INT
    (48) type -> . DEC
    (49) type -> . CHAR
    (50) type -> . STR
    (51) type -> . BOOL

    INT             shift and go to state 9
    DEC             shift and go to state 10
    CHAR            shift and go to state 11
    STR             shift and go to state 12
    BOOL            shift and go to state 13

    parameters                     shift and go to state 144
    type                           shift and go to state 103

state 136

    (70) other_parameters -> empty .

    )               reduce using rule 70 (other_parameters -> empty .)


state 137

    (61) assignment -> ID [ expression ] = expression . ;

    ;               shift and go to state 145


state 138

    (62) condition -> IF ( expression ) block elses . ;

    ;               shift and go to state 146


state 139

    (65) elses -> empty .

    ;               reduce using rule 65 (elses -> empty .)


state 140

    (66) elses -> ELSE . block
    (74) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 147

state 141

    (67) elses -> ELSEIF . ( expression ) block elses

    (               shift and go to state 148


state 142

    (63) cycle -> WHILE ( expression ) block ; .

    }               reduce using rule 63 (cycle -> WHILE ( expression ) block ; .)


state 143

    (44) function -> FUN return_type ID ( parameters ) { variable_declaration . statutes } ;
    (52) statutes -> . call
    (53) statutes -> . assignment
    (54) statutes -> . condition
    (55) statutes -> . cycle
    (56) statutes -> . special
    (57) call -> . ID ( expressions ) ;
    (60) assignment -> . ID = expression ;
    (61) assignment -> . ID [ expression ] = expression ;
    (62) condition -> . IF ( expression ) block elses ;
    (63) cycle -> . WHILE ( expression ) block ;
    (64) special -> . SPECIAL_ID ( expressions ) ;

    ID              shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    SPECIAL_ID      shift and go to state 42

    statutes                       shift and go to state 149
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38

state 144

    (69) other_parameters -> , parameters .

    )               reduce using rule 69 (other_parameters -> , parameters .)


state 145

    (61) assignment -> ID [ expression ] = expression ; .

    }               reduce using rule 61 (assignment -> ID [ expression ] = expression ; .)


state 146

    (62) condition -> IF ( expression ) block elses ; .

    }               reduce using rule 62 (condition -> IF ( expression ) block elses ; .)


state 147

    (66) elses -> ELSE block .

    ;               reduce using rule 66 (elses -> ELSE block .)


state 148

    (67) elses -> ELSEIF ( . expression ) block elses
    (11) expression -> . level1
    (12) expression -> . level1 EXPONENTIATION level1
    (13) level1 -> . level2
    (14) level1 -> . + level2
    (15) level1 -> . - level2
    (16) level2 -> . level3
    (17) level2 -> . level3 OR level3
    (18) level2 -> . level3 AND level3
    (19) level3 -> . level4
    (20) level3 -> . level4 < level4
    (21) level3 -> . level4 > level4
    (22) level3 -> . level4 LESS_EQUAL_THAN level4
    (23) level3 -> . level4 GREATER_EQUAL_THAN level4
    (24) level3 -> . level4 EQUALS level4
    (25) level4 -> . level5
    (26) level4 -> . level5 + level5
    (27) level4 -> . level5 - level5
    (28) level5 -> . level6
    (29) level5 -> . level6 * level6
    (30) level5 -> . level6 / level6
    (31) level5 -> . level6 MOD level6
    (32) level5 -> .
    (33) level6 -> . ( expression )
    (34) level6 -> . const
    (35) level6 -> . NOT const
    (36) level6 -> . INCREMENT const
    (37) level6 -> . DECREMENT const
    (38) level6 -> . call
    (39) level6 -> . NOT call
    (40) level6 -> . INCREMENT call
    (41) level6 -> . DECREMENT call
    (71) const -> . id
    (72) const -> . INT
    (73) const -> . DEC
    (57) call -> . ID ( expressions ) ;
    (9) id -> . ID
    (10) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 49
    -               shift and go to state 50
    <               reduce using rule 32 (level5 -> .)
    >               reduce using rule 32 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> .)
    EQUALS          reduce using rule 32 (level5 -> .)
    OR              reduce using rule 32 (level5 -> .)
    AND             reduce using rule 32 (level5 -> .)
    EXPONENTIATION  reduce using rule 32 (level5 -> .)
    )               reduce using rule 32 (level5 -> .)
    (               shift and go to state 55
    NOT             shift and go to state 57
    INCREMENT       shift and go to state 58
    DECREMENT       shift and go to state 59
    INT             shift and go to state 62
    DEC             shift and go to state 63
    ID              shift and go to state 45

  ! +               [ reduce using rule 32 (level5 -> .) ]
  ! -               [ reduce using rule 32 (level5 -> .) ]

    expression                     shift and go to state 150
    level1                         shift and go to state 47
    level2                         shift and go to state 48
    level3                         shift and go to state 51
    level4                         shift and go to state 52
    level5                         shift and go to state 53
    level6                         shift and go to state 54
    const                          shift and go to state 56
    call                           shift and go to state 60
    id                             shift and go to state 61

state 149

    (44) function -> FUN return_type ID ( parameters ) { variable_declaration statutes . } ;

    }               shift and go to state 151


state 150

    (67) elses -> ELSEIF ( expression . ) block elses

    )               shift and go to state 152


state 151

    (44) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } . ;

    ;               shift and go to state 153


state 152

    (67) elses -> ELSEIF ( expression ) . block elses
    (74) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 154

state 153

    (44) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .

    FUN             reduce using rule 44 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)
    {               reduce using rule 44 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)


state 154

    (67) elses -> ELSEIF ( expression ) block . elses
    (65) elses -> . empty
    (66) elses -> . ELSE block
    (67) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 140
    ELSEIF          shift and go to state 141
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 155
    empty                          shift and go to state 139

state 155

    (67) elses -> ELSEIF ( expression ) block elses .

    ;               reduce using rule 67 (elses -> ELSEIF ( expression ) block elses .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 32 resolved as shift
WARNING: shift/reduce conflict for - in state 32 resolved as shift
WARNING: shift/reduce conflict for + in state 55 resolved as shift
WARNING: shift/reduce conflict for - in state 55 resolved as shift
WARNING: shift/reduce conflict for + in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 65 resolved as shift
WARNING: shift/reduce conflict for + in state 66 resolved as shift
WARNING: shift/reduce conflict for - in state 66 resolved as shift
WARNING: shift/reduce conflict for + in state 67 resolved as shift
WARNING: shift/reduce conflict for - in state 67 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 73 resolved as shift
WARNING: shift/reduce conflict for - in state 73 resolved as shift
WARNING: shift/reduce conflict for + in state 119 resolved as shift
WARNING: shift/reduce conflict for - in state 119 resolved as shift
WARNING: shift/reduce conflict for + in state 129 resolved as shift
WARNING: shift/reduce conflict for - in state 129 resolved as shift
WARNING: shift/reduce conflict for + in state 148 resolved as shift
WARNING: shift/reduce conflict for - in state 148 resolved as shift
