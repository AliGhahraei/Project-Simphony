Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; variable_declaration function_declaration block
Rule 2     empty -> <empty>
Rule 3     variable_declaration -> variables other_variable_declarations
Rule 4     other_variable_declarations -> variable_declaration
Rule 5     other_variable_declarations -> empty
Rule 6     variables -> type ids ;
Rule 7     ids -> id other_ids
Rule 8     other_ids -> , ids
Rule 9     other_ids -> empty
Rule 10    id -> ID
Rule 11    id -> ID [ expression ]
Rule 12    expression -> grouping
Rule 13    expression -> const
Rule 14    expression -> call
Rule 15    grouping -> level1
Rule 16    grouping -> level1 EXPONENTIATION level1
Rule 17    level1 -> level2
Rule 18    level1 -> + level2
Rule 19    level1 -> - level2
Rule 20    level2 -> level3
Rule 21    level2 -> level3 OR level3
Rule 22    level2 -> level3 AND level3
Rule 23    level3 -> level4
Rule 24    level3 -> level4 < level4
Rule 25    level3 -> level4 > level4
Rule 26    level3 -> level4 LESS_EQUAL_THAN level4
Rule 27    level3 -> level4 GREATER_EQUAL_THAN level4
Rule 28    level3 -> level4 EQUALS level4
Rule 29    level4 -> level5
Rule 30    level4 -> level5 + level5
Rule 31    level4 -> level5 - level5
Rule 32    level5 -> level6
Rule 33    level5 -> level6 * level6
Rule 34    level5 -> level6 / level6
Rule 35    level5 -> level6 MOD level6
Rule 36    level5 -> <empty>
Rule 37    level6 -> ( expression )
Rule 38    level6 -> const
Rule 39    level6 -> NOT const
Rule 40    level6 -> INCREMENT const
Rule 41    level6 -> DECREMENT const
Rule 42    function_declaration -> function other_function_declarations
Rule 43    other_function_declarations -> function_declaration
Rule 44    other_function_declarations -> empty
Rule 45    function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;
Rule 46    return_type -> type
Rule 47    return_type -> VOID
Rule 48    type -> INT
Rule 49    type -> DEC
Rule 50    type -> CHAR
Rule 51    type -> STR
Rule 52    type -> BOOL
Rule 53    statutes -> call
Rule 54    statutes -> assignment
Rule 55    statutes -> condition
Rule 56    statutes -> cycle
Rule 57    statutes -> special
Rule 58    call -> ID ( expressions )
Rule 59    expressions -> expression
Rule 60    expressions -> expression , expressions
Rule 61    assignment -> ID = expression ;
Rule 62    assignment -> ID [ expression ] = expression ;
Rule 63    condition -> IF [ expression ] block elses ;
Rule 64    cycle -> WHILE ( expression ) block ;
Rule 65    special -> SPECIAL_ID ( expressions )
Rule 66    elses -> empty
Rule 67    elses -> ELSE block
Rule 68    elses -> ELSEIF ( expression ) block elses
Rule 69    parameters -> type ID other_parameters
Rule 70    other_parameters -> , parameters
Rule 71    other_parameters -> empty
Rule 72    const -> id
Rule 73    const -> INT
Rule 74    const -> DEC
Rule 75    block -> { statutes }

Terminals, with rules where they appear

(                    : 37 45 58 64 65 68
)                    : 37 45 58 64 65 68
*                    : 33
+                    : 18 30
,                    : 8 60 70
-                    : 19 31
/                    : 34
;                    : 1 6 45 61 62 63 64
<                    : 24
=                    : 61 62
>                    : 25
AND                  : 22
BOOL                 : 52
CHAR                 : 50
DEC                  : 49 74
DECREMENT            : 41
ELSE                 : 67
ELSEIF               : 68
EQUALS               : 28
EXPONENTIATION       : 16
FUN                  : 45
GREATER_EQUAL_THAN   : 27
ID                   : 1 10 11 45 58 61 62 69
IF                   : 63
INCREMENT            : 40
INT                  : 48 73
LESS_EQUAL_THAN      : 26
MOD                  : 35
NOT                  : 39
OR                   : 21
PROGRAM              : 1
SPECIAL_ID           : 65
STR                  : 51
VOID                 : 47
WHILE                : 64
[                    : 11 62 63
]                    : 11 62 63
error                : 
{                    : 45 75
}                    : 45 75

Nonterminals, with rules where they appear

assignment           : 54
block                : 1 63 64 67 68
call                 : 14 53
condition            : 55
const                : 13 38 39 40 41
cycle                : 56
elses                : 63 68
empty                : 5 9 44 66 71
expression           : 11 37 59 60 61 62 62 63 64 68
expressions          : 58 60 65
function             : 42
function_declaration : 1 43
grouping             : 12
id                   : 7 72
ids                  : 6 8
level1               : 15 16 16
level2               : 17 18 19
level3               : 20 21 21 22 22
level4               : 23 24 24 25 25 26 26 27 27 28 28
level5               : 29 30 30 31 31
level6               : 32 33 33 34 34 35 35
other_function_declarations : 42
other_ids            : 7
other_parameters     : 69
other_variable_declarations : 3
parameters           : 45 70
program              : 0
return_type          : 45
special              : 57
statutes             : 45 75
type                 : 6 46 69
variable_declaration : 1 4 45
variables            : 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; variable_declaration function_declaration block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; variable_declaration function_declaration block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; variable_declaration function_declaration block

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . variable_declaration function_declaration block
    (3) variable_declaration -> . variables other_variable_declarations
    (6) variables -> . type ids ;
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    variable_declaration           shift and go to state 5
    variables                      shift and go to state 6
    type                           shift and go to state 7

state 5

    (1) program -> PROGRAM ID ; variable_declaration . function_declaration block
    (42) function_declaration -> . function other_function_declarations
    (45) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;

    FUN             shift and go to state 15

    function_declaration           shift and go to state 13
    function                       shift and go to state 14

state 6

    (3) variable_declaration -> variables . other_variable_declarations
    (4) other_variable_declarations -> . variable_declaration
    (5) other_variable_declarations -> . empty
    (3) variable_declaration -> . variables other_variable_declarations
    (2) empty -> .
    (6) variables -> . type ids ;
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    FUN             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    variables                      shift and go to state 6
    other_variable_declarations    shift and go to state 16
    variable_declaration           shift and go to state 17
    empty                          shift and go to state 18
    type                           shift and go to state 7

state 7

    (6) variables -> type . ids ;
    (7) ids -> . id other_ids
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    ID              shift and go to state 21

    ids                            shift and go to state 19
    id                             shift and go to state 20

state 8

    (48) type -> INT .

    ID              reduce using rule 48 (type -> INT .)


state 9

    (49) type -> DEC .

    ID              reduce using rule 49 (type -> DEC .)


state 10

    (50) type -> CHAR .

    ID              reduce using rule 50 (type -> CHAR .)


state 11

    (51) type -> STR .

    ID              reduce using rule 51 (type -> STR .)


state 12

    (52) type -> BOOL .

    ID              reduce using rule 52 (type -> BOOL .)


state 13

    (1) program -> PROGRAM ID ; variable_declaration function_declaration . block
    (75) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 22

state 14

    (42) function_declaration -> function . other_function_declarations
    (43) other_function_declarations -> . function_declaration
    (44) other_function_declarations -> . empty
    (42) function_declaration -> . function other_function_declarations
    (2) empty -> .
    (45) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;

    {               reduce using rule 2 (empty -> .)
    FUN             shift and go to state 15

    function                       shift and go to state 14
    other_function_declarations    shift and go to state 24
    function_declaration           shift and go to state 25
    empty                          shift and go to state 26

state 15

    (45) function -> FUN . return_type ID ( parameters ) { variable_declaration statutes } ;
    (46) return_type -> . type
    (47) return_type -> . VOID
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    VOID            shift and go to state 29
    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    return_type                    shift and go to state 27
    type                           shift and go to state 28

state 16

    (3) variable_declaration -> variables other_variable_declarations .

    FUN             reduce using rule 3 (variable_declaration -> variables other_variable_declarations .)
    ID              reduce using rule 3 (variable_declaration -> variables other_variable_declarations .)
    IF              reduce using rule 3 (variable_declaration -> variables other_variable_declarations .)
    WHILE           reduce using rule 3 (variable_declaration -> variables other_variable_declarations .)
    SPECIAL_ID      reduce using rule 3 (variable_declaration -> variables other_variable_declarations .)


state 17

    (4) other_variable_declarations -> variable_declaration .

    FUN             reduce using rule 4 (other_variable_declarations -> variable_declaration .)
    ID              reduce using rule 4 (other_variable_declarations -> variable_declaration .)
    IF              reduce using rule 4 (other_variable_declarations -> variable_declaration .)
    WHILE           reduce using rule 4 (other_variable_declarations -> variable_declaration .)
    SPECIAL_ID      reduce using rule 4 (other_variable_declarations -> variable_declaration .)


state 18

    (5) other_variable_declarations -> empty .

    FUN             reduce using rule 5 (other_variable_declarations -> empty .)
    ID              reduce using rule 5 (other_variable_declarations -> empty .)
    IF              reduce using rule 5 (other_variable_declarations -> empty .)
    WHILE           reduce using rule 5 (other_variable_declarations -> empty .)
    SPECIAL_ID      reduce using rule 5 (other_variable_declarations -> empty .)


state 19

    (6) variables -> type ids . ;

    ;               shift and go to state 30


state 20

    (7) ids -> id . other_ids
    (8) other_ids -> . , ids
    (9) other_ids -> . empty
    (2) empty -> .

    ,               shift and go to state 32
    ;               reduce using rule 2 (empty -> .)

    other_ids                      shift and go to state 31
    empty                          shift and go to state 33

state 21

    (10) id -> ID .
    (11) id -> ID . [ expression ]

    ,               reduce using rule 10 (id -> ID .)
    ;               reduce using rule 10 (id -> ID .)
    *               reduce using rule 10 (id -> ID .)
    /               reduce using rule 10 (id -> ID .)
    MOD             reduce using rule 10 (id -> ID .)
    +               reduce using rule 10 (id -> ID .)
    -               reduce using rule 10 (id -> ID .)
    <               reduce using rule 10 (id -> ID .)
    >               reduce using rule 10 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 10 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 10 (id -> ID .)
    EQUALS          reduce using rule 10 (id -> ID .)
    OR              reduce using rule 10 (id -> ID .)
    AND             reduce using rule 10 (id -> ID .)
    EXPONENTIATION  reduce using rule 10 (id -> ID .)
    ]               reduce using rule 10 (id -> ID .)
    )               reduce using rule 10 (id -> ID .)
    [               shift and go to state 34


state 22

    (1) program -> PROGRAM ID ; variable_declaration function_declaration block .

    $end            reduce using rule 1 (program -> PROGRAM ID ; variable_declaration function_declaration block .)


state 23

    (75) block -> { . statutes }
    (53) statutes -> . call
    (54) statutes -> . assignment
    (55) statutes -> . condition
    (56) statutes -> . cycle
    (57) statutes -> . special
    (58) call -> . ID ( expressions )
    (61) assignment -> . ID = expression ;
    (62) assignment -> . ID [ expression ] = expression ;
    (63) condition -> . IF [ expression ] block elses ;
    (64) cycle -> . WHILE ( expression ) block ;
    (65) special -> . SPECIAL_ID ( expressions )

    ID              shift and go to state 41
    IF              shift and go to state 42
    WHILE           shift and go to state 43
    SPECIAL_ID      shift and go to state 44

    statutes                       shift and go to state 35
    call                           shift and go to state 36
    assignment                     shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    special                        shift and go to state 40

state 24

    (42) function_declaration -> function other_function_declarations .

    {               reduce using rule 42 (function_declaration -> function other_function_declarations .)


state 25

    (43) other_function_declarations -> function_declaration .

    {               reduce using rule 43 (other_function_declarations -> function_declaration .)


state 26

    (44) other_function_declarations -> empty .

    {               reduce using rule 44 (other_function_declarations -> empty .)


state 27

    (45) function -> FUN return_type . ID ( parameters ) { variable_declaration statutes } ;

    ID              shift and go to state 45


state 28

    (46) return_type -> type .

    ID              reduce using rule 46 (return_type -> type .)


state 29

    (47) return_type -> VOID .

    ID              reduce using rule 47 (return_type -> VOID .)


state 30

    (6) variables -> type ids ; .

    INT             reduce using rule 6 (variables -> type ids ; .)
    DEC             reduce using rule 6 (variables -> type ids ; .)
    CHAR            reduce using rule 6 (variables -> type ids ; .)
    STR             reduce using rule 6 (variables -> type ids ; .)
    BOOL            reduce using rule 6 (variables -> type ids ; .)
    FUN             reduce using rule 6 (variables -> type ids ; .)
    ID              reduce using rule 6 (variables -> type ids ; .)
    IF              reduce using rule 6 (variables -> type ids ; .)
    WHILE           reduce using rule 6 (variables -> type ids ; .)
    SPECIAL_ID      reduce using rule 6 (variables -> type ids ; .)


state 31

    (7) ids -> id other_ids .

    ;               reduce using rule 7 (ids -> id other_ids .)


state 32

    (8) other_ids -> , . ids
    (7) ids -> . id other_ids
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    ID              shift and go to state 21

    ids                            shift and go to state 46
    id                             shift and go to state 20

state 33

    (9) other_ids -> empty .

    ;               reduce using rule 9 (other_ids -> empty .)


state 34

    (11) id -> ID [ . expression ]
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 48
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 35

    (75) block -> { statutes . }

    }               shift and go to state 67


state 36

    (53) statutes -> call .

    }               reduce using rule 53 (statutes -> call .)


state 37

    (54) statutes -> assignment .

    }               reduce using rule 54 (statutes -> assignment .)


state 38

    (55) statutes -> condition .

    }               reduce using rule 55 (statutes -> condition .)


state 39

    (56) statutes -> cycle .

    }               reduce using rule 56 (statutes -> cycle .)


state 40

    (57) statutes -> special .

    }               reduce using rule 57 (statutes -> special .)


state 41

    (58) call -> ID . ( expressions )
    (61) assignment -> ID . = expression ;
    (62) assignment -> ID . [ expression ] = expression ;

    (               shift and go to state 68
    =               shift and go to state 69
    [               shift and go to state 70


state 42

    (63) condition -> IF . [ expression ] block elses ;

    [               shift and go to state 71


state 43

    (64) cycle -> WHILE . ( expression ) block ;

    (               shift and go to state 72


state 44

    (65) special -> SPECIAL_ID . ( expressions )

    (               shift and go to state 73


state 45

    (45) function -> FUN return_type ID . ( parameters ) { variable_declaration statutes } ;

    (               shift and go to state 74


state 46

    (8) other_ids -> , ids .

    ;               reduce using rule 8 (other_ids -> , ids .)


state 47

    (58) call -> ID . ( expressions )
    (10) id -> ID .
    (11) id -> ID . [ expression ]

    (               shift and go to state 68
    ]               reduce using rule 10 (id -> ID .)
    *               reduce using rule 10 (id -> ID .)
    /               reduce using rule 10 (id -> ID .)
    MOD             reduce using rule 10 (id -> ID .)
    +               reduce using rule 10 (id -> ID .)
    -               reduce using rule 10 (id -> ID .)
    <               reduce using rule 10 (id -> ID .)
    >               reduce using rule 10 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 10 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 10 (id -> ID .)
    EQUALS          reduce using rule 10 (id -> ID .)
    OR              reduce using rule 10 (id -> ID .)
    AND             reduce using rule 10 (id -> ID .)
    EXPONENTIATION  reduce using rule 10 (id -> ID .)
    )               reduce using rule 10 (id -> ID .)
    ,               reduce using rule 10 (id -> ID .)
    ;               reduce using rule 10 (id -> ID .)
    [               shift and go to state 34


state 48

    (11) id -> ID [ expression . ]

    ]               shift and go to state 75


state 49

    (12) expression -> grouping .

    ]               reduce using rule 12 (expression -> grouping .)
    )               reduce using rule 12 (expression -> grouping .)
    ,               reduce using rule 12 (expression -> grouping .)
    ;               reduce using rule 12 (expression -> grouping .)


state 50

    (13) expression -> const .
    (38) level6 -> const .

  ! reduce/reduce conflict for ] resolved using rule 13 (expression -> const .)
  ! reduce/reduce conflict for ) resolved using rule 13 (expression -> const .)
  ! reduce/reduce conflict for , resolved using rule 13 (expression -> const .)
  ! reduce/reduce conflict for ; resolved using rule 13 (expression -> const .)
    ]               reduce using rule 13 (expression -> const .)
    )               reduce using rule 13 (expression -> const .)
    ,               reduce using rule 13 (expression -> const .)
    ;               reduce using rule 13 (expression -> const .)
    *               reduce using rule 38 (level6 -> const .)
    /               reduce using rule 38 (level6 -> const .)
    MOD             reduce using rule 38 (level6 -> const .)
    +               reduce using rule 38 (level6 -> const .)
    -               reduce using rule 38 (level6 -> const .)
    <               reduce using rule 38 (level6 -> const .)
    >               reduce using rule 38 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 38 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 38 (level6 -> const .)
    EQUALS          reduce using rule 38 (level6 -> const .)
    OR              reduce using rule 38 (level6 -> const .)
    AND             reduce using rule 38 (level6 -> const .)
    EXPONENTIATION  reduce using rule 38 (level6 -> const .)

  ! ]               [ reduce using rule 38 (level6 -> const .) ]
  ! )               [ reduce using rule 38 (level6 -> const .) ]
  ! ,               [ reduce using rule 38 (level6 -> const .) ]
  ! ;               [ reduce using rule 38 (level6 -> const .) ]


state 51

    (14) expression -> call .

    ]               reduce using rule 14 (expression -> call .)
    )               reduce using rule 14 (expression -> call .)
    ,               reduce using rule 14 (expression -> call .)
    ;               reduce using rule 14 (expression -> call .)


state 52

    (15) grouping -> level1 .
    (16) grouping -> level1 . EXPONENTIATION level1

    ]               reduce using rule 15 (grouping -> level1 .)
    )               reduce using rule 15 (grouping -> level1 .)
    ,               reduce using rule 15 (grouping -> level1 .)
    ;               reduce using rule 15 (grouping -> level1 .)
    EXPONENTIATION  shift and go to state 76


state 53

    (72) const -> id .

    ]               reduce using rule 72 (const -> id .)
    *               reduce using rule 72 (const -> id .)
    /               reduce using rule 72 (const -> id .)
    MOD             reduce using rule 72 (const -> id .)
    +               reduce using rule 72 (const -> id .)
    -               reduce using rule 72 (const -> id .)
    <               reduce using rule 72 (const -> id .)
    >               reduce using rule 72 (const -> id .)
    LESS_EQUAL_THAN reduce using rule 72 (const -> id .)
    GREATER_EQUAL_THAN reduce using rule 72 (const -> id .)
    EQUALS          reduce using rule 72 (const -> id .)
    OR              reduce using rule 72 (const -> id .)
    AND             reduce using rule 72 (const -> id .)
    EXPONENTIATION  reduce using rule 72 (const -> id .)
    )               reduce using rule 72 (const -> id .)
    ,               reduce using rule 72 (const -> id .)
    ;               reduce using rule 72 (const -> id .)


state 54

    (73) const -> INT .

    ]               reduce using rule 73 (const -> INT .)
    *               reduce using rule 73 (const -> INT .)
    /               reduce using rule 73 (const -> INT .)
    MOD             reduce using rule 73 (const -> INT .)
    +               reduce using rule 73 (const -> INT .)
    -               reduce using rule 73 (const -> INT .)
    <               reduce using rule 73 (const -> INT .)
    >               reduce using rule 73 (const -> INT .)
    LESS_EQUAL_THAN reduce using rule 73 (const -> INT .)
    GREATER_EQUAL_THAN reduce using rule 73 (const -> INT .)
    EQUALS          reduce using rule 73 (const -> INT .)
    OR              reduce using rule 73 (const -> INT .)
    AND             reduce using rule 73 (const -> INT .)
    EXPONENTIATION  reduce using rule 73 (const -> INT .)
    )               reduce using rule 73 (const -> INT .)
    ,               reduce using rule 73 (const -> INT .)
    ;               reduce using rule 73 (const -> INT .)


state 55

    (74) const -> DEC .

    ]               reduce using rule 74 (const -> DEC .)
    *               reduce using rule 74 (const -> DEC .)
    /               reduce using rule 74 (const -> DEC .)
    MOD             reduce using rule 74 (const -> DEC .)
    +               reduce using rule 74 (const -> DEC .)
    -               reduce using rule 74 (const -> DEC .)
    <               reduce using rule 74 (const -> DEC .)
    >               reduce using rule 74 (const -> DEC .)
    LESS_EQUAL_THAN reduce using rule 74 (const -> DEC .)
    GREATER_EQUAL_THAN reduce using rule 74 (const -> DEC .)
    EQUALS          reduce using rule 74 (const -> DEC .)
    OR              reduce using rule 74 (const -> DEC .)
    AND             reduce using rule 74 (const -> DEC .)
    EXPONENTIATION  reduce using rule 74 (const -> DEC .)
    )               reduce using rule 74 (const -> DEC .)
    ,               reduce using rule 74 (const -> DEC .)
    ;               reduce using rule 74 (const -> DEC .)


state 56

    (37) level6 -> ( . expression )
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 77
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 57

    (17) level1 -> level2 .

    EXPONENTIATION  reduce using rule 17 (level1 -> level2 .)
    ]               reduce using rule 17 (level1 -> level2 .)
    )               reduce using rule 17 (level1 -> level2 .)
    ,               reduce using rule 17 (level1 -> level2 .)
    ;               reduce using rule 17 (level1 -> level2 .)


state 58

    (18) level1 -> + . level2
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level2                         shift and go to state 78
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 59

    (19) level1 -> - . level2
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level2                         shift and go to state 80
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 60

    (20) level2 -> level3 .
    (21) level2 -> level3 . OR level3
    (22) level2 -> level3 . AND level3

    EXPONENTIATION  reduce using rule 20 (level2 -> level3 .)
    ]               reduce using rule 20 (level2 -> level3 .)
    )               reduce using rule 20 (level2 -> level3 .)
    ,               reduce using rule 20 (level2 -> level3 .)
    ;               reduce using rule 20 (level2 -> level3 .)
    OR              shift and go to state 81
    AND             shift and go to state 82


state 61

    (23) level3 -> level4 .
    (24) level3 -> level4 . < level4
    (25) level3 -> level4 . > level4
    (26) level3 -> level4 . LESS_EQUAL_THAN level4
    (27) level3 -> level4 . GREATER_EQUAL_THAN level4
    (28) level3 -> level4 . EQUALS level4

    OR              reduce using rule 23 (level3 -> level4 .)
    AND             reduce using rule 23 (level3 -> level4 .)
    EXPONENTIATION  reduce using rule 23 (level3 -> level4 .)
    ]               reduce using rule 23 (level3 -> level4 .)
    )               reduce using rule 23 (level3 -> level4 .)
    ,               reduce using rule 23 (level3 -> level4 .)
    ;               reduce using rule 23 (level3 -> level4 .)
    <               shift and go to state 83
    >               shift and go to state 84
    LESS_EQUAL_THAN shift and go to state 85
    GREATER_EQUAL_THAN shift and go to state 86
    EQUALS          shift and go to state 87


state 62

    (29) level4 -> level5 .
    (30) level4 -> level5 . + level5
    (31) level4 -> level5 . - level5

    <               reduce using rule 29 (level4 -> level5 .)
    >               reduce using rule 29 (level4 -> level5 .)
    LESS_EQUAL_THAN reduce using rule 29 (level4 -> level5 .)
    GREATER_EQUAL_THAN reduce using rule 29 (level4 -> level5 .)
    EQUALS          reduce using rule 29 (level4 -> level5 .)
    OR              reduce using rule 29 (level4 -> level5 .)
    AND             reduce using rule 29 (level4 -> level5 .)
    EXPONENTIATION  reduce using rule 29 (level4 -> level5 .)
    ]               reduce using rule 29 (level4 -> level5 .)
    )               reduce using rule 29 (level4 -> level5 .)
    ,               reduce using rule 29 (level4 -> level5 .)
    ;               reduce using rule 29 (level4 -> level5 .)
    +               shift and go to state 88
    -               shift and go to state 89


state 63

    (32) level5 -> level6 .
    (33) level5 -> level6 . * level6
    (34) level5 -> level6 . / level6
    (35) level5 -> level6 . MOD level6

    +               reduce using rule 32 (level5 -> level6 .)
    -               reduce using rule 32 (level5 -> level6 .)
    <               reduce using rule 32 (level5 -> level6 .)
    >               reduce using rule 32 (level5 -> level6 .)
    LESS_EQUAL_THAN reduce using rule 32 (level5 -> level6 .)
    GREATER_EQUAL_THAN reduce using rule 32 (level5 -> level6 .)
    EQUALS          reduce using rule 32 (level5 -> level6 .)
    OR              reduce using rule 32 (level5 -> level6 .)
    AND             reduce using rule 32 (level5 -> level6 .)
    EXPONENTIATION  reduce using rule 32 (level5 -> level6 .)
    ]               reduce using rule 32 (level5 -> level6 .)
    )               reduce using rule 32 (level5 -> level6 .)
    ,               reduce using rule 32 (level5 -> level6 .)
    ;               reduce using rule 32 (level5 -> level6 .)
    *               shift and go to state 90
    /               shift and go to state 91
    MOD             shift and go to state 92


state 64

    (39) level6 -> NOT . const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    const                          shift and go to state 93
    id                             shift and go to state 53

state 65

    (40) level6 -> INCREMENT . const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    const                          shift and go to state 94
    id                             shift and go to state 53

state 66

    (41) level6 -> DECREMENT . const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    const                          shift and go to state 95
    id                             shift and go to state 53

state 67

    (75) block -> { statutes } .

    $end            reduce using rule 75 (block -> { statutes } .)
    ELSE            reduce using rule 75 (block -> { statutes } .)
    ELSEIF          reduce using rule 75 (block -> { statutes } .)
    ;               reduce using rule 75 (block -> { statutes } .)


state 68

    (58) call -> ID ( . expressions )
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expressions                    shift and go to state 96
    expression                     shift and go to state 97
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 69

    (61) assignment -> ID = . expression ;
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 98
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 70

    (62) assignment -> ID [ . expression ] = expression ;
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 99
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 71

    (63) condition -> IF [ . expression ] block elses ;
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 100
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 72

    (64) cycle -> WHILE ( . expression ) block ;
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 101
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 73

    (65) special -> SPECIAL_ID ( . expressions )
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expressions                    shift and go to state 102
    expression                     shift and go to state 97
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 74

    (45) function -> FUN return_type ID ( . parameters ) { variable_declaration statutes } ;
    (69) parameters -> . type ID other_parameters
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 103
    type                           shift and go to state 104

state 75

    (11) id -> ID [ expression ] .

    ,               reduce using rule 11 (id -> ID [ expression ] .)
    ;               reduce using rule 11 (id -> ID [ expression ] .)
    ]               reduce using rule 11 (id -> ID [ expression ] .)
    *               reduce using rule 11 (id -> ID [ expression ] .)
    /               reduce using rule 11 (id -> ID [ expression ] .)
    MOD             reduce using rule 11 (id -> ID [ expression ] .)
    +               reduce using rule 11 (id -> ID [ expression ] .)
    -               reduce using rule 11 (id -> ID [ expression ] .)
    <               reduce using rule 11 (id -> ID [ expression ] .)
    >               reduce using rule 11 (id -> ID [ expression ] .)
    LESS_EQUAL_THAN reduce using rule 11 (id -> ID [ expression ] .)
    GREATER_EQUAL_THAN reduce using rule 11 (id -> ID [ expression ] .)
    EQUALS          reduce using rule 11 (id -> ID [ expression ] .)
    OR              reduce using rule 11 (id -> ID [ expression ] .)
    AND             reduce using rule 11 (id -> ID [ expression ] .)
    EXPONENTIATION  reduce using rule 11 (id -> ID [ expression ] .)
    )               reduce using rule 11 (id -> ID [ expression ] .)


state 76

    (16) grouping -> level1 EXPONENTIATION . level1
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    level1                         shift and go to state 105
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 77

    (37) level6 -> ( expression . )

    )               shift and go to state 106


state 78

    (18) level1 -> + level2 .

    EXPONENTIATION  reduce using rule 18 (level1 -> + level2 .)
    ]               reduce using rule 18 (level1 -> + level2 .)
    )               reduce using rule 18 (level1 -> + level2 .)
    ,               reduce using rule 18 (level1 -> + level2 .)
    ;               reduce using rule 18 (level1 -> + level2 .)


state 79

    (38) level6 -> const .

    *               reduce using rule 38 (level6 -> const .)
    /               reduce using rule 38 (level6 -> const .)
    MOD             reduce using rule 38 (level6 -> const .)
    +               reduce using rule 38 (level6 -> const .)
    -               reduce using rule 38 (level6 -> const .)
    <               reduce using rule 38 (level6 -> const .)
    >               reduce using rule 38 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 38 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 38 (level6 -> const .)
    EQUALS          reduce using rule 38 (level6 -> const .)
    OR              reduce using rule 38 (level6 -> const .)
    AND             reduce using rule 38 (level6 -> const .)
    EXPONENTIATION  reduce using rule 38 (level6 -> const .)
    ]               reduce using rule 38 (level6 -> const .)
    )               reduce using rule 38 (level6 -> const .)
    ,               reduce using rule 38 (level6 -> const .)
    ;               reduce using rule 38 (level6 -> const .)


state 80

    (19) level1 -> - level2 .

    EXPONENTIATION  reduce using rule 19 (level1 -> - level2 .)
    ]               reduce using rule 19 (level1 -> - level2 .)
    )               reduce using rule 19 (level1 -> - level2 .)
    ,               reduce using rule 19 (level1 -> - level2 .)
    ;               reduce using rule 19 (level1 -> - level2 .)


state 81

    (21) level2 -> level3 OR . level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level3                         shift and go to state 107
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 82

    (22) level2 -> level3 AND . level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level3                         shift and go to state 108
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 83

    (24) level3 -> level4 < . level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level4                         shift and go to state 109
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 84

    (25) level3 -> level4 > . level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level4                         shift and go to state 110
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 85

    (26) level3 -> level4 LESS_EQUAL_THAN . level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level4                         shift and go to state 111
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 86

    (27) level3 -> level4 GREATER_EQUAL_THAN . level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level4                         shift and go to state 112
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 87

    (28) level3 -> level4 EQUALS . level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    +               reduce using rule 36 (level5 -> .)
    -               reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level4                         shift and go to state 113
    level5                         shift and go to state 62
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 88

    (30) level4 -> level5 + . level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level5                         shift and go to state 114
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 89

    (31) level4 -> level5 - . level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ]               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level5                         shift and go to state 115
    level6                         shift and go to state 63
    const                          shift and go to state 79
    id                             shift and go to state 53

state 90

    (33) level5 -> level6 * . level6
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level6                         shift and go to state 116
    const                          shift and go to state 79
    id                             shift and go to state 53

state 91

    (34) level5 -> level6 / . level6
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level6                         shift and go to state 117
    const                          shift and go to state 79
    id                             shift and go to state 53

state 92

    (35) level5 -> level6 MOD . level6
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (10) id -> . ID
    (11) id -> . ID [ expression ]

    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 21

    level6                         shift and go to state 118
    const                          shift and go to state 79
    id                             shift and go to state 53

state 93

    (39) level6 -> NOT const .

    *               reduce using rule 39 (level6 -> NOT const .)
    /               reduce using rule 39 (level6 -> NOT const .)
    MOD             reduce using rule 39 (level6 -> NOT const .)
    +               reduce using rule 39 (level6 -> NOT const .)
    -               reduce using rule 39 (level6 -> NOT const .)
    <               reduce using rule 39 (level6 -> NOT const .)
    >               reduce using rule 39 (level6 -> NOT const .)
    LESS_EQUAL_THAN reduce using rule 39 (level6 -> NOT const .)
    GREATER_EQUAL_THAN reduce using rule 39 (level6 -> NOT const .)
    EQUALS          reduce using rule 39 (level6 -> NOT const .)
    OR              reduce using rule 39 (level6 -> NOT const .)
    AND             reduce using rule 39 (level6 -> NOT const .)
    EXPONENTIATION  reduce using rule 39 (level6 -> NOT const .)
    ]               reduce using rule 39 (level6 -> NOT const .)
    )               reduce using rule 39 (level6 -> NOT const .)
    ,               reduce using rule 39 (level6 -> NOT const .)
    ;               reduce using rule 39 (level6 -> NOT const .)


state 94

    (40) level6 -> INCREMENT const .

    *               reduce using rule 40 (level6 -> INCREMENT const .)
    /               reduce using rule 40 (level6 -> INCREMENT const .)
    MOD             reduce using rule 40 (level6 -> INCREMENT const .)
    +               reduce using rule 40 (level6 -> INCREMENT const .)
    -               reduce using rule 40 (level6 -> INCREMENT const .)
    <               reduce using rule 40 (level6 -> INCREMENT const .)
    >               reduce using rule 40 (level6 -> INCREMENT const .)
    LESS_EQUAL_THAN reduce using rule 40 (level6 -> INCREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 40 (level6 -> INCREMENT const .)
    EQUALS          reduce using rule 40 (level6 -> INCREMENT const .)
    OR              reduce using rule 40 (level6 -> INCREMENT const .)
    AND             reduce using rule 40 (level6 -> INCREMENT const .)
    EXPONENTIATION  reduce using rule 40 (level6 -> INCREMENT const .)
    ]               reduce using rule 40 (level6 -> INCREMENT const .)
    )               reduce using rule 40 (level6 -> INCREMENT const .)
    ,               reduce using rule 40 (level6 -> INCREMENT const .)
    ;               reduce using rule 40 (level6 -> INCREMENT const .)


state 95

    (41) level6 -> DECREMENT const .

    *               reduce using rule 41 (level6 -> DECREMENT const .)
    /               reduce using rule 41 (level6 -> DECREMENT const .)
    MOD             reduce using rule 41 (level6 -> DECREMENT const .)
    +               reduce using rule 41 (level6 -> DECREMENT const .)
    -               reduce using rule 41 (level6 -> DECREMENT const .)
    <               reduce using rule 41 (level6 -> DECREMENT const .)
    >               reduce using rule 41 (level6 -> DECREMENT const .)
    LESS_EQUAL_THAN reduce using rule 41 (level6 -> DECREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 41 (level6 -> DECREMENT const .)
    EQUALS          reduce using rule 41 (level6 -> DECREMENT const .)
    OR              reduce using rule 41 (level6 -> DECREMENT const .)
    AND             reduce using rule 41 (level6 -> DECREMENT const .)
    EXPONENTIATION  reduce using rule 41 (level6 -> DECREMENT const .)
    ]               reduce using rule 41 (level6 -> DECREMENT const .)
    )               reduce using rule 41 (level6 -> DECREMENT const .)
    ,               reduce using rule 41 (level6 -> DECREMENT const .)
    ;               reduce using rule 41 (level6 -> DECREMENT const .)


state 96

    (58) call -> ID ( expressions . )

    )               shift and go to state 119


state 97

    (59) expressions -> expression .
    (60) expressions -> expression . , expressions

    )               reduce using rule 59 (expressions -> expression .)
    ,               shift and go to state 120


state 98

    (61) assignment -> ID = expression . ;

    ;               shift and go to state 121


state 99

    (62) assignment -> ID [ expression . ] = expression ;

    ]               shift and go to state 122


state 100

    (63) condition -> IF [ expression . ] block elses ;

    ]               shift and go to state 123


state 101

    (64) cycle -> WHILE ( expression . ) block ;

    )               shift and go to state 124


state 102

    (65) special -> SPECIAL_ID ( expressions . )

    )               shift and go to state 125


state 103

    (45) function -> FUN return_type ID ( parameters . ) { variable_declaration statutes } ;

    )               shift and go to state 126


state 104

    (69) parameters -> type . ID other_parameters

    ID              shift and go to state 127


state 105

    (16) grouping -> level1 EXPONENTIATION level1 .

    ]               reduce using rule 16 (grouping -> level1 EXPONENTIATION level1 .)
    )               reduce using rule 16 (grouping -> level1 EXPONENTIATION level1 .)
    ,               reduce using rule 16 (grouping -> level1 EXPONENTIATION level1 .)
    ;               reduce using rule 16 (grouping -> level1 EXPONENTIATION level1 .)


state 106

    (37) level6 -> ( expression ) .

    *               reduce using rule 37 (level6 -> ( expression ) .)
    /               reduce using rule 37 (level6 -> ( expression ) .)
    MOD             reduce using rule 37 (level6 -> ( expression ) .)
    +               reduce using rule 37 (level6 -> ( expression ) .)
    -               reduce using rule 37 (level6 -> ( expression ) .)
    <               reduce using rule 37 (level6 -> ( expression ) .)
    >               reduce using rule 37 (level6 -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 37 (level6 -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 37 (level6 -> ( expression ) .)
    EQUALS          reduce using rule 37 (level6 -> ( expression ) .)
    OR              reduce using rule 37 (level6 -> ( expression ) .)
    AND             reduce using rule 37 (level6 -> ( expression ) .)
    EXPONENTIATION  reduce using rule 37 (level6 -> ( expression ) .)
    ]               reduce using rule 37 (level6 -> ( expression ) .)
    )               reduce using rule 37 (level6 -> ( expression ) .)
    ,               reduce using rule 37 (level6 -> ( expression ) .)
    ;               reduce using rule 37 (level6 -> ( expression ) .)


state 107

    (21) level2 -> level3 OR level3 .

    EXPONENTIATION  reduce using rule 21 (level2 -> level3 OR level3 .)
    ]               reduce using rule 21 (level2 -> level3 OR level3 .)
    )               reduce using rule 21 (level2 -> level3 OR level3 .)
    ,               reduce using rule 21 (level2 -> level3 OR level3 .)
    ;               reduce using rule 21 (level2 -> level3 OR level3 .)


state 108

    (22) level2 -> level3 AND level3 .

    EXPONENTIATION  reduce using rule 22 (level2 -> level3 AND level3 .)
    ]               reduce using rule 22 (level2 -> level3 AND level3 .)
    )               reduce using rule 22 (level2 -> level3 AND level3 .)
    ,               reduce using rule 22 (level2 -> level3 AND level3 .)
    ;               reduce using rule 22 (level2 -> level3 AND level3 .)


state 109

    (24) level3 -> level4 < level4 .

    OR              reduce using rule 24 (level3 -> level4 < level4 .)
    AND             reduce using rule 24 (level3 -> level4 < level4 .)
    EXPONENTIATION  reduce using rule 24 (level3 -> level4 < level4 .)
    ]               reduce using rule 24 (level3 -> level4 < level4 .)
    )               reduce using rule 24 (level3 -> level4 < level4 .)
    ,               reduce using rule 24 (level3 -> level4 < level4 .)
    ;               reduce using rule 24 (level3 -> level4 < level4 .)


state 110

    (25) level3 -> level4 > level4 .

    OR              reduce using rule 25 (level3 -> level4 > level4 .)
    AND             reduce using rule 25 (level3 -> level4 > level4 .)
    EXPONENTIATION  reduce using rule 25 (level3 -> level4 > level4 .)
    ]               reduce using rule 25 (level3 -> level4 > level4 .)
    )               reduce using rule 25 (level3 -> level4 > level4 .)
    ,               reduce using rule 25 (level3 -> level4 > level4 .)
    ;               reduce using rule 25 (level3 -> level4 > level4 .)


state 111

    (26) level3 -> level4 LESS_EQUAL_THAN level4 .

    OR              reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    AND             reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ]               reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    )               reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ,               reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ;               reduce using rule 26 (level3 -> level4 LESS_EQUAL_THAN level4 .)


state 112

    (27) level3 -> level4 GREATER_EQUAL_THAN level4 .

    OR              reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    AND             reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ]               reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    )               reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ,               reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ;               reduce using rule 27 (level3 -> level4 GREATER_EQUAL_THAN level4 .)


state 113

    (28) level3 -> level4 EQUALS level4 .

    OR              reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    AND             reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    EXPONENTIATION  reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    ]               reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    )               reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    ,               reduce using rule 28 (level3 -> level4 EQUALS level4 .)
    ;               reduce using rule 28 (level3 -> level4 EQUALS level4 .)


state 114

    (30) level4 -> level5 + level5 .

    <               reduce using rule 30 (level4 -> level5 + level5 .)
    >               reduce using rule 30 (level4 -> level5 + level5 .)
    LESS_EQUAL_THAN reduce using rule 30 (level4 -> level5 + level5 .)
    GREATER_EQUAL_THAN reduce using rule 30 (level4 -> level5 + level5 .)
    EQUALS          reduce using rule 30 (level4 -> level5 + level5 .)
    OR              reduce using rule 30 (level4 -> level5 + level5 .)
    AND             reduce using rule 30 (level4 -> level5 + level5 .)
    EXPONENTIATION  reduce using rule 30 (level4 -> level5 + level5 .)
    ]               reduce using rule 30 (level4 -> level5 + level5 .)
    )               reduce using rule 30 (level4 -> level5 + level5 .)
    ,               reduce using rule 30 (level4 -> level5 + level5 .)
    ;               reduce using rule 30 (level4 -> level5 + level5 .)


state 115

    (31) level4 -> level5 - level5 .

    <               reduce using rule 31 (level4 -> level5 - level5 .)
    >               reduce using rule 31 (level4 -> level5 - level5 .)
    LESS_EQUAL_THAN reduce using rule 31 (level4 -> level5 - level5 .)
    GREATER_EQUAL_THAN reduce using rule 31 (level4 -> level5 - level5 .)
    EQUALS          reduce using rule 31 (level4 -> level5 - level5 .)
    OR              reduce using rule 31 (level4 -> level5 - level5 .)
    AND             reduce using rule 31 (level4 -> level5 - level5 .)
    EXPONENTIATION  reduce using rule 31 (level4 -> level5 - level5 .)
    ]               reduce using rule 31 (level4 -> level5 - level5 .)
    )               reduce using rule 31 (level4 -> level5 - level5 .)
    ,               reduce using rule 31 (level4 -> level5 - level5 .)
    ;               reduce using rule 31 (level4 -> level5 - level5 .)


state 116

    (33) level5 -> level6 * level6 .

    +               reduce using rule 33 (level5 -> level6 * level6 .)
    -               reduce using rule 33 (level5 -> level6 * level6 .)
    <               reduce using rule 33 (level5 -> level6 * level6 .)
    >               reduce using rule 33 (level5 -> level6 * level6 .)
    LESS_EQUAL_THAN reduce using rule 33 (level5 -> level6 * level6 .)
    GREATER_EQUAL_THAN reduce using rule 33 (level5 -> level6 * level6 .)
    EQUALS          reduce using rule 33 (level5 -> level6 * level6 .)
    OR              reduce using rule 33 (level5 -> level6 * level6 .)
    AND             reduce using rule 33 (level5 -> level6 * level6 .)
    EXPONENTIATION  reduce using rule 33 (level5 -> level6 * level6 .)
    ]               reduce using rule 33 (level5 -> level6 * level6 .)
    )               reduce using rule 33 (level5 -> level6 * level6 .)
    ,               reduce using rule 33 (level5 -> level6 * level6 .)
    ;               reduce using rule 33 (level5 -> level6 * level6 .)


state 117

    (34) level5 -> level6 / level6 .

    +               reduce using rule 34 (level5 -> level6 / level6 .)
    -               reduce using rule 34 (level5 -> level6 / level6 .)
    <               reduce using rule 34 (level5 -> level6 / level6 .)
    >               reduce using rule 34 (level5 -> level6 / level6 .)
    LESS_EQUAL_THAN reduce using rule 34 (level5 -> level6 / level6 .)
    GREATER_EQUAL_THAN reduce using rule 34 (level5 -> level6 / level6 .)
    EQUALS          reduce using rule 34 (level5 -> level6 / level6 .)
    OR              reduce using rule 34 (level5 -> level6 / level6 .)
    AND             reduce using rule 34 (level5 -> level6 / level6 .)
    EXPONENTIATION  reduce using rule 34 (level5 -> level6 / level6 .)
    ]               reduce using rule 34 (level5 -> level6 / level6 .)
    )               reduce using rule 34 (level5 -> level6 / level6 .)
    ,               reduce using rule 34 (level5 -> level6 / level6 .)
    ;               reduce using rule 34 (level5 -> level6 / level6 .)


state 118

    (35) level5 -> level6 MOD level6 .

    +               reduce using rule 35 (level5 -> level6 MOD level6 .)
    -               reduce using rule 35 (level5 -> level6 MOD level6 .)
    <               reduce using rule 35 (level5 -> level6 MOD level6 .)
    >               reduce using rule 35 (level5 -> level6 MOD level6 .)
    LESS_EQUAL_THAN reduce using rule 35 (level5 -> level6 MOD level6 .)
    GREATER_EQUAL_THAN reduce using rule 35 (level5 -> level6 MOD level6 .)
    EQUALS          reduce using rule 35 (level5 -> level6 MOD level6 .)
    OR              reduce using rule 35 (level5 -> level6 MOD level6 .)
    AND             reduce using rule 35 (level5 -> level6 MOD level6 .)
    EXPONENTIATION  reduce using rule 35 (level5 -> level6 MOD level6 .)
    ]               reduce using rule 35 (level5 -> level6 MOD level6 .)
    )               reduce using rule 35 (level5 -> level6 MOD level6 .)
    ,               reduce using rule 35 (level5 -> level6 MOD level6 .)
    ;               reduce using rule 35 (level5 -> level6 MOD level6 .)


state 119

    (58) call -> ID ( expressions ) .

    }               reduce using rule 58 (call -> ID ( expressions ) .)
    ]               reduce using rule 58 (call -> ID ( expressions ) .)
    )               reduce using rule 58 (call -> ID ( expressions ) .)
    ,               reduce using rule 58 (call -> ID ( expressions ) .)
    ;               reduce using rule 58 (call -> ID ( expressions ) .)


state 120

    (60) expressions -> expression , . expressions
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ,               reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 97
    expressions                    shift and go to state 128
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 121

    (61) assignment -> ID = expression ; .

    }               reduce using rule 61 (assignment -> ID = expression ; .)


state 122

    (62) assignment -> ID [ expression ] . = expression ;

    =               shift and go to state 129


state 123

    (63) condition -> IF [ expression ] . block elses ;
    (75) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 130

state 124

    (64) cycle -> WHILE ( expression ) . block ;
    (75) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 131

state 125

    (65) special -> SPECIAL_ID ( expressions ) .

    }               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)


state 126

    (45) function -> FUN return_type ID ( parameters ) . { variable_declaration statutes } ;

    {               shift and go to state 132


state 127

    (69) parameters -> type ID . other_parameters
    (70) other_parameters -> . , parameters
    (71) other_parameters -> . empty
    (2) empty -> .

    ,               shift and go to state 134
    )               reduce using rule 2 (empty -> .)

    other_parameters               shift and go to state 133
    empty                          shift and go to state 135

state 128

    (60) expressions -> expression , expressions .

    )               reduce using rule 60 (expressions -> expression , expressions .)


state 129

    (62) assignment -> ID [ expression ] = . expression ;
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    ;               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 136
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 130

    (63) condition -> IF [ expression ] block . elses ;
    (66) elses -> . empty
    (67) elses -> . ELSE block
    (68) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 139
    ELSEIF          shift and go to state 140
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 137
    empty                          shift and go to state 138

state 131

    (64) cycle -> WHILE ( expression ) block . ;

    ;               shift and go to state 141


state 132

    (45) function -> FUN return_type ID ( parameters ) { . variable_declaration statutes } ;
    (3) variable_declaration -> . variables other_variable_declarations
    (6) variables -> . type ids ;
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    variable_declaration           shift and go to state 142
    variables                      shift and go to state 6
    type                           shift and go to state 7

state 133

    (69) parameters -> type ID other_parameters .

    )               reduce using rule 69 (parameters -> type ID other_parameters .)


state 134

    (70) other_parameters -> , . parameters
    (69) parameters -> . type ID other_parameters
    (48) type -> . INT
    (49) type -> . DEC
    (50) type -> . CHAR
    (51) type -> . STR
    (52) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 143
    type                           shift and go to state 104

state 135

    (71) other_parameters -> empty .

    )               reduce using rule 71 (other_parameters -> empty .)


state 136

    (62) assignment -> ID [ expression ] = expression . ;

    ;               shift and go to state 144


state 137

    (63) condition -> IF [ expression ] block elses . ;

    ;               shift and go to state 145


state 138

    (66) elses -> empty .

    ;               reduce using rule 66 (elses -> empty .)


state 139

    (67) elses -> ELSE . block
    (75) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 146

state 140

    (68) elses -> ELSEIF . ( expression ) block elses

    (               shift and go to state 147


state 141

    (64) cycle -> WHILE ( expression ) block ; .

    }               reduce using rule 64 (cycle -> WHILE ( expression ) block ; .)


state 142

    (45) function -> FUN return_type ID ( parameters ) { variable_declaration . statutes } ;
    (53) statutes -> . call
    (54) statutes -> . assignment
    (55) statutes -> . condition
    (56) statutes -> . cycle
    (57) statutes -> . special
    (58) call -> . ID ( expressions )
    (61) assignment -> . ID = expression ;
    (62) assignment -> . ID [ expression ] = expression ;
    (63) condition -> . IF [ expression ] block elses ;
    (64) cycle -> . WHILE ( expression ) block ;
    (65) special -> . SPECIAL_ID ( expressions )

    ID              shift and go to state 41
    IF              shift and go to state 42
    WHILE           shift and go to state 43
    SPECIAL_ID      shift and go to state 44

    statutes                       shift and go to state 148
    call                           shift and go to state 36
    assignment                     shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    special                        shift and go to state 40

state 143

    (70) other_parameters -> , parameters .

    )               reduce using rule 70 (other_parameters -> , parameters .)


state 144

    (62) assignment -> ID [ expression ] = expression ; .

    }               reduce using rule 62 (assignment -> ID [ expression ] = expression ; .)


state 145

    (63) condition -> IF [ expression ] block elses ; .

    }               reduce using rule 63 (condition -> IF [ expression ] block elses ; .)


state 146

    (67) elses -> ELSE block .

    ;               reduce using rule 67 (elses -> ELSE block .)


state 147

    (68) elses -> ELSEIF ( . expression ) block elses
    (12) expression -> . grouping
    (13) expression -> . const
    (14) expression -> . call
    (15) grouping -> . level1
    (16) grouping -> . level1 EXPONENTIATION level1
    (72) const -> . id
    (73) const -> . INT
    (74) const -> . DEC
    (58) call -> . ID ( expressions )
    (17) level1 -> . level2
    (18) level1 -> . + level2
    (19) level1 -> . - level2
    (10) id -> . ID
    (11) id -> . ID [ expression ]
    (20) level2 -> . level3
    (21) level2 -> . level3 OR level3
    (22) level2 -> . level3 AND level3
    (23) level3 -> . level4
    (24) level3 -> . level4 < level4
    (25) level3 -> . level4 > level4
    (26) level3 -> . level4 LESS_EQUAL_THAN level4
    (27) level3 -> . level4 GREATER_EQUAL_THAN level4
    (28) level3 -> . level4 EQUALS level4
    (29) level4 -> . level5
    (30) level4 -> . level5 + level5
    (31) level4 -> . level5 - level5
    (32) level5 -> . level6
    (33) level5 -> . level6 * level6
    (34) level5 -> . level6 / level6
    (35) level5 -> . level6 MOD level6
    (36) level5 -> .
    (37) level6 -> . ( expression )
    (38) level6 -> . const
    (39) level6 -> . NOT const
    (40) level6 -> . INCREMENT const
    (41) level6 -> . DECREMENT const

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    INT             shift and go to state 54
    DEC             shift and go to state 55
    ID              shift and go to state 47
    +               shift and go to state 58
    -               shift and go to state 59
    <               reduce using rule 36 (level5 -> .)
    >               reduce using rule 36 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 36 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 36 (level5 -> .)
    EQUALS          reduce using rule 36 (level5 -> .)
    OR              reduce using rule 36 (level5 -> .)
    AND             reduce using rule 36 (level5 -> .)
    EXPONENTIATION  reduce using rule 36 (level5 -> .)
    )               reduce using rule 36 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 64
    INCREMENT       shift and go to state 65
    DECREMENT       shift and go to state 66

  ! +               [ reduce using rule 36 (level5 -> .) ]
  ! -               [ reduce using rule 36 (level5 -> .) ]

    expression                     shift and go to state 149
    grouping                       shift and go to state 49
    const                          shift and go to state 50
    call                           shift and go to state 51
    level1                         shift and go to state 52
    id                             shift and go to state 53
    level2                         shift and go to state 57
    level3                         shift and go to state 60
    level4                         shift and go to state 61
    level5                         shift and go to state 62
    level6                         shift and go to state 63

state 148

    (45) function -> FUN return_type ID ( parameters ) { variable_declaration statutes . } ;

    }               shift and go to state 150


state 149

    (68) elses -> ELSEIF ( expression . ) block elses

    )               shift and go to state 151


state 150

    (45) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } . ;

    ;               shift and go to state 152


state 151

    (68) elses -> ELSEIF ( expression ) . block elses
    (75) block -> . { statutes }

    {               shift and go to state 23

    block                          shift and go to state 153

state 152

    (45) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .

    FUN             reduce using rule 45 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)
    {               reduce using rule 45 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)


state 153

    (68) elses -> ELSEIF ( expression ) block . elses
    (66) elses -> . empty
    (67) elses -> . ELSE block
    (68) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 139
    ELSEIF          shift and go to state 140
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 154
    empty                          shift and go to state 138

state 154

    (68) elses -> ELSEIF ( expression ) block elses .

    ;               reduce using rule 68 (elses -> ELSEIF ( expression ) block elses .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 34 resolved as shift
WARNING: shift/reduce conflict for - in state 34 resolved as shift
WARNING: shift/reduce conflict for + in state 56 resolved as shift
WARNING: shift/reduce conflict for - in state 56 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 73 resolved as shift
WARNING: shift/reduce conflict for - in state 73 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 120 resolved as shift
WARNING: shift/reduce conflict for - in state 120 resolved as shift
WARNING: shift/reduce conflict for + in state 129 resolved as shift
WARNING: shift/reduce conflict for - in state 129 resolved as shift
WARNING: shift/reduce conflict for + in state 147 resolved as shift
WARNING: shift/reduce conflict for - in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (expression -> const)
WARNING: rejected rule (level6 -> const) in state 50
