Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; variable_declaration function_declaration block
Rule 2     empty -> <empty>
Rule 3     variable_declaration -> type ids ; variable_declaration
Rule 4     variable_declaration -> empty
Rule 5     ids -> id other_ids
Rule 6     other_ids -> , ids
Rule 7     other_ids -> empty
Rule 8     id -> ID
Rule 9     id -> ID [ expression ]
Rule 10    expression -> level1
Rule 11    expression -> level1 EXPONENTIATION level1
Rule 12    level1 -> level2
Rule 13    level1 -> + level2
Rule 14    level1 -> - level2
Rule 15    level2 -> level3
Rule 16    level2 -> level3 OR level3
Rule 17    level2 -> level3 AND level3
Rule 18    level3 -> level4
Rule 19    level3 -> level4 < level4
Rule 20    level3 -> level4 > level4
Rule 21    level3 -> level4 LESS_EQUAL_THAN level4
Rule 22    level3 -> level4 GREATER_EQUAL_THAN level4
Rule 23    level3 -> level4 EQUALS level4
Rule 24    level4 -> level5
Rule 25    level4 -> level5 + level5
Rule 26    level4 -> level5 - level5
Rule 27    level5 -> level6
Rule 28    level5 -> level6 * level6
Rule 29    level5 -> level6 / level6
Rule 30    level5 -> level6 MOD level6
Rule 31    level5 -> <empty>
Rule 32    level6 -> ( expression )
Rule 33    level6 -> const
Rule 34    level6 -> NOT const
Rule 35    level6 -> INCREMENT const
Rule 36    level6 -> DECREMENT const
Rule 37    function_declaration -> function function_declaration
Rule 38    function_declaration -> empty
Rule 39    function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;
Rule 40    return_type -> type
Rule 41    return_type -> VOID
Rule 42    type -> INT
Rule 43    type -> DEC
Rule 44    type -> CHAR
Rule 45    type -> STR
Rule 46    type -> BOOL
Rule 47    statutes -> statute ; statutes
Rule 48    statutes -> empty
Rule 49    statute -> call
Rule 50    statute -> assignment
Rule 51    statute -> condition
Rule 52    statute -> cycle
Rule 53    statute -> special
Rule 54    call -> ID ( expressions )
Rule 55    expressions -> expression
Rule 56    expressions -> expression , expressions
Rule 57    assignment -> ID = expression
Rule 58    assignment -> ID [ expression ] = expression
Rule 59    condition -> IF ( expression ) block elses
Rule 60    cycle -> WHILE ( expression ) block
Rule 61    special -> SPECIAL_ID ( expressions )
Rule 62    elses -> empty
Rule 63    elses -> ELSE block
Rule 64    elses -> ELSEIF ( expression ) block elses
Rule 65    parameters -> type ID other_parameters
Rule 66    other_parameters -> , parameters
Rule 67    other_parameters -> empty
Rule 68    const -> id
Rule 69    const -> call
Rule 70    const -> special
Rule 71    const -> INT_VAL
Rule 72    const -> DEC_VAL
Rule 73    const -> CHAR_VAL
Rule 74    const -> STR_VAL
Rule 75    const -> BOOL_VAL
Rule 76    block -> { statutes }

Terminals, with rules where they appear

(                    : 32 39 54 59 60 61 64
)                    : 32 39 54 59 60 61 64
*                    : 28
+                    : 13 25
,                    : 6 56 66
-                    : 14 26
/                    : 29
;                    : 1 3 39 47
<                    : 19
=                    : 57 58
>                    : 20
AND                  : 17
BOOL                 : 46
BOOL_VAL             : 75
CHAR                 : 44
CHAR_VAL             : 73
DEC                  : 43
DECREMENT            : 36
DEC_VAL              : 72
ELSE                 : 63
ELSEIF               : 64
EQUALS               : 23
EXPONENTIATION       : 11
FUN                  : 39
GREATER_EQUAL_THAN   : 22
ID                   : 1 8 9 39 54 57 58 65
IF                   : 59
INCREMENT            : 35
INT                  : 42
INT_VAL              : 71
LESS_EQUAL_THAN      : 21
MOD                  : 30
NOT                  : 34
OR                   : 16
PROGRAM              : 1
SPECIAL_ID           : 61
STR                  : 45
STR_VAL              : 74
VOID                 : 41
WHILE                : 60
[                    : 9 58
]                    : 9 58
error                : 
{                    : 39 76
}                    : 39 76

Nonterminals, with rules where they appear

assignment           : 50
block                : 1 59 60 63 64
call                 : 49 69
condition            : 51
const                : 33 34 35 36
cycle                : 52
elses                : 59 64
empty                : 4 7 38 48 62 67
expression           : 9 32 55 56 57 58 58 59 60 64
expressions          : 54 56 61
function             : 37
function_declaration : 1 37
id                   : 5 68
ids                  : 3 6
level1               : 10 11 11
level2               : 12 13 14
level3               : 15 16 16 17 17
level4               : 18 19 19 20 20 21 21 22 22 23 23
level5               : 24 25 25 26 26
level6               : 27 28 28 29 29 30 30
other_ids            : 5
other_parameters     : 65
parameters           : 39 66
program              : 0
return_type          : 39
special              : 53 70
statute              : 47
statutes             : 39 47 76
type                 : 3 40 65
variable_declaration : 1 3 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; variable_declaration function_declaration block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; variable_declaration function_declaration block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; variable_declaration function_declaration block

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . variable_declaration function_declaration block
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 5
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID ; variable_declaration . function_declaration block
    (37) function_declaration -> . function function_declaration
    (38) function_declaration -> . empty
    (39) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function_declaration           shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 6

    (3) variable_declaration -> type . ids ; variable_declaration
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 17
    id                             shift and go to state 18

state 7

    (4) variable_declaration -> empty .

    FUN             reduce using rule 4 (variable_declaration -> empty .)
    {               reduce using rule 4 (variable_declaration -> empty .)
    ID              reduce using rule 4 (variable_declaration -> empty .)
    IF              reduce using rule 4 (variable_declaration -> empty .)
    WHILE           reduce using rule 4 (variable_declaration -> empty .)
    SPECIAL_ID      reduce using rule 4 (variable_declaration -> empty .)
    }               reduce using rule 4 (variable_declaration -> empty .)


state 8

    (42) type -> INT .

    ID              reduce using rule 42 (type -> INT .)


state 9

    (43) type -> DEC .

    ID              reduce using rule 43 (type -> DEC .)


state 10

    (44) type -> CHAR .

    ID              reduce using rule 44 (type -> CHAR .)


state 11

    (45) type -> STR .

    ID              reduce using rule 45 (type -> STR .)


state 12

    (46) type -> BOOL .

    ID              reduce using rule 46 (type -> BOOL .)


state 13

    (1) program -> PROGRAM ID ; variable_declaration function_declaration . block
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 20

state 14

    (37) function_declaration -> function . function_declaration
    (37) function_declaration -> . function function_declaration
    (38) function_declaration -> . empty
    (39) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function                       shift and go to state 14
    function_declaration           shift and go to state 22
    empty                          shift and go to state 15

state 15

    (38) function_declaration -> empty .

    {               reduce using rule 38 (function_declaration -> empty .)


state 16

    (39) function -> FUN . return_type ID ( parameters ) { variable_declaration statutes } ;
    (40) return_type -> . type
    (41) return_type -> . VOID
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL

    VOID            shift and go to state 25
    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    return_type                    shift and go to state 23
    type                           shift and go to state 24

state 17

    (3) variable_declaration -> type ids . ; variable_declaration

    ;               shift and go to state 26


state 18

    (5) ids -> id . other_ids
    (6) other_ids -> . , ids
    (7) other_ids -> . empty
    (2) empty -> .

    ,               shift and go to state 28
    ;               reduce using rule 2 (empty -> .)

    other_ids                      shift and go to state 27
    empty                          shift and go to state 29

state 19

    (8) id -> ID .
    (9) id -> ID . [ expression ]

    ,               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30


state 20

    (1) program -> PROGRAM ID ; variable_declaration function_declaration block .

    $end            reduce using rule 1 (program -> PROGRAM ID ; variable_declaration function_declaration block .)


state 21

    (76) block -> { . statutes }
    (47) statutes -> . statute ; statutes
    (48) statutes -> . empty
    (49) statute -> . call
    (50) statute -> . assignment
    (51) statute -> . condition
    (52) statute -> . cycle
    (53) statute -> . special
    (2) empty -> .
    (54) call -> . ID ( expressions )
    (57) assignment -> . ID = expression
    (58) assignment -> . ID [ expression ] = expression
    (59) condition -> . IF ( expression ) block elses
    (60) cycle -> . WHILE ( expression ) block
    (61) special -> . SPECIAL_ID ( expressions )

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    SPECIAL_ID      shift and go to state 42

    statutes                       shift and go to state 31
    statute                        shift and go to state 32
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38

state 22

    (37) function_declaration -> function function_declaration .

    {               reduce using rule 37 (function_declaration -> function function_declaration .)


state 23

    (39) function -> FUN return_type . ID ( parameters ) { variable_declaration statutes } ;

    ID              shift and go to state 43


state 24

    (40) return_type -> type .

    ID              reduce using rule 40 (return_type -> type .)


state 25

    (41) return_type -> VOID .

    ID              reduce using rule 41 (return_type -> VOID .)


state 26

    (3) variable_declaration -> type ids ; . variable_declaration
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    type                           shift and go to state 6
    variable_declaration           shift and go to state 44
    empty                          shift and go to state 7

state 27

    (5) ids -> id other_ids .

    ;               reduce using rule 5 (ids -> id other_ids .)


state 28

    (6) other_ids -> , . ids
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 45
    id                             shift and go to state 18

state 29

    (7) other_ids -> empty .

    ;               reduce using rule 7 (other_ids -> empty .)


state 30

    (9) id -> ID [ . expression ]
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 47
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 31

    (76) block -> { statutes . }

    }               shift and go to state 69


state 32

    (47) statutes -> statute . ; statutes

    ;               shift and go to state 70


state 33

    (48) statutes -> empty .

    }               reduce using rule 48 (statutes -> empty .)


state 34

    (49) statute -> call .

    ;               reduce using rule 49 (statute -> call .)


state 35

    (50) statute -> assignment .

    ;               reduce using rule 50 (statute -> assignment .)


state 36

    (51) statute -> condition .

    ;               reduce using rule 51 (statute -> condition .)


state 37

    (52) statute -> cycle .

    ;               reduce using rule 52 (statute -> cycle .)


state 38

    (53) statute -> special .

    ;               reduce using rule 53 (statute -> special .)


state 39

    (54) call -> ID . ( expressions )
    (57) assignment -> ID . = expression
    (58) assignment -> ID . [ expression ] = expression

    (               shift and go to state 71
    =               shift and go to state 72
    [               shift and go to state 73


state 40

    (59) condition -> IF . ( expression ) block elses

    (               shift and go to state 74


state 41

    (60) cycle -> WHILE . ( expression ) block

    (               shift and go to state 75


state 42

    (61) special -> SPECIAL_ID . ( expressions )

    (               shift and go to state 76


state 43

    (39) function -> FUN return_type ID . ( parameters ) { variable_declaration statutes } ;

    (               shift and go to state 77


state 44

    (3) variable_declaration -> type ids ; variable_declaration .

    FUN             reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    {               reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    ID              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    IF              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    WHILE           reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    SPECIAL_ID      reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    }               reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)


state 45

    (6) other_ids -> , ids .

    ;               reduce using rule 6 (other_ids -> , ids .)


state 46

    (8) id -> ID .
    (9) id -> ID . [ expression ]
    (54) call -> ID . ( expressions )

    *               reduce using rule 8 (id -> ID .)
    /               reduce using rule 8 (id -> ID .)
    MOD             reduce using rule 8 (id -> ID .)
    +               reduce using rule 8 (id -> ID .)
    -               reduce using rule 8 (id -> ID .)
    <               reduce using rule 8 (id -> ID .)
    >               reduce using rule 8 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 8 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 8 (id -> ID .)
    EQUALS          reduce using rule 8 (id -> ID .)
    OR              reduce using rule 8 (id -> ID .)
    AND             reduce using rule 8 (id -> ID .)
    EXPONENTIATION  reduce using rule 8 (id -> ID .)
    ]               reduce using rule 8 (id -> ID .)
    )               reduce using rule 8 (id -> ID .)
    ,               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30
    (               shift and go to state 71


state 47

    (9) id -> ID [ expression . ]

    ]               shift and go to state 78


state 48

    (10) expression -> level1 .
    (11) expression -> level1 . EXPONENTIATION level1

    ]               reduce using rule 10 (expression -> level1 .)
    )               reduce using rule 10 (expression -> level1 .)
    ,               reduce using rule 10 (expression -> level1 .)
    ;               reduce using rule 10 (expression -> level1 .)
    EXPONENTIATION  shift and go to state 79


state 49

    (12) level1 -> level2 .

    EXPONENTIATION  reduce using rule 12 (level1 -> level2 .)
    ]               reduce using rule 12 (level1 -> level2 .)
    )               reduce using rule 12 (level1 -> level2 .)
    ,               reduce using rule 12 (level1 -> level2 .)
    ;               reduce using rule 12 (level1 -> level2 .)


state 50

    (13) level1 -> + . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level2                         shift and go to state 80
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 51

    (14) level1 -> - . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level2                         shift and go to state 81
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 52

    (15) level2 -> level3 .
    (16) level2 -> level3 . OR level3
    (17) level2 -> level3 . AND level3

    EXPONENTIATION  reduce using rule 15 (level2 -> level3 .)
    ]               reduce using rule 15 (level2 -> level3 .)
    )               reduce using rule 15 (level2 -> level3 .)
    ,               reduce using rule 15 (level2 -> level3 .)
    ;               reduce using rule 15 (level2 -> level3 .)
    OR              shift and go to state 82
    AND             shift and go to state 83


state 53

    (18) level3 -> level4 .
    (19) level3 -> level4 . < level4
    (20) level3 -> level4 . > level4
    (21) level3 -> level4 . LESS_EQUAL_THAN level4
    (22) level3 -> level4 . GREATER_EQUAL_THAN level4
    (23) level3 -> level4 . EQUALS level4

    OR              reduce using rule 18 (level3 -> level4 .)
    AND             reduce using rule 18 (level3 -> level4 .)
    EXPONENTIATION  reduce using rule 18 (level3 -> level4 .)
    ]               reduce using rule 18 (level3 -> level4 .)
    )               reduce using rule 18 (level3 -> level4 .)
    ,               reduce using rule 18 (level3 -> level4 .)
    ;               reduce using rule 18 (level3 -> level4 .)
    <               shift and go to state 84
    >               shift and go to state 85
    LESS_EQUAL_THAN shift and go to state 86
    GREATER_EQUAL_THAN shift and go to state 87
    EQUALS          shift and go to state 88


state 54

    (24) level4 -> level5 .
    (25) level4 -> level5 . + level5
    (26) level4 -> level5 . - level5

    <               reduce using rule 24 (level4 -> level5 .)
    >               reduce using rule 24 (level4 -> level5 .)
    LESS_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    GREATER_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    EQUALS          reduce using rule 24 (level4 -> level5 .)
    OR              reduce using rule 24 (level4 -> level5 .)
    AND             reduce using rule 24 (level4 -> level5 .)
    EXPONENTIATION  reduce using rule 24 (level4 -> level5 .)
    ]               reduce using rule 24 (level4 -> level5 .)
    )               reduce using rule 24 (level4 -> level5 .)
    ,               reduce using rule 24 (level4 -> level5 .)
    ;               reduce using rule 24 (level4 -> level5 .)
    +               shift and go to state 89
    -               shift and go to state 90


state 55

    (27) level5 -> level6 .
    (28) level5 -> level6 . * level6
    (29) level5 -> level6 . / level6
    (30) level5 -> level6 . MOD level6

    +               reduce using rule 27 (level5 -> level6 .)
    -               reduce using rule 27 (level5 -> level6 .)
    <               reduce using rule 27 (level5 -> level6 .)
    >               reduce using rule 27 (level5 -> level6 .)
    LESS_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    GREATER_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    EQUALS          reduce using rule 27 (level5 -> level6 .)
    OR              reduce using rule 27 (level5 -> level6 .)
    AND             reduce using rule 27 (level5 -> level6 .)
    EXPONENTIATION  reduce using rule 27 (level5 -> level6 .)
    ]               reduce using rule 27 (level5 -> level6 .)
    )               reduce using rule 27 (level5 -> level6 .)
    ,               reduce using rule 27 (level5 -> level6 .)
    ;               reduce using rule 27 (level5 -> level6 .)
    *               shift and go to state 91
    /               shift and go to state 92
    MOD             shift and go to state 93


state 56

    (32) level6 -> ( . expression )
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 94
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 57

    (33) level6 -> const .

    *               reduce using rule 33 (level6 -> const .)
    /               reduce using rule 33 (level6 -> const .)
    MOD             reduce using rule 33 (level6 -> const .)
    +               reduce using rule 33 (level6 -> const .)
    -               reduce using rule 33 (level6 -> const .)
    <               reduce using rule 33 (level6 -> const .)
    >               reduce using rule 33 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 33 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 33 (level6 -> const .)
    EQUALS          reduce using rule 33 (level6 -> const .)
    OR              reduce using rule 33 (level6 -> const .)
    AND             reduce using rule 33 (level6 -> const .)
    EXPONENTIATION  reduce using rule 33 (level6 -> const .)
    ]               reduce using rule 33 (level6 -> const .)
    )               reduce using rule 33 (level6 -> const .)
    ,               reduce using rule 33 (level6 -> const .)
    ;               reduce using rule 33 (level6 -> const .)


state 58

    (34) level6 -> NOT . const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    const                          shift and go to state 95
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 59

    (35) level6 -> INCREMENT . const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    const                          shift and go to state 96
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 60

    (36) level6 -> DECREMENT . const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    const                          shift and go to state 97
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 61

    (68) const -> id .

    *               reduce using rule 68 (const -> id .)
    /               reduce using rule 68 (const -> id .)
    MOD             reduce using rule 68 (const -> id .)
    +               reduce using rule 68 (const -> id .)
    -               reduce using rule 68 (const -> id .)
    <               reduce using rule 68 (const -> id .)
    >               reduce using rule 68 (const -> id .)
    LESS_EQUAL_THAN reduce using rule 68 (const -> id .)
    GREATER_EQUAL_THAN reduce using rule 68 (const -> id .)
    EQUALS          reduce using rule 68 (const -> id .)
    OR              reduce using rule 68 (const -> id .)
    AND             reduce using rule 68 (const -> id .)
    EXPONENTIATION  reduce using rule 68 (const -> id .)
    ]               reduce using rule 68 (const -> id .)
    )               reduce using rule 68 (const -> id .)
    ,               reduce using rule 68 (const -> id .)
    ;               reduce using rule 68 (const -> id .)


state 62

    (69) const -> call .

    *               reduce using rule 69 (const -> call .)
    /               reduce using rule 69 (const -> call .)
    MOD             reduce using rule 69 (const -> call .)
    +               reduce using rule 69 (const -> call .)
    -               reduce using rule 69 (const -> call .)
    <               reduce using rule 69 (const -> call .)
    >               reduce using rule 69 (const -> call .)
    LESS_EQUAL_THAN reduce using rule 69 (const -> call .)
    GREATER_EQUAL_THAN reduce using rule 69 (const -> call .)
    EQUALS          reduce using rule 69 (const -> call .)
    OR              reduce using rule 69 (const -> call .)
    AND             reduce using rule 69 (const -> call .)
    EXPONENTIATION  reduce using rule 69 (const -> call .)
    ]               reduce using rule 69 (const -> call .)
    )               reduce using rule 69 (const -> call .)
    ,               reduce using rule 69 (const -> call .)
    ;               reduce using rule 69 (const -> call .)


state 63

    (70) const -> special .

    *               reduce using rule 70 (const -> special .)
    /               reduce using rule 70 (const -> special .)
    MOD             reduce using rule 70 (const -> special .)
    +               reduce using rule 70 (const -> special .)
    -               reduce using rule 70 (const -> special .)
    <               reduce using rule 70 (const -> special .)
    >               reduce using rule 70 (const -> special .)
    LESS_EQUAL_THAN reduce using rule 70 (const -> special .)
    GREATER_EQUAL_THAN reduce using rule 70 (const -> special .)
    EQUALS          reduce using rule 70 (const -> special .)
    OR              reduce using rule 70 (const -> special .)
    AND             reduce using rule 70 (const -> special .)
    EXPONENTIATION  reduce using rule 70 (const -> special .)
    ]               reduce using rule 70 (const -> special .)
    )               reduce using rule 70 (const -> special .)
    ,               reduce using rule 70 (const -> special .)
    ;               reduce using rule 70 (const -> special .)


state 64

    (71) const -> INT_VAL .

    *               reduce using rule 71 (const -> INT_VAL .)
    /               reduce using rule 71 (const -> INT_VAL .)
    MOD             reduce using rule 71 (const -> INT_VAL .)
    +               reduce using rule 71 (const -> INT_VAL .)
    -               reduce using rule 71 (const -> INT_VAL .)
    <               reduce using rule 71 (const -> INT_VAL .)
    >               reduce using rule 71 (const -> INT_VAL .)
    LESS_EQUAL_THAN reduce using rule 71 (const -> INT_VAL .)
    GREATER_EQUAL_THAN reduce using rule 71 (const -> INT_VAL .)
    EQUALS          reduce using rule 71 (const -> INT_VAL .)
    OR              reduce using rule 71 (const -> INT_VAL .)
    AND             reduce using rule 71 (const -> INT_VAL .)
    EXPONENTIATION  reduce using rule 71 (const -> INT_VAL .)
    ]               reduce using rule 71 (const -> INT_VAL .)
    )               reduce using rule 71 (const -> INT_VAL .)
    ,               reduce using rule 71 (const -> INT_VAL .)
    ;               reduce using rule 71 (const -> INT_VAL .)


state 65

    (72) const -> DEC_VAL .

    *               reduce using rule 72 (const -> DEC_VAL .)
    /               reduce using rule 72 (const -> DEC_VAL .)
    MOD             reduce using rule 72 (const -> DEC_VAL .)
    +               reduce using rule 72 (const -> DEC_VAL .)
    -               reduce using rule 72 (const -> DEC_VAL .)
    <               reduce using rule 72 (const -> DEC_VAL .)
    >               reduce using rule 72 (const -> DEC_VAL .)
    LESS_EQUAL_THAN reduce using rule 72 (const -> DEC_VAL .)
    GREATER_EQUAL_THAN reduce using rule 72 (const -> DEC_VAL .)
    EQUALS          reduce using rule 72 (const -> DEC_VAL .)
    OR              reduce using rule 72 (const -> DEC_VAL .)
    AND             reduce using rule 72 (const -> DEC_VAL .)
    EXPONENTIATION  reduce using rule 72 (const -> DEC_VAL .)
    ]               reduce using rule 72 (const -> DEC_VAL .)
    )               reduce using rule 72 (const -> DEC_VAL .)
    ,               reduce using rule 72 (const -> DEC_VAL .)
    ;               reduce using rule 72 (const -> DEC_VAL .)


state 66

    (73) const -> CHAR_VAL .

    *               reduce using rule 73 (const -> CHAR_VAL .)
    /               reduce using rule 73 (const -> CHAR_VAL .)
    MOD             reduce using rule 73 (const -> CHAR_VAL .)
    +               reduce using rule 73 (const -> CHAR_VAL .)
    -               reduce using rule 73 (const -> CHAR_VAL .)
    <               reduce using rule 73 (const -> CHAR_VAL .)
    >               reduce using rule 73 (const -> CHAR_VAL .)
    LESS_EQUAL_THAN reduce using rule 73 (const -> CHAR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 73 (const -> CHAR_VAL .)
    EQUALS          reduce using rule 73 (const -> CHAR_VAL .)
    OR              reduce using rule 73 (const -> CHAR_VAL .)
    AND             reduce using rule 73 (const -> CHAR_VAL .)
    EXPONENTIATION  reduce using rule 73 (const -> CHAR_VAL .)
    ]               reduce using rule 73 (const -> CHAR_VAL .)
    )               reduce using rule 73 (const -> CHAR_VAL .)
    ,               reduce using rule 73 (const -> CHAR_VAL .)
    ;               reduce using rule 73 (const -> CHAR_VAL .)


state 67

    (74) const -> STR_VAL .

    *               reduce using rule 74 (const -> STR_VAL .)
    /               reduce using rule 74 (const -> STR_VAL .)
    MOD             reduce using rule 74 (const -> STR_VAL .)
    +               reduce using rule 74 (const -> STR_VAL .)
    -               reduce using rule 74 (const -> STR_VAL .)
    <               reduce using rule 74 (const -> STR_VAL .)
    >               reduce using rule 74 (const -> STR_VAL .)
    LESS_EQUAL_THAN reduce using rule 74 (const -> STR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 74 (const -> STR_VAL .)
    EQUALS          reduce using rule 74 (const -> STR_VAL .)
    OR              reduce using rule 74 (const -> STR_VAL .)
    AND             reduce using rule 74 (const -> STR_VAL .)
    EXPONENTIATION  reduce using rule 74 (const -> STR_VAL .)
    ]               reduce using rule 74 (const -> STR_VAL .)
    )               reduce using rule 74 (const -> STR_VAL .)
    ,               reduce using rule 74 (const -> STR_VAL .)
    ;               reduce using rule 74 (const -> STR_VAL .)


state 68

    (75) const -> BOOL_VAL .

    *               reduce using rule 75 (const -> BOOL_VAL .)
    /               reduce using rule 75 (const -> BOOL_VAL .)
    MOD             reduce using rule 75 (const -> BOOL_VAL .)
    +               reduce using rule 75 (const -> BOOL_VAL .)
    -               reduce using rule 75 (const -> BOOL_VAL .)
    <               reduce using rule 75 (const -> BOOL_VAL .)
    >               reduce using rule 75 (const -> BOOL_VAL .)
    LESS_EQUAL_THAN reduce using rule 75 (const -> BOOL_VAL .)
    GREATER_EQUAL_THAN reduce using rule 75 (const -> BOOL_VAL .)
    EQUALS          reduce using rule 75 (const -> BOOL_VAL .)
    OR              reduce using rule 75 (const -> BOOL_VAL .)
    AND             reduce using rule 75 (const -> BOOL_VAL .)
    EXPONENTIATION  reduce using rule 75 (const -> BOOL_VAL .)
    ]               reduce using rule 75 (const -> BOOL_VAL .)
    )               reduce using rule 75 (const -> BOOL_VAL .)
    ,               reduce using rule 75 (const -> BOOL_VAL .)
    ;               reduce using rule 75 (const -> BOOL_VAL .)


state 69

    (76) block -> { statutes } .

    $end            reduce using rule 76 (block -> { statutes } .)
    ELSE            reduce using rule 76 (block -> { statutes } .)
    ELSEIF          reduce using rule 76 (block -> { statutes } .)
    ;               reduce using rule 76 (block -> { statutes } .)


state 70

    (47) statutes -> statute ; . statutes
    (47) statutes -> . statute ; statutes
    (48) statutes -> . empty
    (49) statute -> . call
    (50) statute -> . assignment
    (51) statute -> . condition
    (52) statute -> . cycle
    (53) statute -> . special
    (2) empty -> .
    (54) call -> . ID ( expressions )
    (57) assignment -> . ID = expression
    (58) assignment -> . ID [ expression ] = expression
    (59) condition -> . IF ( expression ) block elses
    (60) cycle -> . WHILE ( expression ) block
    (61) special -> . SPECIAL_ID ( expressions )

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    SPECIAL_ID      shift and go to state 42

    statute                        shift and go to state 32
    statutes                       shift and go to state 98
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38

state 71

    (54) call -> ID ( . expressions )
    (55) expressions -> . expression
    (56) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expressions                    shift and go to state 99
    expression                     shift and go to state 100
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 72

    (57) assignment -> ID = . expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 101
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 73

    (58) assignment -> ID [ . expression ] = expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 102
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 74

    (59) condition -> IF ( . expression ) block elses
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 103
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 75

    (60) cycle -> WHILE ( . expression ) block
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 104
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 76

    (61) special -> SPECIAL_ID ( . expressions )
    (55) expressions -> . expression
    (56) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expressions                    shift and go to state 105
    expression                     shift and go to state 100
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 77

    (39) function -> FUN return_type ID ( . parameters ) { variable_declaration statutes } ;
    (65) parameters -> . type ID other_parameters
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 106
    type                           shift and go to state 107

state 78

    (9) id -> ID [ expression ] .

    ,               reduce using rule 9 (id -> ID [ expression ] .)
    ;               reduce using rule 9 (id -> ID [ expression ] .)
    *               reduce using rule 9 (id -> ID [ expression ] .)
    /               reduce using rule 9 (id -> ID [ expression ] .)
    MOD             reduce using rule 9 (id -> ID [ expression ] .)
    +               reduce using rule 9 (id -> ID [ expression ] .)
    -               reduce using rule 9 (id -> ID [ expression ] .)
    <               reduce using rule 9 (id -> ID [ expression ] .)
    >               reduce using rule 9 (id -> ID [ expression ] .)
    LESS_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    GREATER_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    EQUALS          reduce using rule 9 (id -> ID [ expression ] .)
    OR              reduce using rule 9 (id -> ID [ expression ] .)
    AND             reduce using rule 9 (id -> ID [ expression ] .)
    EXPONENTIATION  reduce using rule 9 (id -> ID [ expression ] .)
    ]               reduce using rule 9 (id -> ID [ expression ] .)
    )               reduce using rule 9 (id -> ID [ expression ] .)


state 79

    (11) expression -> level1 EXPONENTIATION . level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    level1                         shift and go to state 108
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 80

    (13) level1 -> + level2 .

    EXPONENTIATION  reduce using rule 13 (level1 -> + level2 .)
    ]               reduce using rule 13 (level1 -> + level2 .)
    )               reduce using rule 13 (level1 -> + level2 .)
    ,               reduce using rule 13 (level1 -> + level2 .)
    ;               reduce using rule 13 (level1 -> + level2 .)


state 81

    (14) level1 -> - level2 .

    EXPONENTIATION  reduce using rule 14 (level1 -> - level2 .)
    ]               reduce using rule 14 (level1 -> - level2 .)
    )               reduce using rule 14 (level1 -> - level2 .)
    ,               reduce using rule 14 (level1 -> - level2 .)
    ;               reduce using rule 14 (level1 -> - level2 .)


state 82

    (16) level2 -> level3 OR . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level3                         shift and go to state 109
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 83

    (17) level2 -> level3 AND . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level3                         shift and go to state 110
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 84

    (19) level3 -> level4 < . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level4                         shift and go to state 111
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 85

    (20) level3 -> level4 > . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level4                         shift and go to state 112
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 86

    (21) level3 -> level4 LESS_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level4                         shift and go to state 113
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 87

    (22) level3 -> level4 GREATER_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level4                         shift and go to state 114
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 88

    (23) level3 -> level4 EQUALS . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level4                         shift and go to state 115
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 89

    (25) level4 -> level5 + . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level5                         shift and go to state 116
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 90

    (26) level4 -> level5 - . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level5                         shift and go to state 117
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 91

    (28) level5 -> level6 * . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level6                         shift and go to state 118
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 92

    (29) level5 -> level6 / . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level6                         shift and go to state 119
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 93

    (30) level5 -> level6 MOD . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

    level6                         shift and go to state 120
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 94

    (32) level6 -> ( expression . )

    )               shift and go to state 121


state 95

    (34) level6 -> NOT const .

    *               reduce using rule 34 (level6 -> NOT const .)
    /               reduce using rule 34 (level6 -> NOT const .)
    MOD             reduce using rule 34 (level6 -> NOT const .)
    +               reduce using rule 34 (level6 -> NOT const .)
    -               reduce using rule 34 (level6 -> NOT const .)
    <               reduce using rule 34 (level6 -> NOT const .)
    >               reduce using rule 34 (level6 -> NOT const .)
    LESS_EQUAL_THAN reduce using rule 34 (level6 -> NOT const .)
    GREATER_EQUAL_THAN reduce using rule 34 (level6 -> NOT const .)
    EQUALS          reduce using rule 34 (level6 -> NOT const .)
    OR              reduce using rule 34 (level6 -> NOT const .)
    AND             reduce using rule 34 (level6 -> NOT const .)
    EXPONENTIATION  reduce using rule 34 (level6 -> NOT const .)
    ]               reduce using rule 34 (level6 -> NOT const .)
    )               reduce using rule 34 (level6 -> NOT const .)
    ,               reduce using rule 34 (level6 -> NOT const .)
    ;               reduce using rule 34 (level6 -> NOT const .)


state 96

    (35) level6 -> INCREMENT const .

    *               reduce using rule 35 (level6 -> INCREMENT const .)
    /               reduce using rule 35 (level6 -> INCREMENT const .)
    MOD             reduce using rule 35 (level6 -> INCREMENT const .)
    +               reduce using rule 35 (level6 -> INCREMENT const .)
    -               reduce using rule 35 (level6 -> INCREMENT const .)
    <               reduce using rule 35 (level6 -> INCREMENT const .)
    >               reduce using rule 35 (level6 -> INCREMENT const .)
    LESS_EQUAL_THAN reduce using rule 35 (level6 -> INCREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 35 (level6 -> INCREMENT const .)
    EQUALS          reduce using rule 35 (level6 -> INCREMENT const .)
    OR              reduce using rule 35 (level6 -> INCREMENT const .)
    AND             reduce using rule 35 (level6 -> INCREMENT const .)
    EXPONENTIATION  reduce using rule 35 (level6 -> INCREMENT const .)
    ]               reduce using rule 35 (level6 -> INCREMENT const .)
    )               reduce using rule 35 (level6 -> INCREMENT const .)
    ,               reduce using rule 35 (level6 -> INCREMENT const .)
    ;               reduce using rule 35 (level6 -> INCREMENT const .)


state 97

    (36) level6 -> DECREMENT const .

    *               reduce using rule 36 (level6 -> DECREMENT const .)
    /               reduce using rule 36 (level6 -> DECREMENT const .)
    MOD             reduce using rule 36 (level6 -> DECREMENT const .)
    +               reduce using rule 36 (level6 -> DECREMENT const .)
    -               reduce using rule 36 (level6 -> DECREMENT const .)
    <               reduce using rule 36 (level6 -> DECREMENT const .)
    >               reduce using rule 36 (level6 -> DECREMENT const .)
    LESS_EQUAL_THAN reduce using rule 36 (level6 -> DECREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 36 (level6 -> DECREMENT const .)
    EQUALS          reduce using rule 36 (level6 -> DECREMENT const .)
    OR              reduce using rule 36 (level6 -> DECREMENT const .)
    AND             reduce using rule 36 (level6 -> DECREMENT const .)
    EXPONENTIATION  reduce using rule 36 (level6 -> DECREMENT const .)
    ]               reduce using rule 36 (level6 -> DECREMENT const .)
    )               reduce using rule 36 (level6 -> DECREMENT const .)
    ,               reduce using rule 36 (level6 -> DECREMENT const .)
    ;               reduce using rule 36 (level6 -> DECREMENT const .)


state 98

    (47) statutes -> statute ; statutes .

    }               reduce using rule 47 (statutes -> statute ; statutes .)


state 99

    (54) call -> ID ( expressions . )

    )               shift and go to state 122


state 100

    (55) expressions -> expression .
    (56) expressions -> expression . , expressions

    )               reduce using rule 55 (expressions -> expression .)
    ,               shift and go to state 123


state 101

    (57) assignment -> ID = expression .

    ;               reduce using rule 57 (assignment -> ID = expression .)


state 102

    (58) assignment -> ID [ expression . ] = expression

    ]               shift and go to state 124


state 103

    (59) condition -> IF ( expression . ) block elses

    )               shift and go to state 125


state 104

    (60) cycle -> WHILE ( expression . ) block

    )               shift and go to state 126


state 105

    (61) special -> SPECIAL_ID ( expressions . )

    )               shift and go to state 127


state 106

    (39) function -> FUN return_type ID ( parameters . ) { variable_declaration statutes } ;

    )               shift and go to state 128


state 107

    (65) parameters -> type . ID other_parameters

    ID              shift and go to state 129


state 108

    (11) expression -> level1 EXPONENTIATION level1 .

    ]               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    )               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ,               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ;               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)


state 109

    (16) level2 -> level3 OR level3 .

    EXPONENTIATION  reduce using rule 16 (level2 -> level3 OR level3 .)
    ]               reduce using rule 16 (level2 -> level3 OR level3 .)
    )               reduce using rule 16 (level2 -> level3 OR level3 .)
    ,               reduce using rule 16 (level2 -> level3 OR level3 .)
    ;               reduce using rule 16 (level2 -> level3 OR level3 .)


state 110

    (17) level2 -> level3 AND level3 .

    EXPONENTIATION  reduce using rule 17 (level2 -> level3 AND level3 .)
    ]               reduce using rule 17 (level2 -> level3 AND level3 .)
    )               reduce using rule 17 (level2 -> level3 AND level3 .)
    ,               reduce using rule 17 (level2 -> level3 AND level3 .)
    ;               reduce using rule 17 (level2 -> level3 AND level3 .)


state 111

    (19) level3 -> level4 < level4 .

    OR              reduce using rule 19 (level3 -> level4 < level4 .)
    AND             reduce using rule 19 (level3 -> level4 < level4 .)
    EXPONENTIATION  reduce using rule 19 (level3 -> level4 < level4 .)
    ]               reduce using rule 19 (level3 -> level4 < level4 .)
    )               reduce using rule 19 (level3 -> level4 < level4 .)
    ,               reduce using rule 19 (level3 -> level4 < level4 .)
    ;               reduce using rule 19 (level3 -> level4 < level4 .)


state 112

    (20) level3 -> level4 > level4 .

    OR              reduce using rule 20 (level3 -> level4 > level4 .)
    AND             reduce using rule 20 (level3 -> level4 > level4 .)
    EXPONENTIATION  reduce using rule 20 (level3 -> level4 > level4 .)
    ]               reduce using rule 20 (level3 -> level4 > level4 .)
    )               reduce using rule 20 (level3 -> level4 > level4 .)
    ,               reduce using rule 20 (level3 -> level4 > level4 .)
    ;               reduce using rule 20 (level3 -> level4 > level4 .)


state 113

    (21) level3 -> level4 LESS_EQUAL_THAN level4 .

    OR              reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    AND             reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ]               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    )               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ,               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ;               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)


state 114

    (22) level3 -> level4 GREATER_EQUAL_THAN level4 .

    OR              reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    AND             reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ]               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    )               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ,               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ;               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)


state 115

    (23) level3 -> level4 EQUALS level4 .

    OR              reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    AND             reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    EXPONENTIATION  reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ]               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    )               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ,               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ;               reduce using rule 23 (level3 -> level4 EQUALS level4 .)


state 116

    (25) level4 -> level5 + level5 .

    <               reduce using rule 25 (level4 -> level5 + level5 .)
    >               reduce using rule 25 (level4 -> level5 + level5 .)
    LESS_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    GREATER_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    EQUALS          reduce using rule 25 (level4 -> level5 + level5 .)
    OR              reduce using rule 25 (level4 -> level5 + level5 .)
    AND             reduce using rule 25 (level4 -> level5 + level5 .)
    EXPONENTIATION  reduce using rule 25 (level4 -> level5 + level5 .)
    ]               reduce using rule 25 (level4 -> level5 + level5 .)
    )               reduce using rule 25 (level4 -> level5 + level5 .)
    ,               reduce using rule 25 (level4 -> level5 + level5 .)
    ;               reduce using rule 25 (level4 -> level5 + level5 .)


state 117

    (26) level4 -> level5 - level5 .

    <               reduce using rule 26 (level4 -> level5 - level5 .)
    >               reduce using rule 26 (level4 -> level5 - level5 .)
    LESS_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    GREATER_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    EQUALS          reduce using rule 26 (level4 -> level5 - level5 .)
    OR              reduce using rule 26 (level4 -> level5 - level5 .)
    AND             reduce using rule 26 (level4 -> level5 - level5 .)
    EXPONENTIATION  reduce using rule 26 (level4 -> level5 - level5 .)
    ]               reduce using rule 26 (level4 -> level5 - level5 .)
    )               reduce using rule 26 (level4 -> level5 - level5 .)
    ,               reduce using rule 26 (level4 -> level5 - level5 .)
    ;               reduce using rule 26 (level4 -> level5 - level5 .)


state 118

    (28) level5 -> level6 * level6 .

    +               reduce using rule 28 (level5 -> level6 * level6 .)
    -               reduce using rule 28 (level5 -> level6 * level6 .)
    <               reduce using rule 28 (level5 -> level6 * level6 .)
    >               reduce using rule 28 (level5 -> level6 * level6 .)
    LESS_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    GREATER_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    EQUALS          reduce using rule 28 (level5 -> level6 * level6 .)
    OR              reduce using rule 28 (level5 -> level6 * level6 .)
    AND             reduce using rule 28 (level5 -> level6 * level6 .)
    EXPONENTIATION  reduce using rule 28 (level5 -> level6 * level6 .)
    ]               reduce using rule 28 (level5 -> level6 * level6 .)
    )               reduce using rule 28 (level5 -> level6 * level6 .)
    ,               reduce using rule 28 (level5 -> level6 * level6 .)
    ;               reduce using rule 28 (level5 -> level6 * level6 .)


state 119

    (29) level5 -> level6 / level6 .

    +               reduce using rule 29 (level5 -> level6 / level6 .)
    -               reduce using rule 29 (level5 -> level6 / level6 .)
    <               reduce using rule 29 (level5 -> level6 / level6 .)
    >               reduce using rule 29 (level5 -> level6 / level6 .)
    LESS_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    GREATER_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    EQUALS          reduce using rule 29 (level5 -> level6 / level6 .)
    OR              reduce using rule 29 (level5 -> level6 / level6 .)
    AND             reduce using rule 29 (level5 -> level6 / level6 .)
    EXPONENTIATION  reduce using rule 29 (level5 -> level6 / level6 .)
    ]               reduce using rule 29 (level5 -> level6 / level6 .)
    )               reduce using rule 29 (level5 -> level6 / level6 .)
    ,               reduce using rule 29 (level5 -> level6 / level6 .)
    ;               reduce using rule 29 (level5 -> level6 / level6 .)


state 120

    (30) level5 -> level6 MOD level6 .

    +               reduce using rule 30 (level5 -> level6 MOD level6 .)
    -               reduce using rule 30 (level5 -> level6 MOD level6 .)
    <               reduce using rule 30 (level5 -> level6 MOD level6 .)
    >               reduce using rule 30 (level5 -> level6 MOD level6 .)
    LESS_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    GREATER_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    EQUALS          reduce using rule 30 (level5 -> level6 MOD level6 .)
    OR              reduce using rule 30 (level5 -> level6 MOD level6 .)
    AND             reduce using rule 30 (level5 -> level6 MOD level6 .)
    EXPONENTIATION  reduce using rule 30 (level5 -> level6 MOD level6 .)
    ]               reduce using rule 30 (level5 -> level6 MOD level6 .)
    )               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ,               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ;               reduce using rule 30 (level5 -> level6 MOD level6 .)


state 121

    (32) level6 -> ( expression ) .

    *               reduce using rule 32 (level6 -> ( expression ) .)
    /               reduce using rule 32 (level6 -> ( expression ) .)
    MOD             reduce using rule 32 (level6 -> ( expression ) .)
    +               reduce using rule 32 (level6 -> ( expression ) .)
    -               reduce using rule 32 (level6 -> ( expression ) .)
    <               reduce using rule 32 (level6 -> ( expression ) .)
    >               reduce using rule 32 (level6 -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 32 (level6 -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 32 (level6 -> ( expression ) .)
    EQUALS          reduce using rule 32 (level6 -> ( expression ) .)
    OR              reduce using rule 32 (level6 -> ( expression ) .)
    AND             reduce using rule 32 (level6 -> ( expression ) .)
    EXPONENTIATION  reduce using rule 32 (level6 -> ( expression ) .)
    ]               reduce using rule 32 (level6 -> ( expression ) .)
    )               reduce using rule 32 (level6 -> ( expression ) .)
    ,               reduce using rule 32 (level6 -> ( expression ) .)
    ;               reduce using rule 32 (level6 -> ( expression ) .)


state 122

    (54) call -> ID ( expressions ) .

    ;               reduce using rule 54 (call -> ID ( expressions ) .)
    *               reduce using rule 54 (call -> ID ( expressions ) .)
    /               reduce using rule 54 (call -> ID ( expressions ) .)
    MOD             reduce using rule 54 (call -> ID ( expressions ) .)
    +               reduce using rule 54 (call -> ID ( expressions ) .)
    -               reduce using rule 54 (call -> ID ( expressions ) .)
    <               reduce using rule 54 (call -> ID ( expressions ) .)
    >               reduce using rule 54 (call -> ID ( expressions ) .)
    LESS_EQUAL_THAN reduce using rule 54 (call -> ID ( expressions ) .)
    GREATER_EQUAL_THAN reduce using rule 54 (call -> ID ( expressions ) .)
    EQUALS          reduce using rule 54 (call -> ID ( expressions ) .)
    OR              reduce using rule 54 (call -> ID ( expressions ) .)
    AND             reduce using rule 54 (call -> ID ( expressions ) .)
    EXPONENTIATION  reduce using rule 54 (call -> ID ( expressions ) .)
    ]               reduce using rule 54 (call -> ID ( expressions ) .)
    )               reduce using rule 54 (call -> ID ( expressions ) .)
    ,               reduce using rule 54 (call -> ID ( expressions ) .)


state 123

    (56) expressions -> expression , . expressions
    (55) expressions -> . expression
    (56) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 100
    expressions                    shift and go to state 130
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 124

    (58) assignment -> ID [ expression ] . = expression

    =               shift and go to state 131


state 125

    (59) condition -> IF ( expression ) . block elses
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 132

state 126

    (60) cycle -> WHILE ( expression ) . block
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 133

state 127

    (61) special -> SPECIAL_ID ( expressions ) .

    ;               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    *               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    /               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    MOD             reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    +               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    -               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    <               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    >               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    LESS_EQUAL_THAN reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    GREATER_EQUAL_THAN reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    EQUALS          reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    OR              reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    AND             reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    EXPONENTIATION  reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    ]               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    )               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)
    ,               reduce using rule 61 (special -> SPECIAL_ID ( expressions ) .)


state 128

    (39) function -> FUN return_type ID ( parameters ) . { variable_declaration statutes } ;

    {               shift and go to state 134


state 129

    (65) parameters -> type ID . other_parameters
    (66) other_parameters -> . , parameters
    (67) other_parameters -> . empty
    (2) empty -> .

    ,               shift and go to state 136
    )               reduce using rule 2 (empty -> .)

    other_parameters               shift and go to state 135
    empty                          shift and go to state 137

state 130

    (56) expressions -> expression , expressions .

    )               reduce using rule 56 (expressions -> expression , expressions .)


state 131

    (58) assignment -> ID [ expression ] = . expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 138
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 132

    (59) condition -> IF ( expression ) block . elses
    (62) elses -> . empty
    (63) elses -> . ELSE block
    (64) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 141
    ELSEIF          shift and go to state 142
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 139
    empty                          shift and go to state 140

state 133

    (60) cycle -> WHILE ( expression ) block .

    ;               reduce using rule 60 (cycle -> WHILE ( expression ) block .)


state 134

    (39) function -> FUN return_type ID ( parameters ) { . variable_declaration statutes } ;
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 143
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 135

    (65) parameters -> type ID other_parameters .

    )               reduce using rule 65 (parameters -> type ID other_parameters .)


state 136

    (66) other_parameters -> , . parameters
    (65) parameters -> . type ID other_parameters
    (42) type -> . INT
    (43) type -> . DEC
    (44) type -> . CHAR
    (45) type -> . STR
    (46) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 144
    type                           shift and go to state 107

state 137

    (67) other_parameters -> empty .

    )               reduce using rule 67 (other_parameters -> empty .)


state 138

    (58) assignment -> ID [ expression ] = expression .

    ;               reduce using rule 58 (assignment -> ID [ expression ] = expression .)


state 139

    (59) condition -> IF ( expression ) block elses .

    ;               reduce using rule 59 (condition -> IF ( expression ) block elses .)


state 140

    (62) elses -> empty .

    ;               reduce using rule 62 (elses -> empty .)


state 141

    (63) elses -> ELSE . block
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 145

state 142

    (64) elses -> ELSEIF . ( expression ) block elses

    (               shift and go to state 146


state 143

    (39) function -> FUN return_type ID ( parameters ) { variable_declaration . statutes } ;
    (47) statutes -> . statute ; statutes
    (48) statutes -> . empty
    (49) statute -> . call
    (50) statute -> . assignment
    (51) statute -> . condition
    (52) statute -> . cycle
    (53) statute -> . special
    (2) empty -> .
    (54) call -> . ID ( expressions )
    (57) assignment -> . ID = expression
    (58) assignment -> . ID [ expression ] = expression
    (59) condition -> . IF ( expression ) block elses
    (60) cycle -> . WHILE ( expression ) block
    (61) special -> . SPECIAL_ID ( expressions )

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    SPECIAL_ID      shift and go to state 42

    statutes                       shift and go to state 147
    statute                        shift and go to state 32
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38

state 144

    (66) other_parameters -> , parameters .

    )               reduce using rule 66 (other_parameters -> , parameters .)


state 145

    (63) elses -> ELSE block .

    ;               reduce using rule 63 (elses -> ELSE block .)


state 146

    (64) elses -> ELSEIF ( . expression ) block elses
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (68) const -> . id
    (69) const -> . call
    (70) const -> . special
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (54) call -> . ID ( expressions )
    (61) special -> . SPECIAL_ID ( expressions )

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 50
    -               shift and go to state 51
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 56
    NOT             shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    INT_VAL         shift and go to state 64
    DEC_VAL         shift and go to state 65
    CHAR_VAL        shift and go to state 66
    STR_VAL         shift and go to state 67
    BOOL_VAL        shift and go to state 68
    ID              shift and go to state 46
    SPECIAL_ID      shift and go to state 42

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 148
    level1                         shift and go to state 48
    level2                         shift and go to state 49
    level3                         shift and go to state 52
    level4                         shift and go to state 53
    level5                         shift and go to state 54
    level6                         shift and go to state 55
    const                          shift and go to state 57
    id                             shift and go to state 61
    call                           shift and go to state 62
    special                        shift and go to state 63

state 147

    (39) function -> FUN return_type ID ( parameters ) { variable_declaration statutes . } ;

    }               shift and go to state 149


state 148

    (64) elses -> ELSEIF ( expression . ) block elses

    )               shift and go to state 150


state 149

    (39) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } . ;

    ;               shift and go to state 151


state 150

    (64) elses -> ELSEIF ( expression ) . block elses
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 152

state 151

    (39) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .

    FUN             reduce using rule 39 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)
    {               reduce using rule 39 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)


state 152

    (64) elses -> ELSEIF ( expression ) block . elses
    (62) elses -> . empty
    (63) elses -> . ELSE block
    (64) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 141
    ELSEIF          shift and go to state 142
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 153
    empty                          shift and go to state 140

state 153

    (64) elses -> ELSEIF ( expression ) block elses .

    ;               reduce using rule 64 (elses -> ELSEIF ( expression ) block elses .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 30 resolved as shift
WARNING: shift/reduce conflict for - in state 30 resolved as shift
WARNING: shift/reduce conflict for + in state 56 resolved as shift
WARNING: shift/reduce conflict for - in state 56 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 73 resolved as shift
WARNING: shift/reduce conflict for - in state 73 resolved as shift
WARNING: shift/reduce conflict for + in state 74 resolved as shift
WARNING: shift/reduce conflict for - in state 74 resolved as shift
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 79 resolved as shift
WARNING: shift/reduce conflict for - in state 79 resolved as shift
WARNING: shift/reduce conflict for + in state 123 resolved as shift
WARNING: shift/reduce conflict for - in state 123 resolved as shift
WARNING: shift/reduce conflict for + in state 131 resolved as shift
WARNING: shift/reduce conflict for - in state 131 resolved as shift
WARNING: shift/reduce conflict for + in state 146 resolved as shift
WARNING: shift/reduce conflict for - in state 146 resolved as shift
