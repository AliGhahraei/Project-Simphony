Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; variable_declaration function_declaration block
Rule 2     empty -> <empty>
Rule 3     variable_declaration -> type ids ; variable_declaration
Rule 4     variable_declaration -> empty
Rule 5     ids -> id other_ids
Rule 6     other_ids -> , ids
Rule 7     other_ids -> empty
Rule 8     id -> ID
Rule 9     id -> ID [ expression ]
Rule 10    expression -> level1
Rule 11    expression -> level1 EXPONENTIATION level1
Rule 12    level1 -> level2
Rule 13    level1 -> + level2
Rule 14    level1 -> - level2
Rule 15    level2 -> level3
Rule 16    level2 -> level3 OR level3
Rule 17    level2 -> level3 AND level3
Rule 18    level3 -> level4
Rule 19    level3 -> level4 < level4
Rule 20    level3 -> level4 > level4
Rule 21    level3 -> level4 LESS_EQUAL_THAN level4
Rule 22    level3 -> level4 GREATER_EQUAL_THAN level4
Rule 23    level3 -> level4 EQUALS level4
Rule 24    level4 -> level5
Rule 25    level4 -> level5 + level5
Rule 26    level4 -> level5 - level5
Rule 27    level5 -> level6
Rule 28    level5 -> level6 * level6
Rule 29    level5 -> level6 / level6
Rule 30    level5 -> level6 MOD level6
Rule 31    level5 -> <empty>
Rule 32    level6 -> ( expression )
Rule 33    level6 -> const
Rule 34    level6 -> NOT const
Rule 35    level6 -> INCREMENT const
Rule 36    level6 -> DECREMENT const
Rule 37    level6 -> call
Rule 38    level6 -> NOT call
Rule 39    level6 -> INCREMENT call
Rule 40    level6 -> DECREMENT call
Rule 41    function_declaration -> function function_declaration
Rule 42    function_declaration -> empty
Rule 43    function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;
Rule 44    return_type -> type
Rule 45    return_type -> VOID
Rule 46    type -> INT
Rule 47    type -> DEC
Rule 48    type -> CHAR
Rule 49    type -> STR
Rule 50    type -> BOOL
Rule 51    statutes -> call
Rule 52    statutes -> assignment
Rule 53    statutes -> condition
Rule 54    statutes -> cycle
Rule 55    statutes -> special
Rule 56    call -> ID ( expressions ) ;
Rule 57    expressions -> expression
Rule 58    expressions -> expression , expressions
Rule 59    assignment -> ID = expression ;
Rule 60    assignment -> ID [ expression ] = expression ;
Rule 61    condition -> IF ( expression ) block elses ;
Rule 62    cycle -> WHILE ( expression ) block ;
Rule 63    special -> SPECIAL_ID ( expressions ) ;
Rule 64    elses -> empty
Rule 65    elses -> ELSE block
Rule 66    elses -> ELSEIF ( expression ) block elses
Rule 67    parameters -> type ID other_parameters
Rule 68    other_parameters -> , parameters
Rule 69    other_parameters -> empty
Rule 70    const -> id
Rule 71    const -> INT_VAL
Rule 72    const -> DEC_VAL
Rule 73    const -> CHAR_VAL
Rule 74    const -> STR_VAL
Rule 75    const -> BOOL_VAL
Rule 76    block -> { statutes }

Terminals, with rules where they appear

(                    : 32 43 56 61 62 63 66
)                    : 32 43 56 61 62 63 66
*                    : 28
+                    : 13 25
,                    : 6 58 68
-                    : 14 26
/                    : 29
;                    : 1 3 43 56 59 60 61 62 63
<                    : 19
=                    : 59 60
>                    : 20
AND                  : 17
BOOL                 : 50
BOOL_VAL             : 75
CHAR                 : 48
CHAR_VAL             : 73
DEC                  : 47
DECREMENT            : 36 40
DEC_VAL              : 72
ELSE                 : 65
ELSEIF               : 66
EQUALS               : 23
EXPONENTIATION       : 11
FUN                  : 43
GREATER_EQUAL_THAN   : 22
ID                   : 1 8 9 43 56 59 60 67
IF                   : 61
INCREMENT            : 35 39
INT                  : 46
INT_VAL              : 71
LESS_EQUAL_THAN      : 21
MOD                  : 30
NOT                  : 34 38
OR                   : 16
PROGRAM              : 1
SPECIAL_ID           : 63
STR                  : 49
STR_VAL              : 74
VOID                 : 45
WHILE                : 62
[                    : 9 60
]                    : 9 60
error                : 
{                    : 43 76
}                    : 43 76

Nonterminals, with rules where they appear

assignment           : 52
block                : 1 61 62 65 66
call                 : 37 38 39 40 51
condition            : 53
const                : 33 34 35 36
cycle                : 54
elses                : 61 66
empty                : 4 7 42 64 69
expression           : 9 32 57 58 59 60 60 61 62 66
expressions          : 56 58 63
function             : 41
function_declaration : 1 41
id                   : 5 70
ids                  : 3 6
level1               : 10 11 11
level2               : 12 13 14
level3               : 15 16 16 17 17
level4               : 18 19 19 20 20 21 21 22 22 23 23
level5               : 24 25 25 26 26
level6               : 27 28 28 29 29 30 30
other_ids            : 5
other_parameters     : 67
parameters           : 43 68
program              : 0
return_type          : 43
special              : 55
statutes             : 43 76
type                 : 3 44 67
variable_declaration : 1 3 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; variable_declaration function_declaration block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; variable_declaration function_declaration block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; variable_declaration function_declaration block

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . variable_declaration function_declaration block
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 5
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID ; variable_declaration . function_declaration block
    (41) function_declaration -> . function function_declaration
    (42) function_declaration -> . empty
    (43) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function_declaration           shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 6

    (3) variable_declaration -> type . ids ; variable_declaration
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 17
    id                             shift and go to state 18

state 7

    (4) variable_declaration -> empty .

    FUN             reduce using rule 4 (variable_declaration -> empty .)
    {               reduce using rule 4 (variable_declaration -> empty .)
    ID              reduce using rule 4 (variable_declaration -> empty .)
    IF              reduce using rule 4 (variable_declaration -> empty .)
    WHILE           reduce using rule 4 (variable_declaration -> empty .)
    SPECIAL_ID      reduce using rule 4 (variable_declaration -> empty .)


state 8

    (46) type -> INT .

    ID              reduce using rule 46 (type -> INT .)


state 9

    (47) type -> DEC .

    ID              reduce using rule 47 (type -> DEC .)


state 10

    (48) type -> CHAR .

    ID              reduce using rule 48 (type -> CHAR .)


state 11

    (49) type -> STR .

    ID              reduce using rule 49 (type -> STR .)


state 12

    (50) type -> BOOL .

    ID              reduce using rule 50 (type -> BOOL .)


state 13

    (1) program -> PROGRAM ID ; variable_declaration function_declaration . block
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 20

state 14

    (41) function_declaration -> function . function_declaration
    (41) function_declaration -> . function function_declaration
    (42) function_declaration -> . empty
    (43) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function                       shift and go to state 14
    function_declaration           shift and go to state 22
    empty                          shift and go to state 15

state 15

    (42) function_declaration -> empty .

    {               reduce using rule 42 (function_declaration -> empty .)


state 16

    (43) function -> FUN . return_type ID ( parameters ) { variable_declaration statutes } ;
    (44) return_type -> . type
    (45) return_type -> . VOID
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL

    VOID            shift and go to state 25
    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    return_type                    shift and go to state 23
    type                           shift and go to state 24

state 17

    (3) variable_declaration -> type ids . ; variable_declaration

    ;               shift and go to state 26


state 18

    (5) ids -> id . other_ids
    (6) other_ids -> . , ids
    (7) other_ids -> . empty
    (2) empty -> .

    ,               shift and go to state 28
    ;               reduce using rule 2 (empty -> .)

    other_ids                      shift and go to state 27
    empty                          shift and go to state 29

state 19

    (8) id -> ID .
    (9) id -> ID . [ expression ]

    ,               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30


state 20

    (1) program -> PROGRAM ID ; variable_declaration function_declaration block .

    $end            reduce using rule 1 (program -> PROGRAM ID ; variable_declaration function_declaration block .)


state 21

    (76) block -> { . statutes }
    (51) statutes -> . call
    (52) statutes -> . assignment
    (53) statutes -> . condition
    (54) statutes -> . cycle
    (55) statutes -> . special
    (56) call -> . ID ( expressions ) ;
    (59) assignment -> . ID = expression ;
    (60) assignment -> . ID [ expression ] = expression ;
    (61) condition -> . IF ( expression ) block elses ;
    (62) cycle -> . WHILE ( expression ) block ;
    (63) special -> . SPECIAL_ID ( expressions ) ;

    ID              shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    SPECIAL_ID      shift and go to state 40

    statutes                       shift and go to state 31
    call                           shift and go to state 32
    assignment                     shift and go to state 33
    condition                      shift and go to state 34
    cycle                          shift and go to state 35
    special                        shift and go to state 36

state 22

    (41) function_declaration -> function function_declaration .

    {               reduce using rule 41 (function_declaration -> function function_declaration .)


state 23

    (43) function -> FUN return_type . ID ( parameters ) { variable_declaration statutes } ;

    ID              shift and go to state 41


state 24

    (44) return_type -> type .

    ID              reduce using rule 44 (return_type -> type .)


state 25

    (45) return_type -> VOID .

    ID              reduce using rule 45 (return_type -> VOID .)


state 26

    (3) variable_declaration -> type ids ; . variable_declaration
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)

    type                           shift and go to state 6
    variable_declaration           shift and go to state 42
    empty                          shift and go to state 7

state 27

    (5) ids -> id other_ids .

    ;               reduce using rule 5 (ids -> id other_ids .)


state 28

    (6) other_ids -> , . ids
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 43
    id                             shift and go to state 18

state 29

    (7) other_ids -> empty .

    ;               reduce using rule 7 (other_ids -> empty .)


state 30

    (9) id -> ID [ . expression ]
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 45
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 31

    (76) block -> { statutes . }

    }               shift and go to state 66


state 32

    (51) statutes -> call .

    }               reduce using rule 51 (statutes -> call .)


state 33

    (52) statutes -> assignment .

    }               reduce using rule 52 (statutes -> assignment .)


state 34

    (53) statutes -> condition .

    }               reduce using rule 53 (statutes -> condition .)


state 35

    (54) statutes -> cycle .

    }               reduce using rule 54 (statutes -> cycle .)


state 36

    (55) statutes -> special .

    }               reduce using rule 55 (statutes -> special .)


state 37

    (56) call -> ID . ( expressions ) ;
    (59) assignment -> ID . = expression ;
    (60) assignment -> ID . [ expression ] = expression ;

    (               shift and go to state 67
    =               shift and go to state 68
    [               shift and go to state 69


state 38

    (61) condition -> IF . ( expression ) block elses ;

    (               shift and go to state 70


state 39

    (62) cycle -> WHILE . ( expression ) block ;

    (               shift and go to state 71


state 40

    (63) special -> SPECIAL_ID . ( expressions ) ;

    (               shift and go to state 72


state 41

    (43) function -> FUN return_type ID . ( parameters ) { variable_declaration statutes } ;

    (               shift and go to state 73


state 42

    (3) variable_declaration -> type ids ; variable_declaration .

    FUN             reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    {               reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    ID              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    IF              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    WHILE           reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    SPECIAL_ID      reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)


state 43

    (6) other_ids -> , ids .

    ;               reduce using rule 6 (other_ids -> , ids .)


state 44

    (56) call -> ID . ( expressions ) ;
    (8) id -> ID .
    (9) id -> ID . [ expression ]

    (               shift and go to state 67
    *               reduce using rule 8 (id -> ID .)
    /               reduce using rule 8 (id -> ID .)
    MOD             reduce using rule 8 (id -> ID .)
    +               reduce using rule 8 (id -> ID .)
    -               reduce using rule 8 (id -> ID .)
    <               reduce using rule 8 (id -> ID .)
    >               reduce using rule 8 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 8 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 8 (id -> ID .)
    EQUALS          reduce using rule 8 (id -> ID .)
    OR              reduce using rule 8 (id -> ID .)
    AND             reduce using rule 8 (id -> ID .)
    EXPONENTIATION  reduce using rule 8 (id -> ID .)
    ]               reduce using rule 8 (id -> ID .)
    )               reduce using rule 8 (id -> ID .)
    ,               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30


state 45

    (9) id -> ID [ expression . ]

    ]               shift and go to state 74


state 46

    (10) expression -> level1 .
    (11) expression -> level1 . EXPONENTIATION level1

    ]               reduce using rule 10 (expression -> level1 .)
    )               reduce using rule 10 (expression -> level1 .)
    ,               reduce using rule 10 (expression -> level1 .)
    ;               reduce using rule 10 (expression -> level1 .)
    EXPONENTIATION  shift and go to state 75


state 47

    (12) level1 -> level2 .

    EXPONENTIATION  reduce using rule 12 (level1 -> level2 .)
    ]               reduce using rule 12 (level1 -> level2 .)
    )               reduce using rule 12 (level1 -> level2 .)
    ,               reduce using rule 12 (level1 -> level2 .)
    ;               reduce using rule 12 (level1 -> level2 .)


state 48

    (13) level1 -> + . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level2                         shift and go to state 76
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 49

    (14) level1 -> - . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level2                         shift and go to state 77
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 50

    (15) level2 -> level3 .
    (16) level2 -> level3 . OR level3
    (17) level2 -> level3 . AND level3

    EXPONENTIATION  reduce using rule 15 (level2 -> level3 .)
    ]               reduce using rule 15 (level2 -> level3 .)
    )               reduce using rule 15 (level2 -> level3 .)
    ,               reduce using rule 15 (level2 -> level3 .)
    ;               reduce using rule 15 (level2 -> level3 .)
    OR              shift and go to state 78
    AND             shift and go to state 79


state 51

    (18) level3 -> level4 .
    (19) level3 -> level4 . < level4
    (20) level3 -> level4 . > level4
    (21) level3 -> level4 . LESS_EQUAL_THAN level4
    (22) level3 -> level4 . GREATER_EQUAL_THAN level4
    (23) level3 -> level4 . EQUALS level4

    OR              reduce using rule 18 (level3 -> level4 .)
    AND             reduce using rule 18 (level3 -> level4 .)
    EXPONENTIATION  reduce using rule 18 (level3 -> level4 .)
    ]               reduce using rule 18 (level3 -> level4 .)
    )               reduce using rule 18 (level3 -> level4 .)
    ,               reduce using rule 18 (level3 -> level4 .)
    ;               reduce using rule 18 (level3 -> level4 .)
    <               shift and go to state 80
    >               shift and go to state 81
    LESS_EQUAL_THAN shift and go to state 82
    GREATER_EQUAL_THAN shift and go to state 83
    EQUALS          shift and go to state 84


state 52

    (24) level4 -> level5 .
    (25) level4 -> level5 . + level5
    (26) level4 -> level5 . - level5

    <               reduce using rule 24 (level4 -> level5 .)
    >               reduce using rule 24 (level4 -> level5 .)
    LESS_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    GREATER_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    EQUALS          reduce using rule 24 (level4 -> level5 .)
    OR              reduce using rule 24 (level4 -> level5 .)
    AND             reduce using rule 24 (level4 -> level5 .)
    EXPONENTIATION  reduce using rule 24 (level4 -> level5 .)
    ]               reduce using rule 24 (level4 -> level5 .)
    )               reduce using rule 24 (level4 -> level5 .)
    ,               reduce using rule 24 (level4 -> level5 .)
    ;               reduce using rule 24 (level4 -> level5 .)
    +               shift and go to state 85
    -               shift and go to state 86


state 53

    (27) level5 -> level6 .
    (28) level5 -> level6 . * level6
    (29) level5 -> level6 . / level6
    (30) level5 -> level6 . MOD level6

    +               reduce using rule 27 (level5 -> level6 .)
    -               reduce using rule 27 (level5 -> level6 .)
    <               reduce using rule 27 (level5 -> level6 .)
    >               reduce using rule 27 (level5 -> level6 .)
    LESS_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    GREATER_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    EQUALS          reduce using rule 27 (level5 -> level6 .)
    OR              reduce using rule 27 (level5 -> level6 .)
    AND             reduce using rule 27 (level5 -> level6 .)
    EXPONENTIATION  reduce using rule 27 (level5 -> level6 .)
    ]               reduce using rule 27 (level5 -> level6 .)
    )               reduce using rule 27 (level5 -> level6 .)
    ,               reduce using rule 27 (level5 -> level6 .)
    ;               reduce using rule 27 (level5 -> level6 .)
    *               shift and go to state 87
    /               shift and go to state 88
    MOD             shift and go to state 89


state 54

    (32) level6 -> ( . expression )
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 90
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 55

    (33) level6 -> const .

    *               reduce using rule 33 (level6 -> const .)
    /               reduce using rule 33 (level6 -> const .)
    MOD             reduce using rule 33 (level6 -> const .)
    +               reduce using rule 33 (level6 -> const .)
    -               reduce using rule 33 (level6 -> const .)
    <               reduce using rule 33 (level6 -> const .)
    >               reduce using rule 33 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 33 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 33 (level6 -> const .)
    EQUALS          reduce using rule 33 (level6 -> const .)
    OR              reduce using rule 33 (level6 -> const .)
    AND             reduce using rule 33 (level6 -> const .)
    EXPONENTIATION  reduce using rule 33 (level6 -> const .)
    ]               reduce using rule 33 (level6 -> const .)
    )               reduce using rule 33 (level6 -> const .)
    ,               reduce using rule 33 (level6 -> const .)
    ;               reduce using rule 33 (level6 -> const .)


state 56

    (34) level6 -> NOT . const
    (38) level6 -> NOT . call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    const                          shift and go to state 91
    call                           shift and go to state 92
    id                             shift and go to state 60

state 57

    (35) level6 -> INCREMENT . const
    (39) level6 -> INCREMENT . call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    const                          shift and go to state 93
    call                           shift and go to state 94
    id                             shift and go to state 60

state 58

    (36) level6 -> DECREMENT . const
    (40) level6 -> DECREMENT . call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    const                          shift and go to state 95
    call                           shift and go to state 96
    id                             shift and go to state 60

state 59

    (37) level6 -> call .

    *               reduce using rule 37 (level6 -> call .)
    /               reduce using rule 37 (level6 -> call .)
    MOD             reduce using rule 37 (level6 -> call .)
    +               reduce using rule 37 (level6 -> call .)
    -               reduce using rule 37 (level6 -> call .)
    <               reduce using rule 37 (level6 -> call .)
    >               reduce using rule 37 (level6 -> call .)
    LESS_EQUAL_THAN reduce using rule 37 (level6 -> call .)
    GREATER_EQUAL_THAN reduce using rule 37 (level6 -> call .)
    EQUALS          reduce using rule 37 (level6 -> call .)
    OR              reduce using rule 37 (level6 -> call .)
    AND             reduce using rule 37 (level6 -> call .)
    EXPONENTIATION  reduce using rule 37 (level6 -> call .)
    ]               reduce using rule 37 (level6 -> call .)
    )               reduce using rule 37 (level6 -> call .)
    ,               reduce using rule 37 (level6 -> call .)
    ;               reduce using rule 37 (level6 -> call .)


state 60

    (70) const -> id .

    *               reduce using rule 70 (const -> id .)
    /               reduce using rule 70 (const -> id .)
    MOD             reduce using rule 70 (const -> id .)
    +               reduce using rule 70 (const -> id .)
    -               reduce using rule 70 (const -> id .)
    <               reduce using rule 70 (const -> id .)
    >               reduce using rule 70 (const -> id .)
    LESS_EQUAL_THAN reduce using rule 70 (const -> id .)
    GREATER_EQUAL_THAN reduce using rule 70 (const -> id .)
    EQUALS          reduce using rule 70 (const -> id .)
    OR              reduce using rule 70 (const -> id .)
    AND             reduce using rule 70 (const -> id .)
    EXPONENTIATION  reduce using rule 70 (const -> id .)
    ]               reduce using rule 70 (const -> id .)
    )               reduce using rule 70 (const -> id .)
    ,               reduce using rule 70 (const -> id .)
    ;               reduce using rule 70 (const -> id .)


state 61

    (71) const -> INT_VAL .

    *               reduce using rule 71 (const -> INT_VAL .)
    /               reduce using rule 71 (const -> INT_VAL .)
    MOD             reduce using rule 71 (const -> INT_VAL .)
    +               reduce using rule 71 (const -> INT_VAL .)
    -               reduce using rule 71 (const -> INT_VAL .)
    <               reduce using rule 71 (const -> INT_VAL .)
    >               reduce using rule 71 (const -> INT_VAL .)
    LESS_EQUAL_THAN reduce using rule 71 (const -> INT_VAL .)
    GREATER_EQUAL_THAN reduce using rule 71 (const -> INT_VAL .)
    EQUALS          reduce using rule 71 (const -> INT_VAL .)
    OR              reduce using rule 71 (const -> INT_VAL .)
    AND             reduce using rule 71 (const -> INT_VAL .)
    EXPONENTIATION  reduce using rule 71 (const -> INT_VAL .)
    ]               reduce using rule 71 (const -> INT_VAL .)
    )               reduce using rule 71 (const -> INT_VAL .)
    ,               reduce using rule 71 (const -> INT_VAL .)
    ;               reduce using rule 71 (const -> INT_VAL .)


state 62

    (72) const -> DEC_VAL .

    *               reduce using rule 72 (const -> DEC_VAL .)
    /               reduce using rule 72 (const -> DEC_VAL .)
    MOD             reduce using rule 72 (const -> DEC_VAL .)
    +               reduce using rule 72 (const -> DEC_VAL .)
    -               reduce using rule 72 (const -> DEC_VAL .)
    <               reduce using rule 72 (const -> DEC_VAL .)
    >               reduce using rule 72 (const -> DEC_VAL .)
    LESS_EQUAL_THAN reduce using rule 72 (const -> DEC_VAL .)
    GREATER_EQUAL_THAN reduce using rule 72 (const -> DEC_VAL .)
    EQUALS          reduce using rule 72 (const -> DEC_VAL .)
    OR              reduce using rule 72 (const -> DEC_VAL .)
    AND             reduce using rule 72 (const -> DEC_VAL .)
    EXPONENTIATION  reduce using rule 72 (const -> DEC_VAL .)
    ]               reduce using rule 72 (const -> DEC_VAL .)
    )               reduce using rule 72 (const -> DEC_VAL .)
    ,               reduce using rule 72 (const -> DEC_VAL .)
    ;               reduce using rule 72 (const -> DEC_VAL .)


state 63

    (73) const -> CHAR_VAL .

    *               reduce using rule 73 (const -> CHAR_VAL .)
    /               reduce using rule 73 (const -> CHAR_VAL .)
    MOD             reduce using rule 73 (const -> CHAR_VAL .)
    +               reduce using rule 73 (const -> CHAR_VAL .)
    -               reduce using rule 73 (const -> CHAR_VAL .)
    <               reduce using rule 73 (const -> CHAR_VAL .)
    >               reduce using rule 73 (const -> CHAR_VAL .)
    LESS_EQUAL_THAN reduce using rule 73 (const -> CHAR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 73 (const -> CHAR_VAL .)
    EQUALS          reduce using rule 73 (const -> CHAR_VAL .)
    OR              reduce using rule 73 (const -> CHAR_VAL .)
    AND             reduce using rule 73 (const -> CHAR_VAL .)
    EXPONENTIATION  reduce using rule 73 (const -> CHAR_VAL .)
    ]               reduce using rule 73 (const -> CHAR_VAL .)
    )               reduce using rule 73 (const -> CHAR_VAL .)
    ,               reduce using rule 73 (const -> CHAR_VAL .)
    ;               reduce using rule 73 (const -> CHAR_VAL .)


state 64

    (74) const -> STR_VAL .

    *               reduce using rule 74 (const -> STR_VAL .)
    /               reduce using rule 74 (const -> STR_VAL .)
    MOD             reduce using rule 74 (const -> STR_VAL .)
    +               reduce using rule 74 (const -> STR_VAL .)
    -               reduce using rule 74 (const -> STR_VAL .)
    <               reduce using rule 74 (const -> STR_VAL .)
    >               reduce using rule 74 (const -> STR_VAL .)
    LESS_EQUAL_THAN reduce using rule 74 (const -> STR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 74 (const -> STR_VAL .)
    EQUALS          reduce using rule 74 (const -> STR_VAL .)
    OR              reduce using rule 74 (const -> STR_VAL .)
    AND             reduce using rule 74 (const -> STR_VAL .)
    EXPONENTIATION  reduce using rule 74 (const -> STR_VAL .)
    ]               reduce using rule 74 (const -> STR_VAL .)
    )               reduce using rule 74 (const -> STR_VAL .)
    ,               reduce using rule 74 (const -> STR_VAL .)
    ;               reduce using rule 74 (const -> STR_VAL .)


state 65

    (75) const -> BOOL_VAL .

    *               reduce using rule 75 (const -> BOOL_VAL .)
    /               reduce using rule 75 (const -> BOOL_VAL .)
    MOD             reduce using rule 75 (const -> BOOL_VAL .)
    +               reduce using rule 75 (const -> BOOL_VAL .)
    -               reduce using rule 75 (const -> BOOL_VAL .)
    <               reduce using rule 75 (const -> BOOL_VAL .)
    >               reduce using rule 75 (const -> BOOL_VAL .)
    LESS_EQUAL_THAN reduce using rule 75 (const -> BOOL_VAL .)
    GREATER_EQUAL_THAN reduce using rule 75 (const -> BOOL_VAL .)
    EQUALS          reduce using rule 75 (const -> BOOL_VAL .)
    OR              reduce using rule 75 (const -> BOOL_VAL .)
    AND             reduce using rule 75 (const -> BOOL_VAL .)
    EXPONENTIATION  reduce using rule 75 (const -> BOOL_VAL .)
    ]               reduce using rule 75 (const -> BOOL_VAL .)
    )               reduce using rule 75 (const -> BOOL_VAL .)
    ,               reduce using rule 75 (const -> BOOL_VAL .)
    ;               reduce using rule 75 (const -> BOOL_VAL .)


state 66

    (76) block -> { statutes } .

    $end            reduce using rule 76 (block -> { statutes } .)
    ELSE            reduce using rule 76 (block -> { statutes } .)
    ELSEIF          reduce using rule 76 (block -> { statutes } .)
    ;               reduce using rule 76 (block -> { statutes } .)


state 67

    (56) call -> ID ( . expressions ) ;
    (57) expressions -> . expression
    (58) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expressions                    shift and go to state 97
    expression                     shift and go to state 98
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 68

    (59) assignment -> ID = . expression ;
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 99
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 69

    (60) assignment -> ID [ . expression ] = expression ;
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 100
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 70

    (61) condition -> IF ( . expression ) block elses ;
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 101
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 71

    (62) cycle -> WHILE ( . expression ) block ;
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 102
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 72

    (63) special -> SPECIAL_ID ( . expressions ) ;
    (57) expressions -> . expression
    (58) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expressions                    shift and go to state 103
    expression                     shift and go to state 98
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 73

    (43) function -> FUN return_type ID ( . parameters ) { variable_declaration statutes } ;
    (67) parameters -> . type ID other_parameters
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 104
    type                           shift and go to state 105

state 74

    (9) id -> ID [ expression ] .

    ,               reduce using rule 9 (id -> ID [ expression ] .)
    ;               reduce using rule 9 (id -> ID [ expression ] .)
    *               reduce using rule 9 (id -> ID [ expression ] .)
    /               reduce using rule 9 (id -> ID [ expression ] .)
    MOD             reduce using rule 9 (id -> ID [ expression ] .)
    +               reduce using rule 9 (id -> ID [ expression ] .)
    -               reduce using rule 9 (id -> ID [ expression ] .)
    <               reduce using rule 9 (id -> ID [ expression ] .)
    >               reduce using rule 9 (id -> ID [ expression ] .)
    LESS_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    GREATER_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    EQUALS          reduce using rule 9 (id -> ID [ expression ] .)
    OR              reduce using rule 9 (id -> ID [ expression ] .)
    AND             reduce using rule 9 (id -> ID [ expression ] .)
    EXPONENTIATION  reduce using rule 9 (id -> ID [ expression ] .)
    ]               reduce using rule 9 (id -> ID [ expression ] .)
    )               reduce using rule 9 (id -> ID [ expression ] .)


state 75

    (11) expression -> level1 EXPONENTIATION . level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    level1                         shift and go to state 106
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 76

    (13) level1 -> + level2 .

    EXPONENTIATION  reduce using rule 13 (level1 -> + level2 .)
    ]               reduce using rule 13 (level1 -> + level2 .)
    )               reduce using rule 13 (level1 -> + level2 .)
    ,               reduce using rule 13 (level1 -> + level2 .)
    ;               reduce using rule 13 (level1 -> + level2 .)


state 77

    (14) level1 -> - level2 .

    EXPONENTIATION  reduce using rule 14 (level1 -> - level2 .)
    ]               reduce using rule 14 (level1 -> - level2 .)
    )               reduce using rule 14 (level1 -> - level2 .)
    ,               reduce using rule 14 (level1 -> - level2 .)
    ;               reduce using rule 14 (level1 -> - level2 .)


state 78

    (16) level2 -> level3 OR . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level3                         shift and go to state 107
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 79

    (17) level2 -> level3 AND . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level3                         shift and go to state 108
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 80

    (19) level3 -> level4 < . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level4                         shift and go to state 109
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 81

    (20) level3 -> level4 > . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level4                         shift and go to state 110
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 82

    (21) level3 -> level4 LESS_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level4                         shift and go to state 111
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 83

    (22) level3 -> level4 GREATER_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level4                         shift and go to state 112
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 84

    (23) level3 -> level4 EQUALS . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    +               reduce using rule 31 (level5 -> .)
    -               reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level4                         shift and go to state 113
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 85

    (25) level4 -> level5 + . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level5                         shift and go to state 114
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 86

    (26) level4 -> level5 - . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ]               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level5                         shift and go to state 115
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 87

    (28) level5 -> level6 * . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level6                         shift and go to state 116
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 88

    (29) level5 -> level6 / . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level6                         shift and go to state 117
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 89

    (30) level5 -> level6 MOD . level6
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

    level6                         shift and go to state 118
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 90

    (32) level6 -> ( expression . )

    )               shift and go to state 119


state 91

    (34) level6 -> NOT const .

    *               reduce using rule 34 (level6 -> NOT const .)
    /               reduce using rule 34 (level6 -> NOT const .)
    MOD             reduce using rule 34 (level6 -> NOT const .)
    +               reduce using rule 34 (level6 -> NOT const .)
    -               reduce using rule 34 (level6 -> NOT const .)
    <               reduce using rule 34 (level6 -> NOT const .)
    >               reduce using rule 34 (level6 -> NOT const .)
    LESS_EQUAL_THAN reduce using rule 34 (level6 -> NOT const .)
    GREATER_EQUAL_THAN reduce using rule 34 (level6 -> NOT const .)
    EQUALS          reduce using rule 34 (level6 -> NOT const .)
    OR              reduce using rule 34 (level6 -> NOT const .)
    AND             reduce using rule 34 (level6 -> NOT const .)
    EXPONENTIATION  reduce using rule 34 (level6 -> NOT const .)
    ]               reduce using rule 34 (level6 -> NOT const .)
    )               reduce using rule 34 (level6 -> NOT const .)
    ,               reduce using rule 34 (level6 -> NOT const .)
    ;               reduce using rule 34 (level6 -> NOT const .)


state 92

    (38) level6 -> NOT call .

    *               reduce using rule 38 (level6 -> NOT call .)
    /               reduce using rule 38 (level6 -> NOT call .)
    MOD             reduce using rule 38 (level6 -> NOT call .)
    +               reduce using rule 38 (level6 -> NOT call .)
    -               reduce using rule 38 (level6 -> NOT call .)
    <               reduce using rule 38 (level6 -> NOT call .)
    >               reduce using rule 38 (level6 -> NOT call .)
    LESS_EQUAL_THAN reduce using rule 38 (level6 -> NOT call .)
    GREATER_EQUAL_THAN reduce using rule 38 (level6 -> NOT call .)
    EQUALS          reduce using rule 38 (level6 -> NOT call .)
    OR              reduce using rule 38 (level6 -> NOT call .)
    AND             reduce using rule 38 (level6 -> NOT call .)
    EXPONENTIATION  reduce using rule 38 (level6 -> NOT call .)
    ]               reduce using rule 38 (level6 -> NOT call .)
    )               reduce using rule 38 (level6 -> NOT call .)
    ,               reduce using rule 38 (level6 -> NOT call .)
    ;               reduce using rule 38 (level6 -> NOT call .)


state 93

    (35) level6 -> INCREMENT const .

    *               reduce using rule 35 (level6 -> INCREMENT const .)
    /               reduce using rule 35 (level6 -> INCREMENT const .)
    MOD             reduce using rule 35 (level6 -> INCREMENT const .)
    +               reduce using rule 35 (level6 -> INCREMENT const .)
    -               reduce using rule 35 (level6 -> INCREMENT const .)
    <               reduce using rule 35 (level6 -> INCREMENT const .)
    >               reduce using rule 35 (level6 -> INCREMENT const .)
    LESS_EQUAL_THAN reduce using rule 35 (level6 -> INCREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 35 (level6 -> INCREMENT const .)
    EQUALS          reduce using rule 35 (level6 -> INCREMENT const .)
    OR              reduce using rule 35 (level6 -> INCREMENT const .)
    AND             reduce using rule 35 (level6 -> INCREMENT const .)
    EXPONENTIATION  reduce using rule 35 (level6 -> INCREMENT const .)
    ]               reduce using rule 35 (level6 -> INCREMENT const .)
    )               reduce using rule 35 (level6 -> INCREMENT const .)
    ,               reduce using rule 35 (level6 -> INCREMENT const .)
    ;               reduce using rule 35 (level6 -> INCREMENT const .)


state 94

    (39) level6 -> INCREMENT call .

    *               reduce using rule 39 (level6 -> INCREMENT call .)
    /               reduce using rule 39 (level6 -> INCREMENT call .)
    MOD             reduce using rule 39 (level6 -> INCREMENT call .)
    +               reduce using rule 39 (level6 -> INCREMENT call .)
    -               reduce using rule 39 (level6 -> INCREMENT call .)
    <               reduce using rule 39 (level6 -> INCREMENT call .)
    >               reduce using rule 39 (level6 -> INCREMENT call .)
    LESS_EQUAL_THAN reduce using rule 39 (level6 -> INCREMENT call .)
    GREATER_EQUAL_THAN reduce using rule 39 (level6 -> INCREMENT call .)
    EQUALS          reduce using rule 39 (level6 -> INCREMENT call .)
    OR              reduce using rule 39 (level6 -> INCREMENT call .)
    AND             reduce using rule 39 (level6 -> INCREMENT call .)
    EXPONENTIATION  reduce using rule 39 (level6 -> INCREMENT call .)
    ]               reduce using rule 39 (level6 -> INCREMENT call .)
    )               reduce using rule 39 (level6 -> INCREMENT call .)
    ,               reduce using rule 39 (level6 -> INCREMENT call .)
    ;               reduce using rule 39 (level6 -> INCREMENT call .)


state 95

    (36) level6 -> DECREMENT const .

    *               reduce using rule 36 (level6 -> DECREMENT const .)
    /               reduce using rule 36 (level6 -> DECREMENT const .)
    MOD             reduce using rule 36 (level6 -> DECREMENT const .)
    +               reduce using rule 36 (level6 -> DECREMENT const .)
    -               reduce using rule 36 (level6 -> DECREMENT const .)
    <               reduce using rule 36 (level6 -> DECREMENT const .)
    >               reduce using rule 36 (level6 -> DECREMENT const .)
    LESS_EQUAL_THAN reduce using rule 36 (level6 -> DECREMENT const .)
    GREATER_EQUAL_THAN reduce using rule 36 (level6 -> DECREMENT const .)
    EQUALS          reduce using rule 36 (level6 -> DECREMENT const .)
    OR              reduce using rule 36 (level6 -> DECREMENT const .)
    AND             reduce using rule 36 (level6 -> DECREMENT const .)
    EXPONENTIATION  reduce using rule 36 (level6 -> DECREMENT const .)
    ]               reduce using rule 36 (level6 -> DECREMENT const .)
    )               reduce using rule 36 (level6 -> DECREMENT const .)
    ,               reduce using rule 36 (level6 -> DECREMENT const .)
    ;               reduce using rule 36 (level6 -> DECREMENT const .)


state 96

    (40) level6 -> DECREMENT call .

    *               reduce using rule 40 (level6 -> DECREMENT call .)
    /               reduce using rule 40 (level6 -> DECREMENT call .)
    MOD             reduce using rule 40 (level6 -> DECREMENT call .)
    +               reduce using rule 40 (level6 -> DECREMENT call .)
    -               reduce using rule 40 (level6 -> DECREMENT call .)
    <               reduce using rule 40 (level6 -> DECREMENT call .)
    >               reduce using rule 40 (level6 -> DECREMENT call .)
    LESS_EQUAL_THAN reduce using rule 40 (level6 -> DECREMENT call .)
    GREATER_EQUAL_THAN reduce using rule 40 (level6 -> DECREMENT call .)
    EQUALS          reduce using rule 40 (level6 -> DECREMENT call .)
    OR              reduce using rule 40 (level6 -> DECREMENT call .)
    AND             reduce using rule 40 (level6 -> DECREMENT call .)
    EXPONENTIATION  reduce using rule 40 (level6 -> DECREMENT call .)
    ]               reduce using rule 40 (level6 -> DECREMENT call .)
    )               reduce using rule 40 (level6 -> DECREMENT call .)
    ,               reduce using rule 40 (level6 -> DECREMENT call .)
    ;               reduce using rule 40 (level6 -> DECREMENT call .)


state 97

    (56) call -> ID ( expressions . ) ;

    )               shift and go to state 120


state 98

    (57) expressions -> expression .
    (58) expressions -> expression . , expressions

    )               reduce using rule 57 (expressions -> expression .)
    ,               shift and go to state 121


state 99

    (59) assignment -> ID = expression . ;

    ;               shift and go to state 122


state 100

    (60) assignment -> ID [ expression . ] = expression ;

    ]               shift and go to state 123


state 101

    (61) condition -> IF ( expression . ) block elses ;

    )               shift and go to state 124


state 102

    (62) cycle -> WHILE ( expression . ) block ;

    )               shift and go to state 125


state 103

    (63) special -> SPECIAL_ID ( expressions . ) ;

    )               shift and go to state 126


state 104

    (43) function -> FUN return_type ID ( parameters . ) { variable_declaration statutes } ;

    )               shift and go to state 127


state 105

    (67) parameters -> type . ID other_parameters

    ID              shift and go to state 128


state 106

    (11) expression -> level1 EXPONENTIATION level1 .

    ]               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    )               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ,               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ;               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)


state 107

    (16) level2 -> level3 OR level3 .

    EXPONENTIATION  reduce using rule 16 (level2 -> level3 OR level3 .)
    ]               reduce using rule 16 (level2 -> level3 OR level3 .)
    )               reduce using rule 16 (level2 -> level3 OR level3 .)
    ,               reduce using rule 16 (level2 -> level3 OR level3 .)
    ;               reduce using rule 16 (level2 -> level3 OR level3 .)


state 108

    (17) level2 -> level3 AND level3 .

    EXPONENTIATION  reduce using rule 17 (level2 -> level3 AND level3 .)
    ]               reduce using rule 17 (level2 -> level3 AND level3 .)
    )               reduce using rule 17 (level2 -> level3 AND level3 .)
    ,               reduce using rule 17 (level2 -> level3 AND level3 .)
    ;               reduce using rule 17 (level2 -> level3 AND level3 .)


state 109

    (19) level3 -> level4 < level4 .

    OR              reduce using rule 19 (level3 -> level4 < level4 .)
    AND             reduce using rule 19 (level3 -> level4 < level4 .)
    EXPONENTIATION  reduce using rule 19 (level3 -> level4 < level4 .)
    ]               reduce using rule 19 (level3 -> level4 < level4 .)
    )               reduce using rule 19 (level3 -> level4 < level4 .)
    ,               reduce using rule 19 (level3 -> level4 < level4 .)
    ;               reduce using rule 19 (level3 -> level4 < level4 .)


state 110

    (20) level3 -> level4 > level4 .

    OR              reduce using rule 20 (level3 -> level4 > level4 .)
    AND             reduce using rule 20 (level3 -> level4 > level4 .)
    EXPONENTIATION  reduce using rule 20 (level3 -> level4 > level4 .)
    ]               reduce using rule 20 (level3 -> level4 > level4 .)
    )               reduce using rule 20 (level3 -> level4 > level4 .)
    ,               reduce using rule 20 (level3 -> level4 > level4 .)
    ;               reduce using rule 20 (level3 -> level4 > level4 .)


state 111

    (21) level3 -> level4 LESS_EQUAL_THAN level4 .

    OR              reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    AND             reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ]               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    )               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ,               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ;               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)


state 112

    (22) level3 -> level4 GREATER_EQUAL_THAN level4 .

    OR              reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    AND             reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ]               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    )               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ,               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ;               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)


state 113

    (23) level3 -> level4 EQUALS level4 .

    OR              reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    AND             reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    EXPONENTIATION  reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ]               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    )               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ,               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ;               reduce using rule 23 (level3 -> level4 EQUALS level4 .)


state 114

    (25) level4 -> level5 + level5 .

    <               reduce using rule 25 (level4 -> level5 + level5 .)
    >               reduce using rule 25 (level4 -> level5 + level5 .)
    LESS_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    GREATER_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    EQUALS          reduce using rule 25 (level4 -> level5 + level5 .)
    OR              reduce using rule 25 (level4 -> level5 + level5 .)
    AND             reduce using rule 25 (level4 -> level5 + level5 .)
    EXPONENTIATION  reduce using rule 25 (level4 -> level5 + level5 .)
    ]               reduce using rule 25 (level4 -> level5 + level5 .)
    )               reduce using rule 25 (level4 -> level5 + level5 .)
    ,               reduce using rule 25 (level4 -> level5 + level5 .)
    ;               reduce using rule 25 (level4 -> level5 + level5 .)


state 115

    (26) level4 -> level5 - level5 .

    <               reduce using rule 26 (level4 -> level5 - level5 .)
    >               reduce using rule 26 (level4 -> level5 - level5 .)
    LESS_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    GREATER_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    EQUALS          reduce using rule 26 (level4 -> level5 - level5 .)
    OR              reduce using rule 26 (level4 -> level5 - level5 .)
    AND             reduce using rule 26 (level4 -> level5 - level5 .)
    EXPONENTIATION  reduce using rule 26 (level4 -> level5 - level5 .)
    ]               reduce using rule 26 (level4 -> level5 - level5 .)
    )               reduce using rule 26 (level4 -> level5 - level5 .)
    ,               reduce using rule 26 (level4 -> level5 - level5 .)
    ;               reduce using rule 26 (level4 -> level5 - level5 .)


state 116

    (28) level5 -> level6 * level6 .

    +               reduce using rule 28 (level5 -> level6 * level6 .)
    -               reduce using rule 28 (level5 -> level6 * level6 .)
    <               reduce using rule 28 (level5 -> level6 * level6 .)
    >               reduce using rule 28 (level5 -> level6 * level6 .)
    LESS_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    GREATER_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    EQUALS          reduce using rule 28 (level5 -> level6 * level6 .)
    OR              reduce using rule 28 (level5 -> level6 * level6 .)
    AND             reduce using rule 28 (level5 -> level6 * level6 .)
    EXPONENTIATION  reduce using rule 28 (level5 -> level6 * level6 .)
    ]               reduce using rule 28 (level5 -> level6 * level6 .)
    )               reduce using rule 28 (level5 -> level6 * level6 .)
    ,               reduce using rule 28 (level5 -> level6 * level6 .)
    ;               reduce using rule 28 (level5 -> level6 * level6 .)


state 117

    (29) level5 -> level6 / level6 .

    +               reduce using rule 29 (level5 -> level6 / level6 .)
    -               reduce using rule 29 (level5 -> level6 / level6 .)
    <               reduce using rule 29 (level5 -> level6 / level6 .)
    >               reduce using rule 29 (level5 -> level6 / level6 .)
    LESS_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    GREATER_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    EQUALS          reduce using rule 29 (level5 -> level6 / level6 .)
    OR              reduce using rule 29 (level5 -> level6 / level6 .)
    AND             reduce using rule 29 (level5 -> level6 / level6 .)
    EXPONENTIATION  reduce using rule 29 (level5 -> level6 / level6 .)
    ]               reduce using rule 29 (level5 -> level6 / level6 .)
    )               reduce using rule 29 (level5 -> level6 / level6 .)
    ,               reduce using rule 29 (level5 -> level6 / level6 .)
    ;               reduce using rule 29 (level5 -> level6 / level6 .)


state 118

    (30) level5 -> level6 MOD level6 .

    +               reduce using rule 30 (level5 -> level6 MOD level6 .)
    -               reduce using rule 30 (level5 -> level6 MOD level6 .)
    <               reduce using rule 30 (level5 -> level6 MOD level6 .)
    >               reduce using rule 30 (level5 -> level6 MOD level6 .)
    LESS_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    GREATER_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    EQUALS          reduce using rule 30 (level5 -> level6 MOD level6 .)
    OR              reduce using rule 30 (level5 -> level6 MOD level6 .)
    AND             reduce using rule 30 (level5 -> level6 MOD level6 .)
    EXPONENTIATION  reduce using rule 30 (level5 -> level6 MOD level6 .)
    ]               reduce using rule 30 (level5 -> level6 MOD level6 .)
    )               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ,               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ;               reduce using rule 30 (level5 -> level6 MOD level6 .)


state 119

    (32) level6 -> ( expression ) .

    *               reduce using rule 32 (level6 -> ( expression ) .)
    /               reduce using rule 32 (level6 -> ( expression ) .)
    MOD             reduce using rule 32 (level6 -> ( expression ) .)
    +               reduce using rule 32 (level6 -> ( expression ) .)
    -               reduce using rule 32 (level6 -> ( expression ) .)
    <               reduce using rule 32 (level6 -> ( expression ) .)
    >               reduce using rule 32 (level6 -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 32 (level6 -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 32 (level6 -> ( expression ) .)
    EQUALS          reduce using rule 32 (level6 -> ( expression ) .)
    OR              reduce using rule 32 (level6 -> ( expression ) .)
    AND             reduce using rule 32 (level6 -> ( expression ) .)
    EXPONENTIATION  reduce using rule 32 (level6 -> ( expression ) .)
    ]               reduce using rule 32 (level6 -> ( expression ) .)
    )               reduce using rule 32 (level6 -> ( expression ) .)
    ,               reduce using rule 32 (level6 -> ( expression ) .)
    ;               reduce using rule 32 (level6 -> ( expression ) .)


state 120

    (56) call -> ID ( expressions ) . ;

    ;               shift and go to state 129


state 121

    (58) expressions -> expression , . expressions
    (57) expressions -> . expression
    (58) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ,               reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 98
    expressions                    shift and go to state 130
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 122

    (59) assignment -> ID = expression ; .

    }               reduce using rule 59 (assignment -> ID = expression ; .)


state 123

    (60) assignment -> ID [ expression ] . = expression ;

    =               shift and go to state 131


state 124

    (61) condition -> IF ( expression ) . block elses ;
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 132

state 125

    (62) cycle -> WHILE ( expression ) . block ;
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 133

state 126

    (63) special -> SPECIAL_ID ( expressions ) . ;

    ;               shift and go to state 134


state 127

    (43) function -> FUN return_type ID ( parameters ) . { variable_declaration statutes } ;

    {               shift and go to state 135


state 128

    (67) parameters -> type ID . other_parameters
    (68) other_parameters -> . , parameters
    (69) other_parameters -> . empty
    (2) empty -> .

    ,               shift and go to state 137
    )               reduce using rule 2 (empty -> .)

    other_parameters               shift and go to state 136
    empty                          shift and go to state 138

state 129

    (56) call -> ID ( expressions ) ; .

    }               reduce using rule 56 (call -> ID ( expressions ) ; .)
    *               reduce using rule 56 (call -> ID ( expressions ) ; .)
    /               reduce using rule 56 (call -> ID ( expressions ) ; .)
    MOD             reduce using rule 56 (call -> ID ( expressions ) ; .)
    +               reduce using rule 56 (call -> ID ( expressions ) ; .)
    -               reduce using rule 56 (call -> ID ( expressions ) ; .)
    <               reduce using rule 56 (call -> ID ( expressions ) ; .)
    >               reduce using rule 56 (call -> ID ( expressions ) ; .)
    LESS_EQUAL_THAN reduce using rule 56 (call -> ID ( expressions ) ; .)
    GREATER_EQUAL_THAN reduce using rule 56 (call -> ID ( expressions ) ; .)
    EQUALS          reduce using rule 56 (call -> ID ( expressions ) ; .)
    OR              reduce using rule 56 (call -> ID ( expressions ) ; .)
    AND             reduce using rule 56 (call -> ID ( expressions ) ; .)
    EXPONENTIATION  reduce using rule 56 (call -> ID ( expressions ) ; .)
    ]               reduce using rule 56 (call -> ID ( expressions ) ; .)
    )               reduce using rule 56 (call -> ID ( expressions ) ; .)
    ,               reduce using rule 56 (call -> ID ( expressions ) ; .)
    ;               reduce using rule 56 (call -> ID ( expressions ) ; .)


state 130

    (58) expressions -> expression , expressions .

    )               reduce using rule 58 (expressions -> expression , expressions .)


state 131

    (60) assignment -> ID [ expression ] = . expression ;
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    ;               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 139
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 132

    (61) condition -> IF ( expression ) block . elses ;
    (64) elses -> . empty
    (65) elses -> . ELSE block
    (66) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 142
    ELSEIF          shift and go to state 143
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 140
    empty                          shift and go to state 141

state 133

    (62) cycle -> WHILE ( expression ) block . ;

    ;               shift and go to state 144


state 134

    (63) special -> SPECIAL_ID ( expressions ) ; .

    }               reduce using rule 63 (special -> SPECIAL_ID ( expressions ) ; .)


state 135

    (43) function -> FUN return_type ID ( parameters ) { . variable_declaration statutes } ;
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 145
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 136

    (67) parameters -> type ID other_parameters .

    )               reduce using rule 67 (parameters -> type ID other_parameters .)


state 137

    (68) other_parameters -> , . parameters
    (67) parameters -> . type ID other_parameters
    (46) type -> . INT
    (47) type -> . DEC
    (48) type -> . CHAR
    (49) type -> . STR
    (50) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 146
    type                           shift and go to state 105

state 138

    (69) other_parameters -> empty .

    )               reduce using rule 69 (other_parameters -> empty .)


state 139

    (60) assignment -> ID [ expression ] = expression . ;

    ;               shift and go to state 147


state 140

    (61) condition -> IF ( expression ) block elses . ;

    ;               shift and go to state 148


state 141

    (64) elses -> empty .

    ;               reduce using rule 64 (elses -> empty .)


state 142

    (65) elses -> ELSE . block
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 149

state 143

    (66) elses -> ELSEIF . ( expression ) block elses

    (               shift and go to state 150


state 144

    (62) cycle -> WHILE ( expression ) block ; .

    }               reduce using rule 62 (cycle -> WHILE ( expression ) block ; .)


state 145

    (43) function -> FUN return_type ID ( parameters ) { variable_declaration . statutes } ;
    (51) statutes -> . call
    (52) statutes -> . assignment
    (53) statutes -> . condition
    (54) statutes -> . cycle
    (55) statutes -> . special
    (56) call -> . ID ( expressions ) ;
    (59) assignment -> . ID = expression ;
    (60) assignment -> . ID [ expression ] = expression ;
    (61) condition -> . IF ( expression ) block elses ;
    (62) cycle -> . WHILE ( expression ) block ;
    (63) special -> . SPECIAL_ID ( expressions ) ;

    ID              shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    SPECIAL_ID      shift and go to state 40

    statutes                       shift and go to state 151
    call                           shift and go to state 32
    assignment                     shift and go to state 33
    condition                      shift and go to state 34
    cycle                          shift and go to state 35
    special                        shift and go to state 36

state 146

    (68) other_parameters -> , parameters .

    )               reduce using rule 68 (other_parameters -> , parameters .)


state 147

    (60) assignment -> ID [ expression ] = expression ; .

    }               reduce using rule 60 (assignment -> ID [ expression ] = expression ; .)


state 148

    (61) condition -> IF ( expression ) block elses ; .

    }               reduce using rule 61 (condition -> IF ( expression ) block elses ; .)


state 149

    (65) elses -> ELSE block .

    ;               reduce using rule 65 (elses -> ELSE block .)


state 150

    (66) elses -> ELSEIF ( . expression ) block elses
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level5 -> .
    (32) level6 -> . ( expression )
    (33) level6 -> . const
    (34) level6 -> . NOT const
    (35) level6 -> . INCREMENT const
    (36) level6 -> . DECREMENT const
    (37) level6 -> . call
    (38) level6 -> . NOT call
    (39) level6 -> . INCREMENT call
    (40) level6 -> . DECREMENT call
    (70) const -> . id
    (71) const -> . INT_VAL
    (72) const -> . DEC_VAL
    (73) const -> . CHAR_VAL
    (74) const -> . STR_VAL
    (75) const -> . BOOL_VAL
    (56) call -> . ID ( expressions ) ;
    (8) id -> . ID
    (9) id -> . ID [ expression ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    +               shift and go to state 48
    -               shift and go to state 49
    <               reduce using rule 31 (level5 -> .)
    >               reduce using rule 31 (level5 -> .)
    LESS_EQUAL_THAN reduce using rule 31 (level5 -> .)
    GREATER_EQUAL_THAN reduce using rule 31 (level5 -> .)
    EQUALS          reduce using rule 31 (level5 -> .)
    OR              reduce using rule 31 (level5 -> .)
    AND             reduce using rule 31 (level5 -> .)
    EXPONENTIATION  reduce using rule 31 (level5 -> .)
    )               reduce using rule 31 (level5 -> .)
    (               shift and go to state 54
    NOT             shift and go to state 56
    INCREMENT       shift and go to state 57
    DECREMENT       shift and go to state 58
    INT_VAL         shift and go to state 61
    DEC_VAL         shift and go to state 62
    CHAR_VAL        shift and go to state 63
    STR_VAL         shift and go to state 64
    BOOL_VAL        shift and go to state 65
    ID              shift and go to state 44

  ! +               [ reduce using rule 31 (level5 -> .) ]
  ! -               [ reduce using rule 31 (level5 -> .) ]

    expression                     shift and go to state 152
    level1                         shift and go to state 46
    level2                         shift and go to state 47
    level3                         shift and go to state 50
    level4                         shift and go to state 51
    level5                         shift and go to state 52
    level6                         shift and go to state 53
    const                          shift and go to state 55
    call                           shift and go to state 59
    id                             shift and go to state 60

state 151

    (43) function -> FUN return_type ID ( parameters ) { variable_declaration statutes . } ;

    }               shift and go to state 153


state 152

    (66) elses -> ELSEIF ( expression . ) block elses

    )               shift and go to state 154


state 153

    (43) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } . ;

    ;               shift and go to state 155


state 154

    (66) elses -> ELSEIF ( expression ) . block elses
    (76) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 156

state 155

    (43) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .

    FUN             reduce using rule 43 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)
    {               reduce using rule 43 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)


state 156

    (66) elses -> ELSEIF ( expression ) block . elses
    (64) elses -> . empty
    (65) elses -> . ELSE block
    (66) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 142
    ELSEIF          shift and go to state 143
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 157
    empty                          shift and go to state 141

state 157

    (66) elses -> ELSEIF ( expression ) block elses .

    ;               reduce using rule 66 (elses -> ELSEIF ( expression ) block elses .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 30 resolved as shift
WARNING: shift/reduce conflict for - in state 30 resolved as shift
WARNING: shift/reduce conflict for + in state 54 resolved as shift
WARNING: shift/reduce conflict for - in state 54 resolved as shift
WARNING: shift/reduce conflict for + in state 67 resolved as shift
WARNING: shift/reduce conflict for - in state 67 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for + in state 121 resolved as shift
WARNING: shift/reduce conflict for - in state 121 resolved as shift
WARNING: shift/reduce conflict for + in state 131 resolved as shift
WARNING: shift/reduce conflict for - in state 131 resolved as shift
WARNING: shift/reduce conflict for + in state 150 resolved as shift
WARNING: shift/reduce conflict for - in state 150 resolved as shift
