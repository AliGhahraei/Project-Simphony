Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; variable_declaration function_declaration block
Rule 2     empty -> <empty>
Rule 3     variable_declaration -> type ids ; variable_declaration
Rule 4     variable_declaration -> empty
Rule 5     ids -> id other_ids
Rule 6     other_ids -> , ids
Rule 7     other_ids -> empty
Rule 8     id -> ID
Rule 9     id -> ID [ expression ]
Rule 10    expression -> level1
Rule 11    expression -> level1 EXPONENTIATION level1
Rule 12    level1 -> level2
Rule 13    level1 -> + level2
Rule 14    level1 -> - level2
Rule 15    level2 -> level3
Rule 16    level2 -> level3 OR level3
Rule 17    level2 -> level3 AND level3
Rule 18    level3 -> level4
Rule 19    level3 -> level4 < level4
Rule 20    level3 -> level4 > level4
Rule 21    level3 -> level4 LESS_EQUAL_THAN level4
Rule 22    level3 -> level4 GREATER_EQUAL_THAN level4
Rule 23    level3 -> level4 EQUALS level4
Rule 24    level4 -> level5
Rule 25    level4 -> level5 + level5
Rule 26    level4 -> level5 - level5
Rule 27    level5 -> level6
Rule 28    level5 -> level6 * level6
Rule 29    level5 -> level6 / level6
Rule 30    level5 -> level6 MOD level6
Rule 31    level6 -> ( expression )
Rule 32    level6 -> const
Rule 33    level6 -> NOT const
Rule 34    level6 -> increment
Rule 35    level6 -> decrement
Rule 36    increment -> INCREMENT id
Rule 37    decrement -> DECREMENT id
Rule 38    function_declaration -> function function_declaration
Rule 39    function_declaration -> empty
Rule 40    function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ;
Rule 41    return_type -> type
Rule 42    return_type -> VOID
Rule 43    type -> INT
Rule 44    type -> DEC
Rule 45    type -> CHAR
Rule 46    type -> STR
Rule 47    type -> BOOL
Rule 48    statutes -> statute ; statutes
Rule 49    statutes -> empty
Rule 50    statute -> call
Rule 51    statute -> assignment
Rule 52    statute -> condition
Rule 53    statute -> cycle
Rule 54    statute -> special
Rule 55    statute -> return
Rule 56    statute -> increment
Rule 57    statute -> decrement
Rule 58    call -> ID ( expressions )
Rule 59    expressions -> expression
Rule 60    expressions -> expression , expressions
Rule 61    assignment -> ID = expression
Rule 62    assignment -> ID [ expression ] = expression
Rule 63    condition -> IF ( expression ) block elses
Rule 64    cycle -> WHILE ( expression ) block
Rule 65    special -> SPECIAL_ID ( expressions )
Rule 66    return -> RETURN expression
Rule 67    return -> RETURN
Rule 68    elses -> empty
Rule 69    elses -> ELSE block
Rule 70    elses -> ELSEIF ( expression ) block elses
Rule 71    parameters -> type ID other_parameters
Rule 72    other_parameters -> , parameters
Rule 73    other_parameters -> empty
Rule 74    const -> id
Rule 75    const -> call
Rule 76    const -> special
Rule 77    const -> INT_VAL
Rule 78    const -> DEC_VAL
Rule 79    const -> CHAR_VAL
Rule 80    const -> STR_VAL
Rule 81    const -> BOOL_VAL
Rule 82    block -> { statutes }

Terminals, with rules where they appear

(                    : 31 40 58 63 64 65 70
)                    : 31 40 58 63 64 65 70
*                    : 28
+                    : 13 25
,                    : 6 60 72
-                    : 14 26
/                    : 29
;                    : 1 3 40 48
<                    : 19
=                    : 61 62
>                    : 20
AND                  : 17
BOOL                 : 47
BOOL_VAL             : 81
CHAR                 : 45
CHAR_VAL             : 79
DEC                  : 44
DECREMENT            : 37
DEC_VAL              : 78
ELSE                 : 69
ELSEIF               : 70
EQUALS               : 23
EXPONENTIATION       : 11
FUN                  : 40
GREATER_EQUAL_THAN   : 22
ID                   : 1 8 9 40 58 61 62 71
IF                   : 63
INCREMENT            : 36
INT                  : 43
INT_VAL              : 77
LESS_EQUAL_THAN      : 21
MOD                  : 30
NOT                  : 33
OR                   : 16
PROGRAM              : 1
RETURN               : 66 67
SPECIAL_ID           : 65
STR                  : 46
STR_VAL              : 80
VOID                 : 42
WHILE                : 64
[                    : 9 62
]                    : 9 62
error                : 
{                    : 40 82
}                    : 40 82

Nonterminals, with rules where they appear

assignment           : 51
block                : 1 63 64 69 70
call                 : 50 75
condition            : 52
const                : 32 33
cycle                : 53
decrement            : 35 57
elses                : 63 70
empty                : 4 7 39 49 68 73
expression           : 9 31 59 60 61 62 62 63 64 66 70
expressions          : 58 60 65
function             : 38
function_declaration : 1 38
id                   : 5 36 37 74
ids                  : 3 6
increment            : 34 56
level1               : 10 11 11
level2               : 12 13 14
level3               : 15 16 16 17 17
level4               : 18 19 19 20 20 21 21 22 22 23 23
level5               : 24 25 25 26 26
level6               : 27 28 28 29 29 30 30
other_ids            : 5
other_parameters     : 71
parameters           : 40 72
program              : 0
return               : 55
return_type          : 40
special              : 54 76
statute              : 48
statutes             : 40 48 82
type                 : 3 41 71
variable_declaration : 1 3 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; variable_declaration function_declaration block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; variable_declaration function_declaration block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; variable_declaration function_declaration block

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . variable_declaration function_declaration block
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 5
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID ; variable_declaration . function_declaration block
    (38) function_declaration -> . function function_declaration
    (39) function_declaration -> . empty
    (40) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function_declaration           shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 6

    (3) variable_declaration -> type . ids ; variable_declaration
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 17
    id                             shift and go to state 18

state 7

    (4) variable_declaration -> empty .

    FUN             reduce using rule 4 (variable_declaration -> empty .)
    {               reduce using rule 4 (variable_declaration -> empty .)
    ID              reduce using rule 4 (variable_declaration -> empty .)
    IF              reduce using rule 4 (variable_declaration -> empty .)
    WHILE           reduce using rule 4 (variable_declaration -> empty .)
    SPECIAL_ID      reduce using rule 4 (variable_declaration -> empty .)
    RETURN          reduce using rule 4 (variable_declaration -> empty .)
    INCREMENT       reduce using rule 4 (variable_declaration -> empty .)
    DECREMENT       reduce using rule 4 (variable_declaration -> empty .)
    }               reduce using rule 4 (variable_declaration -> empty .)


state 8

    (43) type -> INT .

    ID              reduce using rule 43 (type -> INT .)


state 9

    (44) type -> DEC .

    ID              reduce using rule 44 (type -> DEC .)


state 10

    (45) type -> CHAR .

    ID              reduce using rule 45 (type -> CHAR .)


state 11

    (46) type -> STR .

    ID              reduce using rule 46 (type -> STR .)


state 12

    (47) type -> BOOL .

    ID              reduce using rule 47 (type -> BOOL .)


state 13

    (1) program -> PROGRAM ID ; variable_declaration function_declaration . block
    (82) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 20

state 14

    (38) function_declaration -> function . function_declaration
    (38) function_declaration -> . function function_declaration
    (39) function_declaration -> . empty
    (40) function -> . FUN return_type ID ( parameters ) { variable_declaration statutes } ;
    (2) empty -> .

    FUN             shift and go to state 16
    {               reduce using rule 2 (empty -> .)

    function                       shift and go to state 14
    function_declaration           shift and go to state 22
    empty                          shift and go to state 15

state 15

    (39) function_declaration -> empty .

    {               reduce using rule 39 (function_declaration -> empty .)


state 16

    (40) function -> FUN . return_type ID ( parameters ) { variable_declaration statutes } ;
    (41) return_type -> . type
    (42) return_type -> . VOID
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL

    VOID            shift and go to state 25
    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    return_type                    shift and go to state 23
    type                           shift and go to state 24

state 17

    (3) variable_declaration -> type ids . ; variable_declaration

    ;               shift and go to state 26


state 18

    (5) ids -> id . other_ids
    (6) other_ids -> . , ids
    (7) other_ids -> . empty
    (2) empty -> .

    ,               shift and go to state 28
    ;               reduce using rule 2 (empty -> .)

    other_ids                      shift and go to state 27
    empty                          shift and go to state 29

state 19

    (8) id -> ID .
    (9) id -> ID . [ expression ]

    ,               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    *               reduce using rule 8 (id -> ID .)
    /               reduce using rule 8 (id -> ID .)
    MOD             reduce using rule 8 (id -> ID .)
    +               reduce using rule 8 (id -> ID .)
    -               reduce using rule 8 (id -> ID .)
    <               reduce using rule 8 (id -> ID .)
    >               reduce using rule 8 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 8 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 8 (id -> ID .)
    EQUALS          reduce using rule 8 (id -> ID .)
    OR              reduce using rule 8 (id -> ID .)
    AND             reduce using rule 8 (id -> ID .)
    EXPONENTIATION  reduce using rule 8 (id -> ID .)
    ]               reduce using rule 8 (id -> ID .)
    )               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30


state 20

    (1) program -> PROGRAM ID ; variable_declaration function_declaration block .

    $end            reduce using rule 1 (program -> PROGRAM ID ; variable_declaration function_declaration block .)


state 21

    (82) block -> { . statutes }
    (48) statutes -> . statute ; statutes
    (49) statutes -> . empty
    (50) statute -> . call
    (51) statute -> . assignment
    (52) statute -> . condition
    (53) statute -> . cycle
    (54) statute -> . special
    (55) statute -> . return
    (56) statute -> . increment
    (57) statute -> . decrement
    (2) empty -> .
    (58) call -> . ID ( expressions )
    (61) assignment -> . ID = expression
    (62) assignment -> . ID [ expression ] = expression
    (63) condition -> . IF ( expression ) block elses
    (64) cycle -> . WHILE ( expression ) block
    (65) special -> . SPECIAL_ID ( expressions )
    (66) return -> . RETURN expression
    (67) return -> . RETURN
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    SPECIAL_ID      shift and go to state 45
    RETURN          shift and go to state 46
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48

    statutes                       shift and go to state 31
    statute                        shift and go to state 32
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38
    return                         shift and go to state 39
    increment                      shift and go to state 40
    decrement                      shift and go to state 41

state 22

    (38) function_declaration -> function function_declaration .

    {               reduce using rule 38 (function_declaration -> function function_declaration .)


state 23

    (40) function -> FUN return_type . ID ( parameters ) { variable_declaration statutes } ;

    ID              shift and go to state 49


state 24

    (41) return_type -> type .

    ID              reduce using rule 41 (return_type -> type .)


state 25

    (42) return_type -> VOID .

    ID              reduce using rule 42 (return_type -> VOID .)


state 26

    (3) variable_declaration -> type ids ; . variable_declaration
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    FUN             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    INCREMENT       reduce using rule 2 (empty -> .)
    DECREMENT       reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    type                           shift and go to state 6
    variable_declaration           shift and go to state 50
    empty                          shift and go to state 7

state 27

    (5) ids -> id other_ids .

    ;               reduce using rule 5 (ids -> id other_ids .)


state 28

    (6) other_ids -> , . ids
    (5) ids -> . id other_ids
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    ids                            shift and go to state 51
    id                             shift and go to state 18

state 29

    (7) other_ids -> empty .

    ;               reduce using rule 7 (other_ids -> empty .)


state 30

    (9) id -> ID [ . expression ]
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 53
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 31

    (82) block -> { statutes . }

    }               shift and go to state 75


state 32

    (48) statutes -> statute . ; statutes

    ;               shift and go to state 76


state 33

    (49) statutes -> empty .

    }               reduce using rule 49 (statutes -> empty .)


state 34

    (50) statute -> call .

    ;               reduce using rule 50 (statute -> call .)


state 35

    (51) statute -> assignment .

    ;               reduce using rule 51 (statute -> assignment .)


state 36

    (52) statute -> condition .

    ;               reduce using rule 52 (statute -> condition .)


state 37

    (53) statute -> cycle .

    ;               reduce using rule 53 (statute -> cycle .)


state 38

    (54) statute -> special .

    ;               reduce using rule 54 (statute -> special .)


state 39

    (55) statute -> return .

    ;               reduce using rule 55 (statute -> return .)


state 40

    (56) statute -> increment .

    ;               reduce using rule 56 (statute -> increment .)


state 41

    (57) statute -> decrement .

    ;               reduce using rule 57 (statute -> decrement .)


state 42

    (58) call -> ID . ( expressions )
    (61) assignment -> ID . = expression
    (62) assignment -> ID . [ expression ] = expression

    (               shift and go to state 77
    =               shift and go to state 78
    [               shift and go to state 79


state 43

    (63) condition -> IF . ( expression ) block elses

    (               shift and go to state 80


state 44

    (64) cycle -> WHILE . ( expression ) block

    (               shift and go to state 81


state 45

    (65) special -> SPECIAL_ID . ( expressions )

    (               shift and go to state 82


state 46

    (66) return -> RETURN . expression
    (67) return -> RETURN .
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    ;               reduce using rule 67 (return -> RETURN .)
    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 83
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 47

    (36) increment -> INCREMENT . id
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    id                             shift and go to state 84

state 48

    (37) decrement -> DECREMENT . id
    (8) id -> . ID
    (9) id -> . ID [ expression ]

    ID              shift and go to state 19

    id                             shift and go to state 85

state 49

    (40) function -> FUN return_type ID . ( parameters ) { variable_declaration statutes } ;

    (               shift and go to state 86


state 50

    (3) variable_declaration -> type ids ; variable_declaration .

    FUN             reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    {               reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    ID              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    IF              reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    WHILE           reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    SPECIAL_ID      reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    RETURN          reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    INCREMENT       reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    DECREMENT       reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)
    }               reduce using rule 3 (variable_declaration -> type ids ; variable_declaration .)


state 51

    (6) other_ids -> , ids .

    ;               reduce using rule 6 (other_ids -> , ids .)


state 52

    (8) id -> ID .
    (9) id -> ID . [ expression ]
    (58) call -> ID . ( expressions )

    *               reduce using rule 8 (id -> ID .)
    /               reduce using rule 8 (id -> ID .)
    MOD             reduce using rule 8 (id -> ID .)
    +               reduce using rule 8 (id -> ID .)
    -               reduce using rule 8 (id -> ID .)
    <               reduce using rule 8 (id -> ID .)
    >               reduce using rule 8 (id -> ID .)
    LESS_EQUAL_THAN reduce using rule 8 (id -> ID .)
    GREATER_EQUAL_THAN reduce using rule 8 (id -> ID .)
    EQUALS          reduce using rule 8 (id -> ID .)
    OR              reduce using rule 8 (id -> ID .)
    AND             reduce using rule 8 (id -> ID .)
    EXPONENTIATION  reduce using rule 8 (id -> ID .)
    ]               reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    )               reduce using rule 8 (id -> ID .)
    ,               reduce using rule 8 (id -> ID .)
    [               shift and go to state 30
    (               shift and go to state 77


state 53

    (9) id -> ID [ expression . ]

    ]               shift and go to state 87


state 54

    (10) expression -> level1 .
    (11) expression -> level1 . EXPONENTIATION level1

    ]               reduce using rule 10 (expression -> level1 .)
    ;               reduce using rule 10 (expression -> level1 .)
    )               reduce using rule 10 (expression -> level1 .)
    ,               reduce using rule 10 (expression -> level1 .)
    EXPONENTIATION  shift and go to state 88


state 55

    (12) level1 -> level2 .

    EXPONENTIATION  reduce using rule 12 (level1 -> level2 .)
    ]               reduce using rule 12 (level1 -> level2 .)
    ;               reduce using rule 12 (level1 -> level2 .)
    )               reduce using rule 12 (level1 -> level2 .)
    ,               reduce using rule 12 (level1 -> level2 .)


state 56

    (13) level1 -> + . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level2                         shift and go to state 89
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 57

    (14) level1 -> - . level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level2                         shift and go to state 90
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 58

    (15) level2 -> level3 .
    (16) level2 -> level3 . OR level3
    (17) level2 -> level3 . AND level3

    EXPONENTIATION  reduce using rule 15 (level2 -> level3 .)
    ]               reduce using rule 15 (level2 -> level3 .)
    ;               reduce using rule 15 (level2 -> level3 .)
    )               reduce using rule 15 (level2 -> level3 .)
    ,               reduce using rule 15 (level2 -> level3 .)
    OR              shift and go to state 91
    AND             shift and go to state 92


state 59

    (18) level3 -> level4 .
    (19) level3 -> level4 . < level4
    (20) level3 -> level4 . > level4
    (21) level3 -> level4 . LESS_EQUAL_THAN level4
    (22) level3 -> level4 . GREATER_EQUAL_THAN level4
    (23) level3 -> level4 . EQUALS level4

    OR              reduce using rule 18 (level3 -> level4 .)
    AND             reduce using rule 18 (level3 -> level4 .)
    EXPONENTIATION  reduce using rule 18 (level3 -> level4 .)
    ]               reduce using rule 18 (level3 -> level4 .)
    ;               reduce using rule 18 (level3 -> level4 .)
    )               reduce using rule 18 (level3 -> level4 .)
    ,               reduce using rule 18 (level3 -> level4 .)
    <               shift and go to state 93
    >               shift and go to state 94
    LESS_EQUAL_THAN shift and go to state 95
    GREATER_EQUAL_THAN shift and go to state 96
    EQUALS          shift and go to state 97


state 60

    (24) level4 -> level5 .
    (25) level4 -> level5 . + level5
    (26) level4 -> level5 . - level5

    <               reduce using rule 24 (level4 -> level5 .)
    >               reduce using rule 24 (level4 -> level5 .)
    LESS_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    GREATER_EQUAL_THAN reduce using rule 24 (level4 -> level5 .)
    EQUALS          reduce using rule 24 (level4 -> level5 .)
    OR              reduce using rule 24 (level4 -> level5 .)
    AND             reduce using rule 24 (level4 -> level5 .)
    EXPONENTIATION  reduce using rule 24 (level4 -> level5 .)
    ]               reduce using rule 24 (level4 -> level5 .)
    ;               reduce using rule 24 (level4 -> level5 .)
    )               reduce using rule 24 (level4 -> level5 .)
    ,               reduce using rule 24 (level4 -> level5 .)
    +               shift and go to state 98
    -               shift and go to state 99


state 61

    (27) level5 -> level6 .
    (28) level5 -> level6 . * level6
    (29) level5 -> level6 . / level6
    (30) level5 -> level6 . MOD level6

    +               reduce using rule 27 (level5 -> level6 .)
    -               reduce using rule 27 (level5 -> level6 .)
    <               reduce using rule 27 (level5 -> level6 .)
    >               reduce using rule 27 (level5 -> level6 .)
    LESS_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    GREATER_EQUAL_THAN reduce using rule 27 (level5 -> level6 .)
    EQUALS          reduce using rule 27 (level5 -> level6 .)
    OR              reduce using rule 27 (level5 -> level6 .)
    AND             reduce using rule 27 (level5 -> level6 .)
    EXPONENTIATION  reduce using rule 27 (level5 -> level6 .)
    ]               reduce using rule 27 (level5 -> level6 .)
    ;               reduce using rule 27 (level5 -> level6 .)
    )               reduce using rule 27 (level5 -> level6 .)
    ,               reduce using rule 27 (level5 -> level6 .)
    *               shift and go to state 100
    /               shift and go to state 101
    MOD             shift and go to state 102


state 62

    (31) level6 -> ( . expression )
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 103
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 63

    (32) level6 -> const .

    *               reduce using rule 32 (level6 -> const .)
    /               reduce using rule 32 (level6 -> const .)
    MOD             reduce using rule 32 (level6 -> const .)
    +               reduce using rule 32 (level6 -> const .)
    -               reduce using rule 32 (level6 -> const .)
    <               reduce using rule 32 (level6 -> const .)
    >               reduce using rule 32 (level6 -> const .)
    LESS_EQUAL_THAN reduce using rule 32 (level6 -> const .)
    GREATER_EQUAL_THAN reduce using rule 32 (level6 -> const .)
    EQUALS          reduce using rule 32 (level6 -> const .)
    OR              reduce using rule 32 (level6 -> const .)
    AND             reduce using rule 32 (level6 -> const .)
    EXPONENTIATION  reduce using rule 32 (level6 -> const .)
    ]               reduce using rule 32 (level6 -> const .)
    ;               reduce using rule 32 (level6 -> const .)
    )               reduce using rule 32 (level6 -> const .)
    ,               reduce using rule 32 (level6 -> const .)


state 64

    (33) level6 -> NOT . const
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    const                          shift and go to state 104
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 65

    (34) level6 -> increment .

    *               reduce using rule 34 (level6 -> increment .)
    /               reduce using rule 34 (level6 -> increment .)
    MOD             reduce using rule 34 (level6 -> increment .)
    +               reduce using rule 34 (level6 -> increment .)
    -               reduce using rule 34 (level6 -> increment .)
    <               reduce using rule 34 (level6 -> increment .)
    >               reduce using rule 34 (level6 -> increment .)
    LESS_EQUAL_THAN reduce using rule 34 (level6 -> increment .)
    GREATER_EQUAL_THAN reduce using rule 34 (level6 -> increment .)
    EQUALS          reduce using rule 34 (level6 -> increment .)
    OR              reduce using rule 34 (level6 -> increment .)
    AND             reduce using rule 34 (level6 -> increment .)
    EXPONENTIATION  reduce using rule 34 (level6 -> increment .)
    ]               reduce using rule 34 (level6 -> increment .)
    ;               reduce using rule 34 (level6 -> increment .)
    )               reduce using rule 34 (level6 -> increment .)
    ,               reduce using rule 34 (level6 -> increment .)


state 66

    (35) level6 -> decrement .

    *               reduce using rule 35 (level6 -> decrement .)
    /               reduce using rule 35 (level6 -> decrement .)
    MOD             reduce using rule 35 (level6 -> decrement .)
    +               reduce using rule 35 (level6 -> decrement .)
    -               reduce using rule 35 (level6 -> decrement .)
    <               reduce using rule 35 (level6 -> decrement .)
    >               reduce using rule 35 (level6 -> decrement .)
    LESS_EQUAL_THAN reduce using rule 35 (level6 -> decrement .)
    GREATER_EQUAL_THAN reduce using rule 35 (level6 -> decrement .)
    EQUALS          reduce using rule 35 (level6 -> decrement .)
    OR              reduce using rule 35 (level6 -> decrement .)
    AND             reduce using rule 35 (level6 -> decrement .)
    EXPONENTIATION  reduce using rule 35 (level6 -> decrement .)
    ]               reduce using rule 35 (level6 -> decrement .)
    ;               reduce using rule 35 (level6 -> decrement .)
    )               reduce using rule 35 (level6 -> decrement .)
    ,               reduce using rule 35 (level6 -> decrement .)


state 67

    (74) const -> id .

    *               reduce using rule 74 (const -> id .)
    /               reduce using rule 74 (const -> id .)
    MOD             reduce using rule 74 (const -> id .)
    +               reduce using rule 74 (const -> id .)
    -               reduce using rule 74 (const -> id .)
    <               reduce using rule 74 (const -> id .)
    >               reduce using rule 74 (const -> id .)
    LESS_EQUAL_THAN reduce using rule 74 (const -> id .)
    GREATER_EQUAL_THAN reduce using rule 74 (const -> id .)
    EQUALS          reduce using rule 74 (const -> id .)
    OR              reduce using rule 74 (const -> id .)
    AND             reduce using rule 74 (const -> id .)
    EXPONENTIATION  reduce using rule 74 (const -> id .)
    ]               reduce using rule 74 (const -> id .)
    ;               reduce using rule 74 (const -> id .)
    )               reduce using rule 74 (const -> id .)
    ,               reduce using rule 74 (const -> id .)


state 68

    (75) const -> call .

    *               reduce using rule 75 (const -> call .)
    /               reduce using rule 75 (const -> call .)
    MOD             reduce using rule 75 (const -> call .)
    +               reduce using rule 75 (const -> call .)
    -               reduce using rule 75 (const -> call .)
    <               reduce using rule 75 (const -> call .)
    >               reduce using rule 75 (const -> call .)
    LESS_EQUAL_THAN reduce using rule 75 (const -> call .)
    GREATER_EQUAL_THAN reduce using rule 75 (const -> call .)
    EQUALS          reduce using rule 75 (const -> call .)
    OR              reduce using rule 75 (const -> call .)
    AND             reduce using rule 75 (const -> call .)
    EXPONENTIATION  reduce using rule 75 (const -> call .)
    ]               reduce using rule 75 (const -> call .)
    ;               reduce using rule 75 (const -> call .)
    )               reduce using rule 75 (const -> call .)
    ,               reduce using rule 75 (const -> call .)


state 69

    (76) const -> special .

    *               reduce using rule 76 (const -> special .)
    /               reduce using rule 76 (const -> special .)
    MOD             reduce using rule 76 (const -> special .)
    +               reduce using rule 76 (const -> special .)
    -               reduce using rule 76 (const -> special .)
    <               reduce using rule 76 (const -> special .)
    >               reduce using rule 76 (const -> special .)
    LESS_EQUAL_THAN reduce using rule 76 (const -> special .)
    GREATER_EQUAL_THAN reduce using rule 76 (const -> special .)
    EQUALS          reduce using rule 76 (const -> special .)
    OR              reduce using rule 76 (const -> special .)
    AND             reduce using rule 76 (const -> special .)
    EXPONENTIATION  reduce using rule 76 (const -> special .)
    ]               reduce using rule 76 (const -> special .)
    ;               reduce using rule 76 (const -> special .)
    )               reduce using rule 76 (const -> special .)
    ,               reduce using rule 76 (const -> special .)


state 70

    (77) const -> INT_VAL .

    *               reduce using rule 77 (const -> INT_VAL .)
    /               reduce using rule 77 (const -> INT_VAL .)
    MOD             reduce using rule 77 (const -> INT_VAL .)
    +               reduce using rule 77 (const -> INT_VAL .)
    -               reduce using rule 77 (const -> INT_VAL .)
    <               reduce using rule 77 (const -> INT_VAL .)
    >               reduce using rule 77 (const -> INT_VAL .)
    LESS_EQUAL_THAN reduce using rule 77 (const -> INT_VAL .)
    GREATER_EQUAL_THAN reduce using rule 77 (const -> INT_VAL .)
    EQUALS          reduce using rule 77 (const -> INT_VAL .)
    OR              reduce using rule 77 (const -> INT_VAL .)
    AND             reduce using rule 77 (const -> INT_VAL .)
    EXPONENTIATION  reduce using rule 77 (const -> INT_VAL .)
    ]               reduce using rule 77 (const -> INT_VAL .)
    ;               reduce using rule 77 (const -> INT_VAL .)
    )               reduce using rule 77 (const -> INT_VAL .)
    ,               reduce using rule 77 (const -> INT_VAL .)


state 71

    (78) const -> DEC_VAL .

    *               reduce using rule 78 (const -> DEC_VAL .)
    /               reduce using rule 78 (const -> DEC_VAL .)
    MOD             reduce using rule 78 (const -> DEC_VAL .)
    +               reduce using rule 78 (const -> DEC_VAL .)
    -               reduce using rule 78 (const -> DEC_VAL .)
    <               reduce using rule 78 (const -> DEC_VAL .)
    >               reduce using rule 78 (const -> DEC_VAL .)
    LESS_EQUAL_THAN reduce using rule 78 (const -> DEC_VAL .)
    GREATER_EQUAL_THAN reduce using rule 78 (const -> DEC_VAL .)
    EQUALS          reduce using rule 78 (const -> DEC_VAL .)
    OR              reduce using rule 78 (const -> DEC_VAL .)
    AND             reduce using rule 78 (const -> DEC_VAL .)
    EXPONENTIATION  reduce using rule 78 (const -> DEC_VAL .)
    ]               reduce using rule 78 (const -> DEC_VAL .)
    ;               reduce using rule 78 (const -> DEC_VAL .)
    )               reduce using rule 78 (const -> DEC_VAL .)
    ,               reduce using rule 78 (const -> DEC_VAL .)


state 72

    (79) const -> CHAR_VAL .

    *               reduce using rule 79 (const -> CHAR_VAL .)
    /               reduce using rule 79 (const -> CHAR_VAL .)
    MOD             reduce using rule 79 (const -> CHAR_VAL .)
    +               reduce using rule 79 (const -> CHAR_VAL .)
    -               reduce using rule 79 (const -> CHAR_VAL .)
    <               reduce using rule 79 (const -> CHAR_VAL .)
    >               reduce using rule 79 (const -> CHAR_VAL .)
    LESS_EQUAL_THAN reduce using rule 79 (const -> CHAR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 79 (const -> CHAR_VAL .)
    EQUALS          reduce using rule 79 (const -> CHAR_VAL .)
    OR              reduce using rule 79 (const -> CHAR_VAL .)
    AND             reduce using rule 79 (const -> CHAR_VAL .)
    EXPONENTIATION  reduce using rule 79 (const -> CHAR_VAL .)
    ]               reduce using rule 79 (const -> CHAR_VAL .)
    ;               reduce using rule 79 (const -> CHAR_VAL .)
    )               reduce using rule 79 (const -> CHAR_VAL .)
    ,               reduce using rule 79 (const -> CHAR_VAL .)


state 73

    (80) const -> STR_VAL .

    *               reduce using rule 80 (const -> STR_VAL .)
    /               reduce using rule 80 (const -> STR_VAL .)
    MOD             reduce using rule 80 (const -> STR_VAL .)
    +               reduce using rule 80 (const -> STR_VAL .)
    -               reduce using rule 80 (const -> STR_VAL .)
    <               reduce using rule 80 (const -> STR_VAL .)
    >               reduce using rule 80 (const -> STR_VAL .)
    LESS_EQUAL_THAN reduce using rule 80 (const -> STR_VAL .)
    GREATER_EQUAL_THAN reduce using rule 80 (const -> STR_VAL .)
    EQUALS          reduce using rule 80 (const -> STR_VAL .)
    OR              reduce using rule 80 (const -> STR_VAL .)
    AND             reduce using rule 80 (const -> STR_VAL .)
    EXPONENTIATION  reduce using rule 80 (const -> STR_VAL .)
    ]               reduce using rule 80 (const -> STR_VAL .)
    ;               reduce using rule 80 (const -> STR_VAL .)
    )               reduce using rule 80 (const -> STR_VAL .)
    ,               reduce using rule 80 (const -> STR_VAL .)


state 74

    (81) const -> BOOL_VAL .

    *               reduce using rule 81 (const -> BOOL_VAL .)
    /               reduce using rule 81 (const -> BOOL_VAL .)
    MOD             reduce using rule 81 (const -> BOOL_VAL .)
    +               reduce using rule 81 (const -> BOOL_VAL .)
    -               reduce using rule 81 (const -> BOOL_VAL .)
    <               reduce using rule 81 (const -> BOOL_VAL .)
    >               reduce using rule 81 (const -> BOOL_VAL .)
    LESS_EQUAL_THAN reduce using rule 81 (const -> BOOL_VAL .)
    GREATER_EQUAL_THAN reduce using rule 81 (const -> BOOL_VAL .)
    EQUALS          reduce using rule 81 (const -> BOOL_VAL .)
    OR              reduce using rule 81 (const -> BOOL_VAL .)
    AND             reduce using rule 81 (const -> BOOL_VAL .)
    EXPONENTIATION  reduce using rule 81 (const -> BOOL_VAL .)
    ]               reduce using rule 81 (const -> BOOL_VAL .)
    ;               reduce using rule 81 (const -> BOOL_VAL .)
    )               reduce using rule 81 (const -> BOOL_VAL .)
    ,               reduce using rule 81 (const -> BOOL_VAL .)


state 75

    (82) block -> { statutes } .

    $end            reduce using rule 82 (block -> { statutes } .)
    ELSE            reduce using rule 82 (block -> { statutes } .)
    ELSEIF          reduce using rule 82 (block -> { statutes } .)
    ;               reduce using rule 82 (block -> { statutes } .)


state 76

    (48) statutes -> statute ; . statutes
    (48) statutes -> . statute ; statutes
    (49) statutes -> . empty
    (50) statute -> . call
    (51) statute -> . assignment
    (52) statute -> . condition
    (53) statute -> . cycle
    (54) statute -> . special
    (55) statute -> . return
    (56) statute -> . increment
    (57) statute -> . decrement
    (2) empty -> .
    (58) call -> . ID ( expressions )
    (61) assignment -> . ID = expression
    (62) assignment -> . ID [ expression ] = expression
    (63) condition -> . IF ( expression ) block elses
    (64) cycle -> . WHILE ( expression ) block
    (65) special -> . SPECIAL_ID ( expressions )
    (66) return -> . RETURN expression
    (67) return -> . RETURN
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    SPECIAL_ID      shift and go to state 45
    RETURN          shift and go to state 46
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48

    statute                        shift and go to state 32
    statutes                       shift and go to state 105
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38
    return                         shift and go to state 39
    increment                      shift and go to state 40
    decrement                      shift and go to state 41

state 77

    (58) call -> ID ( . expressions )
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expressions                    shift and go to state 106
    expression                     shift and go to state 107
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 78

    (61) assignment -> ID = . expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 108
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 79

    (62) assignment -> ID [ . expression ] = expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 109
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 80

    (63) condition -> IF ( . expression ) block elses
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 110
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 81

    (64) cycle -> WHILE ( . expression ) block
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 111
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 82

    (65) special -> SPECIAL_ID ( . expressions )
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expressions                    shift and go to state 112
    expression                     shift and go to state 107
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 83

    (66) return -> RETURN expression .

    ;               reduce using rule 66 (return -> RETURN expression .)


state 84

    (36) increment -> INCREMENT id .

    ;               reduce using rule 36 (increment -> INCREMENT id .)
    *               reduce using rule 36 (increment -> INCREMENT id .)
    /               reduce using rule 36 (increment -> INCREMENT id .)
    MOD             reduce using rule 36 (increment -> INCREMENT id .)
    +               reduce using rule 36 (increment -> INCREMENT id .)
    -               reduce using rule 36 (increment -> INCREMENT id .)
    <               reduce using rule 36 (increment -> INCREMENT id .)
    >               reduce using rule 36 (increment -> INCREMENT id .)
    LESS_EQUAL_THAN reduce using rule 36 (increment -> INCREMENT id .)
    GREATER_EQUAL_THAN reduce using rule 36 (increment -> INCREMENT id .)
    EQUALS          reduce using rule 36 (increment -> INCREMENT id .)
    OR              reduce using rule 36 (increment -> INCREMENT id .)
    AND             reduce using rule 36 (increment -> INCREMENT id .)
    EXPONENTIATION  reduce using rule 36 (increment -> INCREMENT id .)
    ]               reduce using rule 36 (increment -> INCREMENT id .)
    )               reduce using rule 36 (increment -> INCREMENT id .)
    ,               reduce using rule 36 (increment -> INCREMENT id .)


state 85

    (37) decrement -> DECREMENT id .

    ;               reduce using rule 37 (decrement -> DECREMENT id .)
    *               reduce using rule 37 (decrement -> DECREMENT id .)
    /               reduce using rule 37 (decrement -> DECREMENT id .)
    MOD             reduce using rule 37 (decrement -> DECREMENT id .)
    +               reduce using rule 37 (decrement -> DECREMENT id .)
    -               reduce using rule 37 (decrement -> DECREMENT id .)
    <               reduce using rule 37 (decrement -> DECREMENT id .)
    >               reduce using rule 37 (decrement -> DECREMENT id .)
    LESS_EQUAL_THAN reduce using rule 37 (decrement -> DECREMENT id .)
    GREATER_EQUAL_THAN reduce using rule 37 (decrement -> DECREMENT id .)
    EQUALS          reduce using rule 37 (decrement -> DECREMENT id .)
    OR              reduce using rule 37 (decrement -> DECREMENT id .)
    AND             reduce using rule 37 (decrement -> DECREMENT id .)
    EXPONENTIATION  reduce using rule 37 (decrement -> DECREMENT id .)
    ]               reduce using rule 37 (decrement -> DECREMENT id .)
    )               reduce using rule 37 (decrement -> DECREMENT id .)
    ,               reduce using rule 37 (decrement -> DECREMENT id .)


state 86

    (40) function -> FUN return_type ID ( . parameters ) { variable_declaration statutes } ;
    (71) parameters -> . type ID other_parameters
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 113
    type                           shift and go to state 114

state 87

    (9) id -> ID [ expression ] .

    ,               reduce using rule 9 (id -> ID [ expression ] .)
    ;               reduce using rule 9 (id -> ID [ expression ] .)
    *               reduce using rule 9 (id -> ID [ expression ] .)
    /               reduce using rule 9 (id -> ID [ expression ] .)
    MOD             reduce using rule 9 (id -> ID [ expression ] .)
    +               reduce using rule 9 (id -> ID [ expression ] .)
    -               reduce using rule 9 (id -> ID [ expression ] .)
    <               reduce using rule 9 (id -> ID [ expression ] .)
    >               reduce using rule 9 (id -> ID [ expression ] .)
    LESS_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    GREATER_EQUAL_THAN reduce using rule 9 (id -> ID [ expression ] .)
    EQUALS          reduce using rule 9 (id -> ID [ expression ] .)
    OR              reduce using rule 9 (id -> ID [ expression ] .)
    AND             reduce using rule 9 (id -> ID [ expression ] .)
    EXPONENTIATION  reduce using rule 9 (id -> ID [ expression ] .)
    ]               reduce using rule 9 (id -> ID [ expression ] .)
    )               reduce using rule 9 (id -> ID [ expression ] .)


state 88

    (11) expression -> level1 EXPONENTIATION . level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level1                         shift and go to state 115
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 89

    (13) level1 -> + level2 .

    EXPONENTIATION  reduce using rule 13 (level1 -> + level2 .)
    ]               reduce using rule 13 (level1 -> + level2 .)
    ;               reduce using rule 13 (level1 -> + level2 .)
    )               reduce using rule 13 (level1 -> + level2 .)
    ,               reduce using rule 13 (level1 -> + level2 .)


state 90

    (14) level1 -> - level2 .

    EXPONENTIATION  reduce using rule 14 (level1 -> - level2 .)
    ]               reduce using rule 14 (level1 -> - level2 .)
    ;               reduce using rule 14 (level1 -> - level2 .)
    )               reduce using rule 14 (level1 -> - level2 .)
    ,               reduce using rule 14 (level1 -> - level2 .)


state 91

    (16) level2 -> level3 OR . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level3                         shift and go to state 116
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 92

    (17) level2 -> level3 AND . level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level3                         shift and go to state 117
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 93

    (19) level3 -> level4 < . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level4                         shift and go to state 118
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 94

    (20) level3 -> level4 > . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level4                         shift and go to state 119
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 95

    (21) level3 -> level4 LESS_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level4                         shift and go to state 120
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 96

    (22) level3 -> level4 GREATER_EQUAL_THAN . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level4                         shift and go to state 121
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 97

    (23) level3 -> level4 EQUALS . level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level4                         shift and go to state 122
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 98

    (25) level4 -> level5 + . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level5                         shift and go to state 123
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 99

    (26) level4 -> level5 - . level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level5                         shift and go to state 124
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 100

    (28) level5 -> level6 * . level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level6                         shift and go to state 125
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 101

    (29) level5 -> level6 / . level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level6                         shift and go to state 126
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 102

    (30) level5 -> level6 MOD . level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    level6                         shift and go to state 127
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 103

    (31) level6 -> ( expression . )

    )               shift and go to state 128


state 104

    (33) level6 -> NOT const .

    *               reduce using rule 33 (level6 -> NOT const .)
    /               reduce using rule 33 (level6 -> NOT const .)
    MOD             reduce using rule 33 (level6 -> NOT const .)
    +               reduce using rule 33 (level6 -> NOT const .)
    -               reduce using rule 33 (level6 -> NOT const .)
    <               reduce using rule 33 (level6 -> NOT const .)
    >               reduce using rule 33 (level6 -> NOT const .)
    LESS_EQUAL_THAN reduce using rule 33 (level6 -> NOT const .)
    GREATER_EQUAL_THAN reduce using rule 33 (level6 -> NOT const .)
    EQUALS          reduce using rule 33 (level6 -> NOT const .)
    OR              reduce using rule 33 (level6 -> NOT const .)
    AND             reduce using rule 33 (level6 -> NOT const .)
    EXPONENTIATION  reduce using rule 33 (level6 -> NOT const .)
    ]               reduce using rule 33 (level6 -> NOT const .)
    ;               reduce using rule 33 (level6 -> NOT const .)
    )               reduce using rule 33 (level6 -> NOT const .)
    ,               reduce using rule 33 (level6 -> NOT const .)


state 105

    (48) statutes -> statute ; statutes .

    }               reduce using rule 48 (statutes -> statute ; statutes .)


state 106

    (58) call -> ID ( expressions . )

    )               shift and go to state 129


state 107

    (59) expressions -> expression .
    (60) expressions -> expression . , expressions

    )               reduce using rule 59 (expressions -> expression .)
    ,               shift and go to state 130


state 108

    (61) assignment -> ID = expression .

    ;               reduce using rule 61 (assignment -> ID = expression .)


state 109

    (62) assignment -> ID [ expression . ] = expression

    ]               shift and go to state 131


state 110

    (63) condition -> IF ( expression . ) block elses

    )               shift and go to state 132


state 111

    (64) cycle -> WHILE ( expression . ) block

    )               shift and go to state 133


state 112

    (65) special -> SPECIAL_ID ( expressions . )

    )               shift and go to state 134


state 113

    (40) function -> FUN return_type ID ( parameters . ) { variable_declaration statutes } ;

    )               shift and go to state 135


state 114

    (71) parameters -> type . ID other_parameters

    ID              shift and go to state 136


state 115

    (11) expression -> level1 EXPONENTIATION level1 .

    ]               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ;               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    )               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)
    ,               reduce using rule 11 (expression -> level1 EXPONENTIATION level1 .)


state 116

    (16) level2 -> level3 OR level3 .

    EXPONENTIATION  reduce using rule 16 (level2 -> level3 OR level3 .)
    ]               reduce using rule 16 (level2 -> level3 OR level3 .)
    ;               reduce using rule 16 (level2 -> level3 OR level3 .)
    )               reduce using rule 16 (level2 -> level3 OR level3 .)
    ,               reduce using rule 16 (level2 -> level3 OR level3 .)


state 117

    (17) level2 -> level3 AND level3 .

    EXPONENTIATION  reduce using rule 17 (level2 -> level3 AND level3 .)
    ]               reduce using rule 17 (level2 -> level3 AND level3 .)
    ;               reduce using rule 17 (level2 -> level3 AND level3 .)
    )               reduce using rule 17 (level2 -> level3 AND level3 .)
    ,               reduce using rule 17 (level2 -> level3 AND level3 .)


state 118

    (19) level3 -> level4 < level4 .

    OR              reduce using rule 19 (level3 -> level4 < level4 .)
    AND             reduce using rule 19 (level3 -> level4 < level4 .)
    EXPONENTIATION  reduce using rule 19 (level3 -> level4 < level4 .)
    ]               reduce using rule 19 (level3 -> level4 < level4 .)
    ;               reduce using rule 19 (level3 -> level4 < level4 .)
    )               reduce using rule 19 (level3 -> level4 < level4 .)
    ,               reduce using rule 19 (level3 -> level4 < level4 .)


state 119

    (20) level3 -> level4 > level4 .

    OR              reduce using rule 20 (level3 -> level4 > level4 .)
    AND             reduce using rule 20 (level3 -> level4 > level4 .)
    EXPONENTIATION  reduce using rule 20 (level3 -> level4 > level4 .)
    ]               reduce using rule 20 (level3 -> level4 > level4 .)
    ;               reduce using rule 20 (level3 -> level4 > level4 .)
    )               reduce using rule 20 (level3 -> level4 > level4 .)
    ,               reduce using rule 20 (level3 -> level4 > level4 .)


state 120

    (21) level3 -> level4 LESS_EQUAL_THAN level4 .

    OR              reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    AND             reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ]               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ;               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    )               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)
    ,               reduce using rule 21 (level3 -> level4 LESS_EQUAL_THAN level4 .)


state 121

    (22) level3 -> level4 GREATER_EQUAL_THAN level4 .

    OR              reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    AND             reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    EXPONENTIATION  reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ]               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ;               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    )               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)
    ,               reduce using rule 22 (level3 -> level4 GREATER_EQUAL_THAN level4 .)


state 122

    (23) level3 -> level4 EQUALS level4 .

    OR              reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    AND             reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    EXPONENTIATION  reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ]               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ;               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    )               reduce using rule 23 (level3 -> level4 EQUALS level4 .)
    ,               reduce using rule 23 (level3 -> level4 EQUALS level4 .)


state 123

    (25) level4 -> level5 + level5 .

    <               reduce using rule 25 (level4 -> level5 + level5 .)
    >               reduce using rule 25 (level4 -> level5 + level5 .)
    LESS_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    GREATER_EQUAL_THAN reduce using rule 25 (level4 -> level5 + level5 .)
    EQUALS          reduce using rule 25 (level4 -> level5 + level5 .)
    OR              reduce using rule 25 (level4 -> level5 + level5 .)
    AND             reduce using rule 25 (level4 -> level5 + level5 .)
    EXPONENTIATION  reduce using rule 25 (level4 -> level5 + level5 .)
    ]               reduce using rule 25 (level4 -> level5 + level5 .)
    ;               reduce using rule 25 (level4 -> level5 + level5 .)
    )               reduce using rule 25 (level4 -> level5 + level5 .)
    ,               reduce using rule 25 (level4 -> level5 + level5 .)


state 124

    (26) level4 -> level5 - level5 .

    <               reduce using rule 26 (level4 -> level5 - level5 .)
    >               reduce using rule 26 (level4 -> level5 - level5 .)
    LESS_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    GREATER_EQUAL_THAN reduce using rule 26 (level4 -> level5 - level5 .)
    EQUALS          reduce using rule 26 (level4 -> level5 - level5 .)
    OR              reduce using rule 26 (level4 -> level5 - level5 .)
    AND             reduce using rule 26 (level4 -> level5 - level5 .)
    EXPONENTIATION  reduce using rule 26 (level4 -> level5 - level5 .)
    ]               reduce using rule 26 (level4 -> level5 - level5 .)
    ;               reduce using rule 26 (level4 -> level5 - level5 .)
    )               reduce using rule 26 (level4 -> level5 - level5 .)
    ,               reduce using rule 26 (level4 -> level5 - level5 .)


state 125

    (28) level5 -> level6 * level6 .

    +               reduce using rule 28 (level5 -> level6 * level6 .)
    -               reduce using rule 28 (level5 -> level6 * level6 .)
    <               reduce using rule 28 (level5 -> level6 * level6 .)
    >               reduce using rule 28 (level5 -> level6 * level6 .)
    LESS_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    GREATER_EQUAL_THAN reduce using rule 28 (level5 -> level6 * level6 .)
    EQUALS          reduce using rule 28 (level5 -> level6 * level6 .)
    OR              reduce using rule 28 (level5 -> level6 * level6 .)
    AND             reduce using rule 28 (level5 -> level6 * level6 .)
    EXPONENTIATION  reduce using rule 28 (level5 -> level6 * level6 .)
    ]               reduce using rule 28 (level5 -> level6 * level6 .)
    ;               reduce using rule 28 (level5 -> level6 * level6 .)
    )               reduce using rule 28 (level5 -> level6 * level6 .)
    ,               reduce using rule 28 (level5 -> level6 * level6 .)


state 126

    (29) level5 -> level6 / level6 .

    +               reduce using rule 29 (level5 -> level6 / level6 .)
    -               reduce using rule 29 (level5 -> level6 / level6 .)
    <               reduce using rule 29 (level5 -> level6 / level6 .)
    >               reduce using rule 29 (level5 -> level6 / level6 .)
    LESS_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    GREATER_EQUAL_THAN reduce using rule 29 (level5 -> level6 / level6 .)
    EQUALS          reduce using rule 29 (level5 -> level6 / level6 .)
    OR              reduce using rule 29 (level5 -> level6 / level6 .)
    AND             reduce using rule 29 (level5 -> level6 / level6 .)
    EXPONENTIATION  reduce using rule 29 (level5 -> level6 / level6 .)
    ]               reduce using rule 29 (level5 -> level6 / level6 .)
    ;               reduce using rule 29 (level5 -> level6 / level6 .)
    )               reduce using rule 29 (level5 -> level6 / level6 .)
    ,               reduce using rule 29 (level5 -> level6 / level6 .)


state 127

    (30) level5 -> level6 MOD level6 .

    +               reduce using rule 30 (level5 -> level6 MOD level6 .)
    -               reduce using rule 30 (level5 -> level6 MOD level6 .)
    <               reduce using rule 30 (level5 -> level6 MOD level6 .)
    >               reduce using rule 30 (level5 -> level6 MOD level6 .)
    LESS_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    GREATER_EQUAL_THAN reduce using rule 30 (level5 -> level6 MOD level6 .)
    EQUALS          reduce using rule 30 (level5 -> level6 MOD level6 .)
    OR              reduce using rule 30 (level5 -> level6 MOD level6 .)
    AND             reduce using rule 30 (level5 -> level6 MOD level6 .)
    EXPONENTIATION  reduce using rule 30 (level5 -> level6 MOD level6 .)
    ]               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ;               reduce using rule 30 (level5 -> level6 MOD level6 .)
    )               reduce using rule 30 (level5 -> level6 MOD level6 .)
    ,               reduce using rule 30 (level5 -> level6 MOD level6 .)


state 128

    (31) level6 -> ( expression ) .

    *               reduce using rule 31 (level6 -> ( expression ) .)
    /               reduce using rule 31 (level6 -> ( expression ) .)
    MOD             reduce using rule 31 (level6 -> ( expression ) .)
    +               reduce using rule 31 (level6 -> ( expression ) .)
    -               reduce using rule 31 (level6 -> ( expression ) .)
    <               reduce using rule 31 (level6 -> ( expression ) .)
    >               reduce using rule 31 (level6 -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 31 (level6 -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 31 (level6 -> ( expression ) .)
    EQUALS          reduce using rule 31 (level6 -> ( expression ) .)
    OR              reduce using rule 31 (level6 -> ( expression ) .)
    AND             reduce using rule 31 (level6 -> ( expression ) .)
    EXPONENTIATION  reduce using rule 31 (level6 -> ( expression ) .)
    ]               reduce using rule 31 (level6 -> ( expression ) .)
    ;               reduce using rule 31 (level6 -> ( expression ) .)
    )               reduce using rule 31 (level6 -> ( expression ) .)
    ,               reduce using rule 31 (level6 -> ( expression ) .)


state 129

    (58) call -> ID ( expressions ) .

    ;               reduce using rule 58 (call -> ID ( expressions ) .)
    *               reduce using rule 58 (call -> ID ( expressions ) .)
    /               reduce using rule 58 (call -> ID ( expressions ) .)
    MOD             reduce using rule 58 (call -> ID ( expressions ) .)
    +               reduce using rule 58 (call -> ID ( expressions ) .)
    -               reduce using rule 58 (call -> ID ( expressions ) .)
    <               reduce using rule 58 (call -> ID ( expressions ) .)
    >               reduce using rule 58 (call -> ID ( expressions ) .)
    LESS_EQUAL_THAN reduce using rule 58 (call -> ID ( expressions ) .)
    GREATER_EQUAL_THAN reduce using rule 58 (call -> ID ( expressions ) .)
    EQUALS          reduce using rule 58 (call -> ID ( expressions ) .)
    OR              reduce using rule 58 (call -> ID ( expressions ) .)
    AND             reduce using rule 58 (call -> ID ( expressions ) .)
    EXPONENTIATION  reduce using rule 58 (call -> ID ( expressions ) .)
    ]               reduce using rule 58 (call -> ID ( expressions ) .)
    )               reduce using rule 58 (call -> ID ( expressions ) .)
    ,               reduce using rule 58 (call -> ID ( expressions ) .)


state 130

    (60) expressions -> expression , . expressions
    (59) expressions -> . expression
    (60) expressions -> . expression , expressions
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 107
    expressions                    shift and go to state 137
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 131

    (62) assignment -> ID [ expression ] . = expression

    =               shift and go to state 138


state 132

    (63) condition -> IF ( expression ) . block elses
    (82) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 139

state 133

    (64) cycle -> WHILE ( expression ) . block
    (82) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 140

state 134

    (65) special -> SPECIAL_ID ( expressions ) .

    ;               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    *               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    /               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    MOD             reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    +               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    -               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    <               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    >               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    LESS_EQUAL_THAN reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    GREATER_EQUAL_THAN reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    EQUALS          reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    OR              reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    AND             reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    EXPONENTIATION  reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    ]               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    )               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)
    ,               reduce using rule 65 (special -> SPECIAL_ID ( expressions ) .)


state 135

    (40) function -> FUN return_type ID ( parameters ) . { variable_declaration statutes } ;

    {               shift and go to state 141


state 136

    (71) parameters -> type ID . other_parameters
    (72) other_parameters -> . , parameters
    (73) other_parameters -> . empty
    (2) empty -> .

    ,               shift and go to state 143
    )               reduce using rule 2 (empty -> .)

    other_parameters               shift and go to state 142
    empty                          shift and go to state 144

state 137

    (60) expressions -> expression , expressions .

    )               reduce using rule 60 (expressions -> expression , expressions .)


state 138

    (62) assignment -> ID [ expression ] = . expression
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 145
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 139

    (63) condition -> IF ( expression ) block . elses
    (68) elses -> . empty
    (69) elses -> . ELSE block
    (70) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 148
    ELSEIF          shift and go to state 149
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 146
    empty                          shift and go to state 147

state 140

    (64) cycle -> WHILE ( expression ) block .

    ;               reduce using rule 64 (cycle -> WHILE ( expression ) block .)


state 141

    (40) function -> FUN return_type ID ( parameters ) { . variable_declaration statutes } ;
    (3) variable_declaration -> . type ids ; variable_declaration
    (4) variable_declaration -> . empty
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL
    (2) empty -> .

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SPECIAL_ID      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    INCREMENT       reduce using rule 2 (empty -> .)
    DECREMENT       reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    variable_declaration           shift and go to state 150
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 142

    (71) parameters -> type ID other_parameters .

    )               reduce using rule 71 (parameters -> type ID other_parameters .)


state 143

    (72) other_parameters -> , . parameters
    (71) parameters -> . type ID other_parameters
    (43) type -> . INT
    (44) type -> . DEC
    (45) type -> . CHAR
    (46) type -> . STR
    (47) type -> . BOOL

    INT             shift and go to state 8
    DEC             shift and go to state 9
    CHAR            shift and go to state 10
    STR             shift and go to state 11
    BOOL            shift and go to state 12

    parameters                     shift and go to state 151
    type                           shift and go to state 114

state 144

    (73) other_parameters -> empty .

    )               reduce using rule 73 (other_parameters -> empty .)


state 145

    (62) assignment -> ID [ expression ] = expression .

    ;               reduce using rule 62 (assignment -> ID [ expression ] = expression .)


state 146

    (63) condition -> IF ( expression ) block elses .

    ;               reduce using rule 63 (condition -> IF ( expression ) block elses .)


state 147

    (68) elses -> empty .

    ;               reduce using rule 68 (elses -> empty .)


state 148

    (69) elses -> ELSE . block
    (82) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 152

state 149

    (70) elses -> ELSEIF . ( expression ) block elses

    (               shift and go to state 153


state 150

    (40) function -> FUN return_type ID ( parameters ) { variable_declaration . statutes } ;
    (48) statutes -> . statute ; statutes
    (49) statutes -> . empty
    (50) statute -> . call
    (51) statute -> . assignment
    (52) statute -> . condition
    (53) statute -> . cycle
    (54) statute -> . special
    (55) statute -> . return
    (56) statute -> . increment
    (57) statute -> . decrement
    (2) empty -> .
    (58) call -> . ID ( expressions )
    (61) assignment -> . ID = expression
    (62) assignment -> . ID [ expression ] = expression
    (63) condition -> . IF ( expression ) block elses
    (64) cycle -> . WHILE ( expression ) block
    (65) special -> . SPECIAL_ID ( expressions )
    (66) return -> . RETURN expression
    (67) return -> . RETURN
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    SPECIAL_ID      shift and go to state 45
    RETURN          shift and go to state 46
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48

    statutes                       shift and go to state 154
    statute                        shift and go to state 32
    empty                          shift and go to state 33
    call                           shift and go to state 34
    assignment                     shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    special                        shift and go to state 38
    return                         shift and go to state 39
    increment                      shift and go to state 40
    decrement                      shift and go to state 41

state 151

    (72) other_parameters -> , parameters .

    )               reduce using rule 72 (other_parameters -> , parameters .)


state 152

    (69) elses -> ELSE block .

    ;               reduce using rule 69 (elses -> ELSE block .)


state 153

    (70) elses -> ELSEIF ( . expression ) block elses
    (10) expression -> . level1
    (11) expression -> . level1 EXPONENTIATION level1
    (12) level1 -> . level2
    (13) level1 -> . + level2
    (14) level1 -> . - level2
    (15) level2 -> . level3
    (16) level2 -> . level3 OR level3
    (17) level2 -> . level3 AND level3
    (18) level3 -> . level4
    (19) level3 -> . level4 < level4
    (20) level3 -> . level4 > level4
    (21) level3 -> . level4 LESS_EQUAL_THAN level4
    (22) level3 -> . level4 GREATER_EQUAL_THAN level4
    (23) level3 -> . level4 EQUALS level4
    (24) level4 -> . level5
    (25) level4 -> . level5 + level5
    (26) level4 -> . level5 - level5
    (27) level5 -> . level6
    (28) level5 -> . level6 * level6
    (29) level5 -> . level6 / level6
    (30) level5 -> . level6 MOD level6
    (31) level6 -> . ( expression )
    (32) level6 -> . const
    (33) level6 -> . NOT const
    (34) level6 -> . increment
    (35) level6 -> . decrement
    (74) const -> . id
    (75) const -> . call
    (76) const -> . special
    (77) const -> . INT_VAL
    (78) const -> . DEC_VAL
    (79) const -> . CHAR_VAL
    (80) const -> . STR_VAL
    (81) const -> . BOOL_VAL
    (36) increment -> . INCREMENT id
    (37) decrement -> . DECREMENT id
    (8) id -> . ID
    (9) id -> . ID [ expression ]
    (58) call -> . ID ( expressions )
    (65) special -> . SPECIAL_ID ( expressions )

    +               shift and go to state 56
    -               shift and go to state 57
    (               shift and go to state 62
    NOT             shift and go to state 64
    INT_VAL         shift and go to state 70
    DEC_VAL         shift and go to state 71
    CHAR_VAL        shift and go to state 72
    STR_VAL         shift and go to state 73
    BOOL_VAL        shift and go to state 74
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    ID              shift and go to state 52
    SPECIAL_ID      shift and go to state 45

    expression                     shift and go to state 155
    level1                         shift and go to state 54
    level2                         shift and go to state 55
    level3                         shift and go to state 58
    level4                         shift and go to state 59
    level5                         shift and go to state 60
    level6                         shift and go to state 61
    const                          shift and go to state 63
    increment                      shift and go to state 65
    decrement                      shift and go to state 66
    id                             shift and go to state 67
    call                           shift and go to state 68
    special                        shift and go to state 69

state 154

    (40) function -> FUN return_type ID ( parameters ) { variable_declaration statutes . } ;

    }               shift and go to state 156


state 155

    (70) elses -> ELSEIF ( expression . ) block elses

    )               shift and go to state 157


state 156

    (40) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } . ;

    ;               shift and go to state 158


state 157

    (70) elses -> ELSEIF ( expression ) . block elses
    (82) block -> . { statutes }

    {               shift and go to state 21

    block                          shift and go to state 159

state 158

    (40) function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .

    FUN             reduce using rule 40 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)
    {               reduce using rule 40 (function -> FUN return_type ID ( parameters ) { variable_declaration statutes } ; .)


state 159

    (70) elses -> ELSEIF ( expression ) block . elses
    (68) elses -> . empty
    (69) elses -> . ELSE block
    (70) elses -> . ELSEIF ( expression ) block elses
    (2) empty -> .

    ELSE            shift and go to state 148
    ELSEIF          shift and go to state 149
    ;               reduce using rule 2 (empty -> .)

    elses                          shift and go to state 160
    empty                          shift and go to state 147

state 160

    (70) elses -> ELSEIF ( expression ) block elses .

    ;               reduce using rule 70 (elses -> ELSEIF ( expression ) block elses .)

